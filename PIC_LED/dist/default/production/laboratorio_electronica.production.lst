

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Aug 16 21:23:21 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	idataCOMRAM
    44  001E80                     __pidataCOMRAM:
    45                           	opt stack 0
    46                           
    47                           ;initializer for _anio
    48  001E80  0010               	dw	16
    49                           
    50                           ;initializer for _dia
    51  001E82  0001               	dw	1
    52                           
    53                           ;initializer for _mes
    54  001E84  0001               	dw	1
    55                           
    56                           	psect	smallconst
    57  000F00                     __psmallconst:
    58                           	opt stack 0
    59  000F00  00                 	db	0
    60  000F01                     _dpowers:
    61                           	opt stack 0
    62  000F01  0001               	dw	1
    63  000F03  000A               	dw	10
    64  000F05  0064               	dw	100
    65  000F07  03E8               	dw	1000
    66  000F09  2710               	dw	10000
    67  000F0B                     __end_of_dpowers:
    68                           	opt stack 0
    69  000F0B                     _LCD_INIT_STRING:
    70                           	opt stack 0
    71  000F0B  28                 	db	40
    72  000F0C  0C                 	db	12
    73  000F0D  01                 	db	1
    74  000F0E  06                 	db	6
    75  000F0F                     __end_of_LCD_INIT_STRING:
    76                           	opt stack 0
    77  000F0F                     STR_2:
    78                           
    79                           ; BSR set to: 15
    80  000F0F  25                 	db	37
    81  000F10  30                 	db	48	;'0'
    82  000F11  32                 	db	50	;'2'
    83  000F12  75                 	db	117	;'u'
    84  000F13  2F                 	db	47
    85  000F14  25                 	db	37
    86  000F15  30                 	db	48	;'0'
    87  000F16  32                 	db	50	;'2'
    88  000F17  75                 	db	117	;'u'
    89  000F18  2F                 	db	47
    90  000F19  25                 	db	37
    91  000F1A  30                 	db	48	;'0'
    92  000F1B  32                 	db	50	;'2'
    93  000F1C  75                 	db	117	;'u'
    94  000F1D  00                 	db	0
    95  000F1E                     STR_3:
    96                           
    97                           ; BSR set to: 15
    98  000F1E  25                 	db	37
    99  000F1F  30                 	db	48	;'0'
   100  000F20  32                 	db	50	;'2'
   101  000F21  75                 	db	117	;'u'
   102  000F22  3A                 	db	58	;':'
   103  000F23  25                 	db	37
   104  000F24  30                 	db	48	;'0'
   105  000F25  32                 	db	50	;'2'
   106  000F26  75                 	db	117	;'u'
   107  000F27  3A                 	db	58	;':'
   108  000F28  25                 	db	37
   109  000F29  30                 	db	48	;'0'
   110  000F2A  32                 	db	50	;'2'
   111  000F2B  75                 	db	117	;'u'
   112  000F2C  00                 	db	0
   113  000F2D                     STR_5:
   114                           
   115                           ; BSR set to: 15
   116  000F2D  20                 	db	32
   117  000F2E  20                 	db	32
   118  000F2F  20                 	db	32
   119  000F30  20                 	db	32
   120  000F31  20                 	db	32
   121  000F32  20                 	db	32
   122  000F33  00                 	db	0
   123  000F34                     STR_1:
   124                           
   125                           ; BSR set to: 15
   126  000F34  55                 	db	85	;'U'
   127  000F35  4E                 	db	78	;'N'
   128  000F36  54                 	db	84	;'T'
   129  000F37  52                 	db	82	;'R'
   130  000F38  45                 	db	69	;'E'
   131  000F39  46                 	db	70	;'F'
   132  000F3A  00                 	db	0
   133  0000                     
   134                           ; #config settings
   135  000F3B  00                 	db	0	; dummy byte at the end
   136  0000                     
   137                           	psect	nvCOMRAM
   138  000049                     __pnvCOMRAM:
   139                           	opt stack 0
   140  000049                     _anio_d:
   141                           	opt stack 0
   142  000049                     	ds	1
   143  00004A                     _anio_u:
   144                           	opt stack 0
   145  00004A                     	ds	1
   146  00004B                     _dia_semana:
   147                           	opt stack 0
   148  00004B                     	ds	1
   149  00004C                     _fecha_d:
   150                           	opt stack 0
   151  00004C                     	ds	1
   152  00004D                     _fecha_u:
   153                           	opt stack 0
   154  00004D                     	ds	1
   155  00004E                     _hora_d:
   156                           	opt stack 0
   157  00004E                     	ds	1
   158  00004F                     _hora_u:
   159                           	opt stack 0
   160  00004F                     	ds	1
   161  000050                     _mes_d:
   162                           	opt stack 0
   163  000050                     	ds	1
   164  000051                     _mes_u:
   165                           	opt stack 0
   166  000051                     	ds	1
   167  000052                     _minuto_d:
   168                           	opt stack 0
   169  000052                     	ds	1
   170  000053                     _minuto_u:
   171                           	opt stack 0
   172  000053                     	ds	1
   173  000054                     _segundo_d:
   174                           	opt stack 0
   175  000054                     	ds	1
   176  000055                     _segundo_u:
   177                           	opt stack 0
   178  000055                     	ds	1
   179  0000                     _ANCON0	set	3912
   180  0000                     _RTCCFG	set	3903
   181  0000                     _RTCCFGbits	set	3903
   182  0000                     _ADCON0	set	4034
   183  0000                     _ADCON1	set	4033
   184  0000                     _ALRMCFGbits	set	3985
   185  0000                     _EECON2	set	4007
   186  0000                     _INTCONbits	set	4082
   187  0000                     _LATBbits	set	3978
   188  0000                     _OSCCONbits	set	4051
   189  0000                     _OSCTUNEbits	set	3995
   190  0000                     _PIE3bits	set	4003
   191  0000                     _PORTAbits	set	3968
   192  0000                     _RTCVALH	set	3993
   193  0000                     _RTCVALL	set	3992
   194  0000                     _T1CONbits	set	4045
   195  0000                     _TRISA	set	3986
   196  0000                     _TRISB	set	3987
   197  0000                     _TRISBbits	set	3987
   198  0000                     _TRISC	set	3988
   199                           
   200                           	psect	cinit
   201  001D44                     __pcinit:
   202                           	opt stack 0
   203  001D44                     start_initialization:
   204                           	opt stack 0
   205  001D44                     __initialization:
   206                           	opt stack 0
   207                           
   208                           ; Clear objects allocated to BANK0 (44 bytes)
   209  001D44  EE00  F060         	lfsr	0,__pbssBANK0
   210  001D48  0E2C               	movlw	44
   211  001D4A                     clear_0:
   212  001D4A  6AEE               	clrf	postinc0,c
   213  001D4C  06E8               	decf	wreg,f,c
   214  001D4E  E1FD               	bnz	clear_0
   215                           
   216                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   217  001D50  6A5C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   218                           
   219                           ; Clear objects allocated to COMRAM (32 bytes)
   220  001D52  EE00  F029         	lfsr	0,__pbssCOMRAM
   221  001D56  0E20               	movlw	32
   222  001D58                     clear_1:
   223  001D58  6AEE               	clrf	postinc0,c
   224  001D5A  06E8               	decf	wreg,f,c
   225  001D5C  E1FD               	bnz	clear_1
   226                           
   227                           ; Initialize objects allocated to COMRAM (6 bytes)
   228                           ; load TBLPTR registers with __pidataCOMRAM
   229  001D5E  0E80               	movlw	low __pidataCOMRAM
   230  001D60  6EF6               	movwf	tblptrl,c
   231  001D62  0E1E               	movlw	high __pidataCOMRAM
   232  001D64  6EF7               	movwf	tblptrh,c
   233  001D66  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   234  001D68  6EF8               	movwf	tblptru,c
   235  001D6A  EE00  F056         	lfsr	0,__pdataCOMRAM
   236  001D6E  EE10 F006          	lfsr	1,6
   237  001D72                     copy_data0:
   238  001D72  0009               	tblrd		*+
   239  001D74  CFF5 FFEE          	movff	tablat,postinc0
   240  001D78  50E5               	movf	postdec1,w,c
   241  001D7A  50E1               	movf	fsr1l,w,c
   242  001D7C  E1FA               	bnz	copy_data0
   243  001D7E                     end_of_initialization:
   244                           	opt stack 0
   245  001D7E                     __end_of__initialization:
   246                           	opt stack 0
   247  001D7E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   248  001D80  6EF8               	movwf	tblptru,c
   249  001D82  0100               	movlb	0
   250  001D84  EFD0  F008         	goto	_main	;jump to C main() function
   251                           tblptru	equ	0xFF8
   252                           tblptrh	equ	0xFF7
   253                           tblptrl	equ	0xFF6
   254                           tablat	equ	0xFF5
   255                           postinc0	equ	0xFEE
   256                           wreg	equ	0xFE8
   257                           postdec1	equ	0xFE5
   258                           fsr1l	equ	0xFE1
   259                           
   260                           	psect	bitbssCOMRAM
   261  0002E0                     __pbitbssCOMRAM:
   262                           	opt stack 0
   263  0002E0                     _flag:
   264                           	opt stack 0
   265  0002E0                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           postdec1	equ	0xFE5
   273                           fsr1l	equ	0xFE1
   274                           
   275                           	psect	bssCOMRAM
   276  000029                     __pbssCOMRAM:
   277                           	opt stack 0
   278  000029                     _RtccTimeVal:
   279                           	opt stack 0
   280  000029                     	ds	4
   281  00002D                     _a:
   282                           	opt stack 0
   283  00002D                     	ds	2
   284  00002F                     _b:
   285                           	opt stack 0
   286  00002F                     	ds	2
   287  000031                     _c:
   288                           	opt stack 0
   289  000031                     	ds	2
   290  000033                     _diasem:
   291                           	opt stack 0
   292  000033                     	ds	2
   293  000035                     _hora:
   294                           	opt stack 0
   295  000035                     	ds	2
   296  000037                     _i:
   297                           	opt stack 0
   298  000037                     	ds	2
   299  000039                     _j:
   300                           	opt stack 0
   301  000039                     	ds	2
   302  00003B                     _k:
   303                           	opt stack 0
   304  00003B                     	ds	2
   305  00003D                     _minuto:
   306                           	opt stack 0
   307  00003D                     	ds	2
   308  00003F                     _segundo:
   309                           	opt stack 0
   310  00003F                     	ds	2
   311  000041                     _RtccDate:
   312                           	opt stack 0
   313  000041                     	ds	4
   314  000045                     _RtccTime:
   315                           	opt stack 0
   316  000045                     	ds	4
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	dataCOMRAM
   327  000056                     __pdataCOMRAM:
   328                           	opt stack 0
   329  000056                     _anio:
   330                           	opt stack 0
   331  000056                     	ds	2
   332  000058                     _dia:
   333                           	opt stack 0
   334  000058                     	ds	2
   335  00005A                     _mes:
   336                           	opt stack 0
   337  00005A                     	ds	2
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	bssBANK0
   348  000060                     __pbssBANK0:
   349                           	opt stack 0
   350  000060                     _RtccAlrmTimeDate:
   351                           	opt stack 0
   352  000060                     	ds	8
   353  000068                     _RtccTimeDate:
   354                           	opt stack 0
   355  000068                     	ds	8
   356  000070                     _Rtcc_read_TimeDate:
   357                           	opt stack 0
   358  000070                     	ds	8
   359  000078                     _buffer2:
   360                           	opt stack 0
   361  000078                     	ds	20
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	cstackCOMRAM
   372  000001                     __pcstackCOMRAM:
   373                           	opt stack 0
   374  000001                     ??_isdigit:
   375  000001                     ??_lcd_send_nibble:
   376  000001                     ?___wmul:
   377                           	opt stack 0
   378  000001                     ?___awdiv:
   379                           	opt stack 0
   380  000001                     ?___lwdiv:
   381                           	opt stack 0
   382  000001                     Delay100TCYx@unit:
   383                           	opt stack 0
   384  000001                     Delay1KTCYx@unit:
   385                           	opt stack 0
   386  000001                     RtccReadDate@pDt:
   387                           	opt stack 0
   388  000001                     RtccReadTime@pTm:
   389                           	opt stack 0
   390  000001                     RtccWriteDate@pDt:
   391                           	opt stack 0
   392  000001                     RtccWriteTime@pTm:
   393                           	opt stack 0
   394  000001                     ___wmul@multiplier:
   395                           	opt stack 0
   396  000001                     ___awdiv@dividend:
   397                           	opt stack 0
   398  000001                     ___lwdiv@dividend:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x0
   402  000001                     	ds	1
   403  000002                     lcd_send_nibble@nibble:
   404                           	opt stack 0
   405  000002                     _isdigit$1822:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x1
   409  000002                     	ds	1
   410  000003                     lcd_send_byte@n:
   411                           	opt stack 0
   412  000003                     RtccWriteDate@di:
   413                           	opt stack 0
   414  000003                     RtccWriteTime@di:
   415                           	opt stack 0
   416  000003                     isdigit@c:
   417                           	opt stack 0
   418  000003                     ___wmul@multiplicand:
   419                           	opt stack 0
   420  000003                     ___awdiv@divisor:
   421                           	opt stack 0
   422  000003                     ___lwdiv@divisor:
   423                           	opt stack 0
   424  000003                     RtccReadDate@rTD1:
   425                           	opt stack 0
   426  000003                     RtccReadTime@rTD1:
   427                           	opt stack 0
   428                           
   429                           ; 8 bytes @ 0x2
   430  000003                     	ds	1
   431  000004                     lcd_send_byte@address:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x3
   435  000004                     	ds	1
   436  000005                     lcd_init@i:
   437                           	opt stack 0
   438  000005                     lcd_gotoxy@y:
   439                           	opt stack 0
   440  000005                     lcd_comand@d:
   441                           	opt stack 0
   442  000005                     lcd_setcursor_vb@blink:
   443                           	opt stack 0
   444  000005                     RtccWriteDate@wasOn:
   445                           	opt stack 0
   446  000005                     RtccWriteTime@wasOn:
   447                           	opt stack 0
   448  000005                     ___awdiv@counter:
   449                           	opt stack 0
   450  000005                     ___wmul@product:
   451                           	opt stack 0
   452  000005                     ___lwdiv@quotient:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0x4
   456  000005                     	ds	1
   457  000006                     lcd_gotoxy@x:
   458                           	opt stack 0
   459  000006                     lcd_setcursor_vb@visible:
   460                           	opt stack 0
   461  000006                     RtccWriteDate@wasAlrm:
   462                           	opt stack 0
   463  000006                     RtccWriteTime@wasAlrm:
   464                           	opt stack 0
   465  000006                     ___awdiv@sign:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x5
   469  000006                     	ds	1
   470  000007                     lcd_gotoxy@address:
   471                           	opt stack 0
   472  000007                     RtccWriteTime@wasWrEn:
   473                           	opt stack 0
   474  000007                     ___lwdiv@counter:
   475                           	opt stack 0
   476  000007                     RtccWriteDate@tempYear:
   477                           	opt stack 0
   478  000007                     ___awdiv@quotient:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x6
   482  000007                     	ds	1
   483  000008                     ?___lwmod:
   484                           	opt stack 0
   485  000008                     lcd_putc@c:
   486                           	opt stack 0
   487  000008                     RtccWriteTime@tempMinSec:
   488                           	opt stack 0
   489  000008                     ___lwmod@dividend:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x7
   493  000008                     	ds	1
   494  000009                     RtccWriteDate@wasWrEn:
   495                           	opt stack 0
   496  000009                     lcd_putrs@ptr:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x8
   500  000009                     	ds	1
   501  00000A                     RtccWriteDate@tempDayMonth:
   502                           	opt stack 0
   503  00000A                     RtccWriteTime@tempHourWDay:
   504                           	opt stack 0
   505  00000A                     ___lwmod@divisor:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x9
   509  00000A                     	ds	1
   510  00000B                     RtccReadDate@rTD0:
   511                           	opt stack 0
   512  00000B                     RtccReadTime@rTD0:
   513                           	opt stack 0
   514                           
   515                           ; 8 bytes @ 0xA
   516  00000B                     	ds	1
   517  00000C                     ___lwmod@counter:
   518                           	opt stack 0
   519  00000C                     RtccWriteDate@tempHourWDay:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0xB
   523  00000C                     	ds	1
   524  00000D                     ?_sprintf:
   525                           	opt stack 0
   526  00000D                     sprintf@sp:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0xC
   530  00000D                     	ds	1
   531  00000E                     
   532                           ; 0 bytes @ 0xD
   533  00000E                     	ds	1
   534  00000F                     sprintf@f:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0xE
   538  00000F                     	ds	4
   539  000013                     
   540                           ; 0 bytes @ 0x12
   541  000013                     	ds	4
   542  000017                     ??_sprintf:
   543                           
   544                           ; 0 bytes @ 0x16
   545  000017                     	ds	4
   546  00001B                     sprintf@ap:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x1A
   550  00001B                     	ds	2
   551  00001D                     sprintf@flag:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x1C
   555  00001D                     	ds	1
   556  00001E                     sprintf@val:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x1D
   560  00001E                     	ds	2
   561  000020                     sprintf@prec:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x1F
   565  000020                     	ds	1
   566  000021                     sprintf@width:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x20
   570  000021                     	ds	2
   571  000023                     sprintf@c:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x22
   575  000023                     	ds	1
   576  000024                     ??_main:
   577                           
   578                           ; 0 bytes @ 0x23
   579  000024                     	ds	1
   580  000025                     main@cr_y:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x24
   584  000025                     	ds	2
   585  000027                     main@cr_x:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x26
   589  000027                     	ds	2
   590                           tblptru	equ	0xFF8
   591                           tblptrh	equ	0xFF7
   592                           tblptrl	equ	0xFF6
   593                           tablat	equ	0xFF5
   594                           postinc0	equ	0xFEE
   595                           wreg	equ	0xFE8
   596                           postdec1	equ	0xFE5
   597                           fsr1l	equ	0xFE1
   598                           
   599 ;;
   600 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   601 ;;
   602 ;; *************** function _main *****************
   603 ;; Defined at:
   604 ;;		line 104 in file "main.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  cr_x            2   38[COMRAM] int 
   609 ;;  cr_y            2   36[COMRAM] int 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  2  145[None  ] int 
   612 ;; Registers used:
   613 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   620 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   623 ;;Total ram usage:        5 bytes
   624 ;; Hardware stack levels required when called:    6
   625 ;; This function calls:
   626 ;;		_Read_RTC
   627 ;;		_Setup
   628 ;;		_Write_RTC
   629 ;;		_caratula
   630 ;;		_lcd_gotoxy
   631 ;;		_lcd_setcursor_vb
   632 ;; This function is called by:
   633 ;;		Startup code after reset
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text0
   638  0011A0                     __ptext0:
   639                           	opt stack 0
   640  0011A0                     _main:
   641                           	opt stack 25
   642                           
   643                           ;main.c: 107: int cr_x = 1;
   644                           
   645                           ; BSR set to: 15
   646                           ;incstack = 0
   647  0011A0  0E00               	movlw	0
   648  0011A2  6E28               	movwf	main@cr_x+1,c
   649  0011A4  0E01               	movlw	1
   650  0011A6  6E27               	movwf	main@cr_x,c
   651                           
   652                           ;main.c: 108: int cr_y = 1;
   653  0011A8  0E00               	movlw	0
   654  0011AA  6E26               	movwf	main@cr_y+1,c
   655  0011AC  0E01               	movlw	1
   656  0011AE  6E25               	movwf	main@cr_y,c
   657                           
   658                           ;main.c: 110: Setup();
   659  0011B0  EC7E  F00E         	call	_Setup	;wreg free
   660  0011B4  D000               	goto	l2401
   661  0011B6                     l2401:
   662                           
   663                           ;main.c: 113: Read_RTC();
   664  0011B6  EC2A  F00C         	call	_Read_RTC	;wreg free
   665                           
   666                           ;main.c: 114: caratula();
   667  0011BA  ECA5  F00B         	call	_caratula	;wreg free
   668                           
   669                           ;main.c: 117: lcd_setcursor_vb(1, 1);
   670  0011BE  0E01               	movlw	1
   671  0011C0  6E05               	movwf	lcd_setcursor_vb@blink,c
   672  0011C2  0E01               	movlw	1
   673  0011C4  EC14  F00F         	call	_lcd_setcursor_vb
   674                           
   675                           ;main.c: 119: lcd_gotoxy(cr_x,cr_y);
   676  0011C8  C025  F005         	movff	main@cr_y,lcd_gotoxy@y
   677  0011CC  5027               	movf	main@cr_x,w,c
   678  0011CE  ECF1  F00E         	call	_lcd_gotoxy
   679                           
   680                           ;main.c: 121: if(PORTAbits.RA1 == 0){
   681  0011D2  B280               	btfsc	3968,1,c	;volatile
   682  0011D4  D030               	goto	l147
   683                           
   684                           ;main.c: 127: if(cr_x == 16 && cr_y == 1){
   685  0011D6  0E10               	movlw	16
   686  0011D8  1827               	xorwf	main@cr_x,w,c
   687  0011DA  1028               	iorwf	main@cr_x+1,w,c
   688  0011DC  A4D8               	btfss	status,2,c
   689  0011DE  D00C               	goto	l2417
   690  0011E0  0425               	decf	main@cr_y,w,c
   691  0011E2  1026               	iorwf	main@cr_y+1,w,c
   692  0011E4  A4D8               	btfss	status,2,c
   693  0011E6  D008               	goto	l2417
   694                           
   695                           ;main.c: 128: cr_x = 0;
   696  0011E8  0E00               	movlw	0
   697  0011EA  6E28               	movwf	main@cr_x+1,c
   698  0011EC  0E00               	movlw	0
   699  0011EE  6E27               	movwf	main@cr_x,c
   700                           
   701                           ;main.c: 129: cr_y = 2;
   702  0011F0  0E00               	movlw	0
   703  0011F2  6E26               	movwf	main@cr_y+1,c
   704  0011F4  0E02               	movlw	2
   705  0011F6  D011               	goto	L1
   706  0011F8                     l2417:
   707                           
   708                           ;main.c: 131: else if(cr_x == 16 && cr_y == 2){
   709  0011F8  0E10               	movlw	16
   710  0011FA  1827               	xorwf	main@cr_x,w,c
   711  0011FC  1028               	iorwf	main@cr_x+1,w,c
   712  0011FE  A4D8               	btfss	status,2,c
   713  001200  D00E               	goto	l2423
   714  001202  0E02               	movlw	2
   715  001204  1825               	xorwf	main@cr_y,w,c
   716  001206  1026               	iorwf	main@cr_y+1,w,c
   717  001208  A4D8               	btfss	status,2,c
   718  00120A  D009               	goto	l2423
   719                           
   720                           ;main.c: 132: cr_x = 0;
   721  00120C  0E00               	movlw	0
   722  00120E  6E28               	movwf	main@cr_x+1,c
   723  001210  0E00               	movlw	0
   724  001212  6E27               	movwf	main@cr_x,c
   725                           
   726                           ;main.c: 133: cr_y = 1;
   727  001214  0E00               	movlw	0
   728  001216  6E26               	movwf	main@cr_y+1,c
   729  001218  0E01               	movlw	1
   730  00121A                     L1:
   731  00121A  6E25               	movwf	main@cr_y,c
   732  00121C  D000               	goto	l2423
   733  00121E                     l2423:
   734                           
   735                           ;main.c: 134: }
   736                           ;main.c: 135: cr_x++;
   737  00121E  4A27               	infsnz	main@cr_x,f,c
   738  001220  2A28               	incf	main@cr_x+1,f,c
   739                           
   740                           ;main.c: 136: _delay((unsigned long)((98)*(8000000/4000.0)));
   741  001222  0EFF               	movlw	255
   742  001224  6E24               	movwf	??_main& (0+255),c
   743  001226  0E8A               	movlw	138
   744  001228                     u2117:
   745  001228  2EE8               	decfsz	wreg,f,c
   746  00122A  D7FE               	goto	u2117
   747  00122C  2E24               	decfsz	??_main& (0+255),f,c
   748  00122E  D7FC               	goto	u2117
   749  001230  D000               	nop2	
   750                           
   751                           ;main.c: 137: LATBbits.LATB1 = !LATBbits.LATB1;;
   752  001232  728A               	btg	3978,1,c	;volatile
   753                           
   754                           ;main.c: 139: }
   755  001234  D001               	goto	l151
   756  001236                     l147:
   757                           
   758                           ;main.c: 140: else LATBbits.LATB1 = 0;;
   759  001236  928A               	bcf	3978,1,c	;volatile
   760  001238                     l151:
   761                           
   762                           ;main.c: 142: if(PORTAbits.RA0 == 0)
   763  001238  B080               	btfsc	3968,0,c	;volatile
   764  00123A  D0AD               	goto	l152
   765                           
   766                           ;main.c: 143: {
   767                           ;main.c: 146: if(cr_x == 9 && cr_y == 1){
   768  00123C  0E09               	movlw	9
   769  00123E  1827               	xorwf	main@cr_x,w,c
   770  001240  1028               	iorwf	main@cr_x+1,w,c
   771  001242  A4D8               	btfss	status,2,c
   772  001244  D009               	goto	l2435
   773  001246  0425               	decf	main@cr_y,w,c
   774  001248  1026               	iorwf	main@cr_y+1,w,c
   775  00124A  A4D8               	btfss	status,2,c
   776  00124C  D005               	goto	l2435
   777                           
   778                           ;main.c: 148: dia+=10;
   779  00124E  0E0A               	movlw	10
   780  001250  2658               	addwf	_dia,f,c
   781  001252  0E00               	movlw	0
   782  001254  2259               	addwfc	_dia+1,f,c
   783                           
   784                           ;main.c: 149: }
   785  001256  D093               	goto	l2501
   786  001258                     l2435:
   787                           
   788                           ;main.c: 150: else if(cr_x == 10 && cr_y == 1){
   789  001258  0E0A               	movlw	10
   790  00125A  1827               	xorwf	main@cr_x,w,c
   791  00125C  1028               	iorwf	main@cr_x+1,w,c
   792  00125E  A4D8               	btfss	status,2,c
   793  001260  D007               	goto	l2441
   794  001262  0425               	decf	main@cr_y,w,c
   795  001264  1026               	iorwf	main@cr_y+1,w,c
   796  001266  A4D8               	btfss	status,2,c
   797  001268  D003               	goto	l2441
   798                           
   799                           ;main.c: 152: dia++;
   800  00126A  4A58               	infsnz	_dia,f,c
   801  00126C  2A59               	incf	_dia+1,f,c
   802                           
   803                           ;main.c: 153: }
   804  00126E  D087               	goto	l2501
   805  001270                     l2441:
   806                           
   807                           ;main.c: 154: else if(cr_x == 12 && cr_y == 1){
   808  001270  0E0C               	movlw	12
   809  001272  1827               	xorwf	main@cr_x,w,c
   810  001274  1028               	iorwf	main@cr_x+1,w,c
   811  001276  A4D8               	btfss	status,2,c
   812  001278  D009               	goto	l2447
   813  00127A  0425               	decf	main@cr_y,w,c
   814  00127C  1026               	iorwf	main@cr_y+1,w,c
   815  00127E  A4D8               	btfss	status,2,c
   816  001280  D005               	goto	l2447
   817                           
   818                           ;main.c: 156: mes+=10;
   819  001282  0E0A               	movlw	10
   820  001284  265A               	addwf	_mes,f,c
   821  001286  0E00               	movlw	0
   822  001288  225B               	addwfc	_mes+1,f,c
   823                           
   824                           ;main.c: 157: }
   825  00128A  D079               	goto	l2501
   826  00128C                     l2447:
   827                           
   828                           ;main.c: 158: else if(cr_x == 13 && cr_y == 1){
   829  00128C  0E0D               	movlw	13
   830  00128E  1827               	xorwf	main@cr_x,w,c
   831  001290  1028               	iorwf	main@cr_x+1,w,c
   832  001292  A4D8               	btfss	status,2,c
   833  001294  D007               	goto	l2453
   834  001296  0425               	decf	main@cr_y,w,c
   835  001298  1026               	iorwf	main@cr_y+1,w,c
   836  00129A  A4D8               	btfss	status,2,c
   837  00129C  D003               	goto	l2453
   838                           
   839                           ;main.c: 160: mes++;
   840  00129E  4A5A               	infsnz	_mes,f,c
   841  0012A0  2A5B               	incf	_mes+1,f,c
   842                           
   843                           ;main.c: 161: }
   844  0012A2  D06D               	goto	l2501
   845  0012A4                     l2453:
   846                           
   847                           ;main.c: 162: else if(cr_x == 15 && cr_y == 1){
   848  0012A4  0E0F               	movlw	15
   849  0012A6  1827               	xorwf	main@cr_x,w,c
   850  0012A8  1028               	iorwf	main@cr_x+1,w,c
   851  0012AA  A4D8               	btfss	status,2,c
   852  0012AC  D009               	goto	l2459
   853  0012AE  0425               	decf	main@cr_y,w,c
   854  0012B0  1026               	iorwf	main@cr_y+1,w,c
   855  0012B2  A4D8               	btfss	status,2,c
   856  0012B4  D005               	goto	l2459
   857                           
   858                           ;main.c: 164: anio+=10;
   859  0012B6  0E0A               	movlw	10
   860  0012B8  2656               	addwf	_anio,f,c
   861  0012BA  0E00               	movlw	0
   862  0012BC  2257               	addwfc	_anio+1,f,c
   863                           
   864                           ;main.c: 165: }
   865  0012BE  D05F               	goto	l2501
   866  0012C0                     l2459:
   867                           
   868                           ;main.c: 166: else if(cr_x == 16 && cr_y == 1){
   869  0012C0  0E10               	movlw	16
   870  0012C2  1827               	xorwf	main@cr_x,w,c
   871  0012C4  1028               	iorwf	main@cr_x+1,w,c
   872  0012C6  A4D8               	btfss	status,2,c
   873  0012C8  D007               	goto	l2465
   874  0012CA  0425               	decf	main@cr_y,w,c
   875  0012CC  1026               	iorwf	main@cr_y+1,w,c
   876  0012CE  A4D8               	btfss	status,2,c
   877  0012D0  D003               	goto	l2465
   878                           
   879                           ;main.c: 168: anio++;
   880  0012D2  4A56               	infsnz	_anio,f,c
   881  0012D4  2A57               	incf	_anio+1,f,c
   882                           
   883                           ;main.c: 169: }
   884  0012D6  D053               	goto	l2501
   885  0012D8                     l2465:
   886                           
   887                           ;main.c: 170: else if(cr_x == 1 && cr_y == 2){
   888  0012D8  0427               	decf	main@cr_x,w,c
   889  0012DA  1028               	iorwf	main@cr_x+1,w,c
   890  0012DC  A4D8               	btfss	status,2,c
   891  0012DE  D00A               	goto	l2471
   892  0012E0  0E02               	movlw	2
   893  0012E2  1825               	xorwf	main@cr_y,w,c
   894  0012E4  1026               	iorwf	main@cr_y+1,w,c
   895  0012E6  A4D8               	btfss	status,2,c
   896  0012E8  D005               	goto	l2471
   897                           
   898                           ;main.c: 172: hora+=10;
   899  0012EA  0E0A               	movlw	10
   900  0012EC  2635               	addwf	_hora,f,c
   901  0012EE  0E00               	movlw	0
   902  0012F0  2236               	addwfc	_hora+1,f,c
   903                           
   904                           ;main.c: 173: }
   905  0012F2  D045               	goto	l2501
   906  0012F4                     l2471:
   907                           
   908                           ;main.c: 174: else if(cr_x == 2 && cr_y == 2){
   909  0012F4  0E02               	movlw	2
   910  0012F6  1827               	xorwf	main@cr_x,w,c
   911  0012F8  1028               	iorwf	main@cr_x+1,w,c
   912  0012FA  A4D8               	btfss	status,2,c
   913  0012FC  D008               	goto	l2477
   914  0012FE  0E02               	movlw	2
   915  001300  1825               	xorwf	main@cr_y,w,c
   916  001302  1026               	iorwf	main@cr_y+1,w,c
   917  001304  A4D8               	btfss	status,2,c
   918  001306  D003               	goto	l2477
   919                           
   920                           ;main.c: 176: hora++;
   921  001308  4A35               	infsnz	_hora,f,c
   922  00130A  2A36               	incf	_hora+1,f,c
   923                           
   924                           ;main.c: 177: }
   925  00130C  D038               	goto	l2501
   926  00130E                     l2477:
   927                           
   928                           ;main.c: 178: else if(cr_x == 4 && cr_y == 2){
   929  00130E  0E04               	movlw	4
   930  001310  1827               	xorwf	main@cr_x,w,c
   931  001312  1028               	iorwf	main@cr_x+1,w,c
   932  001314  A4D8               	btfss	status,2,c
   933  001316  D00A               	goto	l2483
   934  001318  0E02               	movlw	2
   935  00131A  1825               	xorwf	main@cr_y,w,c
   936  00131C  1026               	iorwf	main@cr_y+1,w,c
   937  00131E  A4D8               	btfss	status,2,c
   938  001320  D005               	goto	l2483
   939                           
   940                           ;main.c: 180: minuto+=10;
   941  001322  0E0A               	movlw	10
   942  001324  263D               	addwf	_minuto,f,c
   943  001326  0E00               	movlw	0
   944  001328  223E               	addwfc	_minuto+1,f,c
   945                           
   946                           ;main.c: 181: }
   947  00132A  D029               	goto	l2501
   948  00132C                     l2483:
   949                           
   950                           ;main.c: 182: else if(cr_x == 5 && cr_y == 2){
   951  00132C  0E05               	movlw	5
   952  00132E  1827               	xorwf	main@cr_x,w,c
   953  001330  1028               	iorwf	main@cr_x+1,w,c
   954  001332  A4D8               	btfss	status,2,c
   955  001334  D008               	goto	l2489
   956  001336  0E02               	movlw	2
   957  001338  1825               	xorwf	main@cr_y,w,c
   958  00133A  1026               	iorwf	main@cr_y+1,w,c
   959  00133C  A4D8               	btfss	status,2,c
   960  00133E  D003               	goto	l2489
   961                           
   962                           ;main.c: 184: minuto++;
   963  001340  4A3D               	infsnz	_minuto,f,c
   964  001342  2A3E               	incf	_minuto+1,f,c
   965                           
   966                           ;main.c: 185: }
   967  001344  D01C               	goto	l2501
   968  001346                     l2489:
   969                           
   970                           ;main.c: 186: else if(cr_x == 7 && cr_y == 2){
   971  001346  0E07               	movlw	7
   972  001348  1827               	xorwf	main@cr_x,w,c
   973  00134A  1028               	iorwf	main@cr_x+1,w,c
   974  00134C  A4D8               	btfss	status,2,c
   975  00134E  D00A               	goto	l2495
   976  001350  0E02               	movlw	2
   977  001352  1825               	xorwf	main@cr_y,w,c
   978  001354  1026               	iorwf	main@cr_y+1,w,c
   979  001356  A4D8               	btfss	status,2,c
   980  001358  D005               	goto	l2495
   981                           
   982                           ;main.c: 188: segundo+=10;
   983  00135A  0E0A               	movlw	10
   984  00135C  263F               	addwf	_segundo,f,c
   985  00135E  0E00               	movlw	0
   986  001360  2240               	addwfc	_segundo+1,f,c
   987                           
   988                           ;main.c: 189: }
   989  001362  D00D               	goto	l2501
   990  001364                     l2495:
   991                           
   992                           ;main.c: 190: else if(cr_x == 8 && cr_y == 2){
   993  001364  0E08               	movlw	8
   994  001366  1827               	xorwf	main@cr_x,w,c
   995  001368  1028               	iorwf	main@cr_x+1,w,c
   996  00136A  A4D8               	btfss	status,2,c
   997  00136C  D008               	goto	l2501
   998  00136E  0E02               	movlw	2
   999  001370  1825               	xorwf	main@cr_y,w,c
  1000  001372  1026               	iorwf	main@cr_y+1,w,c
  1001  001374  A4D8               	btfss	status,2,c
  1002  001376  D003               	goto	l2501
  1003                           
  1004                           ;main.c: 192: segundo++;
  1005  001378  4A3F               	infsnz	_segundo,f,c
  1006  00137A  2A40               	incf	_segundo+1,f,c
  1007  00137C  D000               	goto	l2501
  1008  00137E                     l2501:
  1009                           
  1010                           ;main.c: 193: }
  1011                           ;main.c: 195: Write_RTC();
  1012  00137E  ECD8  F009         	call	_Write_RTC	;wreg free
  1013                           
  1014                           ;main.c: 197: _delay((unsigned long)((98)*(8000000/4000.0)));
  1015  001382  0EFF               	movlw	255
  1016  001384  6E24               	movwf	??_main& (0+255),c
  1017  001386  0E8A               	movlw	138
  1018  001388                     u2127:
  1019  001388  2EE8               	decfsz	wreg,f,c
  1020  00138A  D7FE               	goto	u2127
  1021  00138C  2E24               	decfsz	??_main& (0+255),f,c
  1022  00138E  D7FC               	goto	u2127
  1023  001390  D000               	nop2	
  1024                           
  1025                           ;main.c: 198: LATBbits.LATB0 = 1;;
  1026  001392  808A               	bsf	3978,0,c	;volatile
  1027                           
  1028                           ;main.c: 199: }
  1029  001394  D002               	goto	l2507
  1030  001396                     l152:
  1031                           
  1032                           ;main.c: 200: else LATBbits.LATB0 = 0;;
  1033  001396  908A               	bcf	3978,0,c	;volatile
  1034  001398  D000               	goto	l2507
  1035  00139A                     l2507:
  1036                           
  1037                           ;main.c: 202: _delay((unsigned long)((98)*(8000000/4000.0)));
  1038  00139A  0EFF               	movlw	255
  1039  00139C  6E24               	movwf	??_main& (0+255),c
  1040  00139E  0E8A               	movlw	138
  1041  0013A0                     u2137:
  1042  0013A0  2EE8               	decfsz	wreg,f,c
  1043  0013A2  D7FE               	goto	u2137
  1044  0013A4  2E24               	decfsz	??_main& (0+255),f,c
  1045  0013A6  D7FC               	goto	u2137
  1046  0013A8  D000               	nop2	
  1047  0013AA  D705               	goto	l2401
  1048                           
  1049                           ;main.c: 204: }
  1050                           ;main.c: 205: return 0;
  1051                           ;	Return value of _main is never used
  1052  0013AC  EF00  F000         	goto	start
  1053  0013B0                     __end_of_main:
  1054                           	opt stack 0
  1055                           tblptru	equ	0xFF8
  1056                           tblptrh	equ	0xFF7
  1057                           tblptrl	equ	0xFF6
  1058                           tablat	equ	0xFF5
  1059                           postinc0	equ	0xFEE
  1060                           wreg	equ	0xFE8
  1061                           postdec1	equ	0xFE5
  1062                           fsr1l	equ	0xFE1
  1063                           status	equ	0xFD8
  1064                           
  1065 ;; *************** function _lcd_setcursor_vb *****************
  1066 ;; Defined at:
  1067 ;;		line 210 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  visible         1    wreg     unsigned char 
  1070 ;;  blink           1    4[COMRAM] unsigned char 
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  visible         1    5[COMRAM] unsigned char 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;		None               void
  1075 ;; Registers used:
  1076 ;;		wreg, status,2, status,0, cstack
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1082 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1085 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1086 ;;Total ram usage:        2 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    2
  1089 ;; This function calls:
  1090 ;;		_lcd_send_byte
  1091 ;; This function is called by:
  1092 ;;		_main
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text1
  1097  001E28                     __ptext1:
  1098                           	opt stack 0
  1099  001E28                     _lcd_setcursor_vb:
  1100                           	opt stack 28
  1101                           
  1102                           ;incstack = 0
  1103                           ;lcd_setcursor_vb@visible stored from wreg
  1104  001E28  6E06               	movwf	lcd_setcursor_vb@visible,c
  1105                           
  1106                           ;unmc_lcd_216.c: 211: lcd_send_byte(0, 0xC|(visible<<1)|blink);
  1107  001E2A  5006               	movf	lcd_setcursor_vb@visible,w,c
  1108  001E2C  2406               	addwf	lcd_setcursor_vb@visible,w,c
  1109  001E2E  1005               	iorwf	lcd_setcursor_vb@blink,w,c
  1110  001E30  090C               	iorlw	12
  1111  001E32  6E03               	movwf	lcd_send_byte@n,c
  1112  001E34  0E00               	movlw	0
  1113  001E36  ECC4  F00E         	call	_lcd_send_byte
  1114  001E3A  0012               	return		;funcret
  1115  001E3C                     __end_of_lcd_setcursor_vb:
  1116                           	opt stack 0
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           postdec1	equ	0xFE5
  1124                           fsr1l	equ	0xFE1
  1125                           status	equ	0xFD8
  1126                           
  1127 ;; *************** function _caratula *****************
  1128 ;; Defined at:
  1129 ;;		line 36 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;		None               void
  1136 ;; Registers used:
  1137 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1147 ;;Total ram usage:        0 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    5
  1150 ;; This function calls:
  1151 ;;		_lcd_comand
  1152 ;;		_lcd_gotoxy
  1153 ;;		_lcd_putrs
  1154 ;;		_sprintf
  1155 ;; This function is called by:
  1156 ;;		_main
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text2
  1161  00174A                     __ptext2:
  1162                           	opt stack 0
  1163  00174A                     _caratula:
  1164                           	opt stack 25
  1165                           
  1166                           ;main.c: 38: lcd_comand(0b00001100);
  1167                           
  1168                           ;incstack = 0
  1169  00174A  0E0C               	movlw	12
  1170  00174C  EC39  F00F         	call	_lcd_comand
  1171                           
  1172                           ;main.c: 39: lcd_gotoxy(1,1);
  1173  001750  0E01               	movlw	1
  1174  001752  6E05               	movwf	lcd_gotoxy@y,c
  1175  001754  0E01               	movlw	1
  1176  001756  ECF1  F00E         	call	_lcd_gotoxy
  1177                           
  1178                           ;main.c: 40: lcd_putrs("UNTREF");
  1179  00175A  0E34               	movlw	low STR_1
  1180  00175C  6E09               	movwf	lcd_putrs@ptr,c
  1181  00175E  0E0F               	movlw	high STR_1
  1182  001760  6E0A               	movwf	lcd_putrs@ptr+1,c
  1183  001762  EC08  F00E         	call	_lcd_putrs	;wreg free
  1184                           
  1185                           ;main.c: 41: sprintf(buffer2,"%02u/%02u/%02u",dia,mes,anio);
  1186  001766  0E78               	movlw	low _buffer2
  1187  001768  6E0D               	movwf	sprintf@sp,c
  1188  00176A  0E00               	movlw	high _buffer2
  1189  00176C  6E0E               	movwf	sprintf@sp+1,c
  1190  00176E  0E0F               	movlw	low STR_2
  1191  001770  6E0F               	movwf	sprintf@f,c
  1192  001772  0E0F               	movlw	high STR_2
  1193  001774  6E10               	movwf	sprintf@f+1,c
  1194  001776  C058  F011         	movff	_dia,?_sprintf+4
  1195  00177A  C059  F012         	movff	_dia+1,?_sprintf+5
  1196  00177E  C05A  F013         	movff	_mes,?_sprintf+6
  1197  001782  C05B  F014         	movff	_mes+1,?_sprintf+7
  1198  001786  C056  F015         	movff	_anio,?_sprintf+8
  1199  00178A  C057  F016         	movff	_anio+1,?_sprintf+9
  1200  00178E  EC9E  F007         	call	_sprintf	;wreg free
  1201                           
  1202                           ;main.c: 42: lcd_gotoxy(9,1);
  1203  001792  0E01               	movlw	1
  1204  001794  6E05               	movwf	lcd_gotoxy@y,c
  1205  001796  0E09               	movlw	9
  1206  001798  ECF1  F00E         	call	_lcd_gotoxy
  1207                           
  1208                           ;main.c: 43: lcd_putrs(buffer2);
  1209  00179C  0E78               	movlw	low _buffer2
  1210  00179E  6E09               	movwf	lcd_putrs@ptr,c
  1211  0017A0  0E00               	movlw	high _buffer2
  1212  0017A2  6E0A               	movwf	lcd_putrs@ptr+1,c
  1213  0017A4  EC08  F00E         	call	_lcd_putrs	;wreg free
  1214                           
  1215                           ;main.c: 44: sprintf(buffer2,"%02u:%02u:%02u",hora,minuto,segundo);
  1216  0017A8  0E78               	movlw	low _buffer2
  1217  0017AA  6E0D               	movwf	sprintf@sp,c
  1218  0017AC  0E00               	movlw	high _buffer2
  1219  0017AE  6E0E               	movwf	sprintf@sp+1,c
  1220  0017B0  0E1E               	movlw	low STR_3
  1221  0017B2  6E0F               	movwf	sprintf@f,c
  1222  0017B4  0E0F               	movlw	high STR_3
  1223  0017B6  6E10               	movwf	sprintf@f+1,c
  1224  0017B8  C035  F011         	movff	_hora,?_sprintf+4
  1225  0017BC  C036  F012         	movff	_hora+1,?_sprintf+5
  1226  0017C0  C03D  F013         	movff	_minuto,?_sprintf+6
  1227  0017C4  C03E  F014         	movff	_minuto+1,?_sprintf+7
  1228  0017C8  C03F  F015         	movff	_segundo,?_sprintf+8
  1229  0017CC  C040  F016         	movff	_segundo+1,?_sprintf+9
  1230  0017D0  EC9E  F007         	call	_sprintf	;wreg free
  1231                           
  1232                           ;main.c: 45: lcd_gotoxy(1,2);
  1233  0017D4  0E02               	movlw	2
  1234  0017D6  6E05               	movwf	lcd_gotoxy@y,c
  1235  0017D8  0E01               	movlw	1
  1236  0017DA  ECF1  F00E         	call	_lcd_gotoxy
  1237                           
  1238                           ;main.c: 47: b=b++;
  1239  0017DE  0E78               	movlw	low _buffer2
  1240  0017E0  6E09               	movwf	lcd_putrs@ptr,c
  1241  0017E2  0E00               	movlw	high _buffer2
  1242  0017E4  6E0A               	movwf	lcd_putrs@ptr+1,c
  1243  0017E6  EC08  F00E         	call	_lcd_putrs	;wreg free
  1244  0017EA  4A2F               	infsnz	_b,f,c
  1245  0017EC  2A30               	incf	_b+1,f,c
  1246                           
  1247                           ;main.c: 48: if(b<7)
  1248  0017EE  BE30               	btfsc	_b+1,7,c
  1249  0017F0  D006               	goto	l2359
  1250  0017F2  5030               	movf	_b+1,w,c
  1251  0017F4  E110               	bnz	l2363
  1252  0017F6  0E07               	movlw	7
  1253  0017F8  5C2F               	subwf	_b,w,c
  1254  0017FA  B0D8               	btfsc	status,0,c
  1255  0017FC  D00C               	goto	l2363
  1256  0017FE                     l2359:
  1257                           
  1258                           ;main.c: 49: {
  1259                           ;main.c: 50: lcd_gotoxy(1,1);
  1260  0017FE  0E01               	movlw	1
  1261  001800  6E05               	movwf	lcd_gotoxy@y,c
  1262  001802  0E01               	movlw	1
  1263  001804  ECF1  F00E         	call	_lcd_gotoxy
  1264                           
  1265                           ;main.c: 51: lcd_putrs("UNTREF");
  1266  001808  0E34               	movlw	low STR_1
  1267  00180A  6E09               	movwf	lcd_putrs@ptr,c
  1268  00180C  0E0F               	movlw	high STR_1
  1269  00180E  6E0A               	movwf	lcd_putrs@ptr+1,c
  1270  001810  EC08  F00E         	call	_lcd_putrs	;wreg free
  1271  001814  D000               	goto	l2363
  1272  001816                     l2363:
  1273                           
  1274                           ;main.c: 52: }
  1275                           ;main.c: 53: if(b>6)
  1276  001816  BE30               	btfsc	_b+1,7,c
  1277  001818  0012               	return	
  1278  00181A  5030               	movf	_b+1,w,c
  1279  00181C  E104               	bnz	u1780
  1280  00181E  0E07               	movlw	7
  1281  001820  5C2F               	subwf	_b,w,c
  1282  001822  A0D8               	btfss	status,0,c
  1283  001824  0012               	return	
  1284  001826                     u1780:
  1285                           
  1286                           ;main.c: 54: {
  1287                           ;main.c: 55: if(b==11){b=0;}
  1288  001826  0E0B               	movlw	11
  1289  001828  182F               	xorwf	_b,w,c
  1290  00182A  1030               	iorwf	_b+1,w,c
  1291  00182C  A4D8               	btfss	status,2,c
  1292  00182E  D005               	goto	l2369
  1293  001830  0E00               	movlw	0
  1294  001832  6E30               	movwf	_b+1,c
  1295  001834  0E00               	movlw	0
  1296  001836  6E2F               	movwf	_b,c
  1297  001838  D000               	goto	l2369
  1298  00183A                     l2369:
  1299                           
  1300                           ;main.c: 56: lcd_gotoxy(1,1);
  1301  00183A  0E01               	movlw	1
  1302  00183C  6E05               	movwf	lcd_gotoxy@y,c
  1303  00183E  0E01               	movlw	1
  1304  001840  ECF1  F00E         	call	_lcd_gotoxy
  1305                           
  1306                           ;main.c: 57: lcd_putrs("      ");
  1307  001844  0E2D               	movlw	low STR_5
  1308  001846  6E09               	movwf	lcd_putrs@ptr,c
  1309  001848  0E0F               	movlw	high STR_5
  1310  00184A  6E0A               	movwf	lcd_putrs@ptr+1,c
  1311  00184C  EC08  F00E         	call	_lcd_putrs	;wreg free
  1312  001850  0012               	return	
  1313  001852  0012               	return		;funcret
  1314  001854                     __end_of_caratula:
  1315                           	opt stack 0
  1316                           tblptru	equ	0xFF8
  1317                           tblptrh	equ	0xFF7
  1318                           tblptrl	equ	0xFF6
  1319                           tablat	equ	0xFF5
  1320                           postinc0	equ	0xFEE
  1321                           wreg	equ	0xFE8
  1322                           postdec1	equ	0xFE5
  1323                           fsr1l	equ	0xFE1
  1324                           status	equ	0xFD8
  1325                           
  1326 ;; *************** function _sprintf *****************
  1327 ;; Defined at:
  1328 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1331 ;;		 -> buffer2(20), 
  1332 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1333 ;;		 -> STR_3(15), STR_2(15), 
  1334 ;; Auto vars:     Size  Location     Type
  1335 ;;  tmpval          4    0        struct .
  1336 ;;  cp              3    0        PTR const unsigned char 
  1337 ;;  width           2   32[COMRAM] int 
  1338 ;;  val             2   29[COMRAM] unsigned int 
  1339 ;;  ap              2   26[COMRAM] PTR void [1]
  1340 ;;		 -> ?_sprintf(2), 
  1341 ;;  len             2    0        unsigned int 
  1342 ;;  c               1   34[COMRAM] char 
  1343 ;;  prec            1   31[COMRAM] char 
  1344 ;;  flag            1   28[COMRAM] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  2   12[COMRAM] int 
  1347 ;; Registers used:
  1348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1354 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1355 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1356 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1357 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1358 ;;Total ram usage:       23 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; Hardware stack levels required when called:    1
  1361 ;; This function calls:
  1362 ;;		___lwdiv
  1363 ;;		___lwmod
  1364 ;;		___wmul
  1365 ;;		_isdigit
  1366 ;; This function is called by:
  1367 ;;		_caratula
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text3
  1372  000F3C                     __ptext3:
  1373                           	opt stack 0
  1374  000F3C                     _sprintf:
  1375                           	opt stack 28
  1376                           
  1377                           ;doprnt.c: 494: va_list ap;
  1378                           ;doprnt.c: 499: signed char c;
  1379                           ;doprnt.c: 501: int width;
  1380                           ;doprnt.c: 506: signed char prec;
  1381                           ;doprnt.c: 508: unsigned char flag;
  1382                           ;doprnt.c: 523: union {
  1383                           ;doprnt.c: 524: unsigned long vd;
  1384                           ;doprnt.c: 525: double integ;
  1385                           ;doprnt.c: 526: } tmpval;
  1386                           ;doprnt.c: 528: unsigned int val;
  1387                           ;doprnt.c: 529: unsigned len;
  1388                           ;doprnt.c: 530: const char * cp;
  1389                           ;doprnt.c: 533: *ap = __va_start();
  1390                           
  1391                           ;incstack = 0
  1392  000F3C  0E11               	movlw	low (?_sprintf+4)
  1393  000F3E  6E1B               	movwf	sprintf@ap,c
  1394  000F40  0E00               	movlw	high (?_sprintf+4)
  1395  000F42  6E1C               	movwf	sprintf@ap+1,c
  1396                           
  1397                           ;doprnt.c: 536: while(c = *f++) {
  1398  000F44  D117               	goto	l2261
  1399  000F46                     l2179:
  1400                           
  1401                           ;doprnt.c: 538: if(c != '%')
  1402  000F46  0E25               	movlw	37
  1403  000F48  1823               	xorwf	sprintf@c,w,c
  1404  000F4A  B4D8               	btfsc	status,2,c
  1405  000F4C  D009               	goto	l2185
  1406                           
  1407                           ;doprnt.c: 540: {
  1408                           ;doprnt.c: 541: ((*sp++ = (c)));
  1409  000F4E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1410  000F52  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1411  000F56  C023  FFDF         	movff	sprintf@c,indf2
  1412  000F5A  4A0D               	infsnz	sprintf@sp,f,c
  1413  000F5C  2A0E               	incf	sprintf@sp+1,f,c
  1414                           
  1415                           ;doprnt.c: 542: continue;
  1416  000F5E  D10A               	goto	l2261
  1417  000F60                     l2185:
  1418                           
  1419                           ;doprnt.c: 543: }
  1420                           ;doprnt.c: 546: width = 0;
  1421  000F60  0E00               	movlw	0
  1422  000F62  6E22               	movwf	sprintf@width+1,c
  1423  000F64  0E00               	movlw	0
  1424  000F66  6E21               	movwf	sprintf@width,c
  1425                           
  1426                           ;doprnt.c: 548: flag = 0;
  1427  000F68  0E00               	movlw	0
  1428  000F6A  6E1D               	movwf	sprintf@flag,c
  1429                           
  1430                           ;doprnt.c: 551: switch(*f) {
  1431                           
  1432                           ;doprnt.c: 550: for(;;) {
  1433  000F6C  D005               	goto	l2191
  1434  000F6E                     l2187:
  1435                           
  1436                           ;doprnt.c: 580: flag |= 0x04;
  1437  000F6E  841D               	bsf	sprintf@flag,2,c
  1438                           
  1439                           ;doprnt.c: 581: f++;
  1440  000F70  4A0F               	infsnz	sprintf@f,f,c
  1441  000F72  2A10               	incf	sprintf@f+1,f,c
  1442                           
  1443                           ;doprnt.c: 582: continue;
  1444  000F74  D001               	goto	l2191
  1445                           
  1446                           ;doprnt.c: 584: }
  1447  000F76  D00B               	goto	l2193
  1448  000F78                     l2191:
  1449  000F78  C00F  FFF6         	movff	sprintf@f,tblptrl
  1450  000F7C  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1451  000F80                     	if	0	;tblptru may be non-zero
  1452  000F80                     	endif
  1453  000F80                     	if	0	;tblptru may be non-zero
  1454  000F80                     	endif
  1455  000F80  0008               	tblrd		*
  1456  000F82  50F5               	movf	tablat,w,c
  1457                           
  1458                           ; Switch size 1, requested type "space"
  1459                           ; Number of cases is 1, Range of values is 48 to 48
  1460                           ; switch strategies available:
  1461                           ; Name         Instructions Cycles
  1462                           ; simple_byte            4     3 (average)
  1463                           ;	Chosen strategy is simple_byte
  1464  000F84  0A30               	xorlw	48	; case 48
  1465  000F86  B4D8               	btfsc	status,2,c
  1466  000F88  D7F2               	goto	l2187
  1467                           
  1468                           ;doprnt.c: 585: break;
  1469  000F8A  D001               	goto	l2193
  1470                           
  1471                           ;doprnt.c: 586: }
  1472  000F8C  D7F5               	goto	l2191
  1473  000F8E                     l2193:
  1474                           
  1475                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1476  000F8E  C00F  FFF6         	movff	sprintf@f,tblptrl
  1477  000F92  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1478  000F96                     	if	0	;tblptru may be non-zero
  1479  000F96                     	endif
  1480  000F96                     	if	0	;tblptru may be non-zero
  1481  000F96                     	endif
  1482  000F96  0008               	tblrd		*
  1483  000F98  50F5               	movf	tablat,w,c
  1484  000F9A  EC03  F00F         	call	_isdigit
  1485  000F9E  A0D8               	btfss	status,0,c
  1486  000FA0  D03A               	goto	l2209
  1487                           
  1488                           ;doprnt.c: 598: width = 0;
  1489  000FA2  0E00               	movlw	0
  1490  000FA4  6E22               	movwf	sprintf@width+1,c
  1491  000FA6  0E00               	movlw	0
  1492  000FA8  6E21               	movwf	sprintf@width,c
  1493  000FAA  D000               	goto	l2197
  1494  000FAC                     l2197:
  1495                           
  1496                           ;doprnt.c: 600: width *= 10;
  1497  000FAC  C021  F001         	movff	sprintf@width,___wmul@multiplier
  1498  000FB0  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1499  000FB4  0E00               	movlw	0
  1500  000FB6  6E04               	movwf	___wmul@multiplicand+1,c
  1501  000FB8  0E0A               	movlw	10
  1502  000FBA  6E03               	movwf	___wmul@multiplicand,c
  1503  000FBC  ECDD  F00E         	call	___wmul	;wreg free
  1504  000FC0  C001  F021         	movff	?___wmul,sprintf@width
  1505  000FC4  C002  F022         	movff	?___wmul+1,sprintf@width+1
  1506                           
  1507                           ;doprnt.c: 601: width += *f++ - '0';
  1508  000FC8  0ED0               	movlw	208
  1509  000FCA  6E17               	movwf	??_sprintf& (0+255),c
  1510  000FCC  0EFF               	movlw	255
  1511  000FCE  6E18               	movwf	(??_sprintf+1)& (0+255),c
  1512  000FD0  C00F  FFF6         	movff	sprintf@f,tblptrl
  1513  000FD4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1514  000FD8                     	if	0	;tblptru may be non-zero
  1515  000FD8                     	endif
  1516  000FD8                     	if	0	;tblptru may be non-zero
  1517  000FD8                     	endif
  1518  000FD8  0008               	tblrd		*
  1519  000FDA  50F5               	movf	tablat,w,c
  1520  000FDC  6E19               	movwf	(??_sprintf+2)& (0+255),c
  1521  000FDE  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  1522  000FE0  5017               	movf	??_sprintf,w,c
  1523  000FE2  2619               	addwf	??_sprintf+2,f,c
  1524  000FE4  5018               	movf	??_sprintf+1,w,c
  1525  000FE6  221A               	addwfc	??_sprintf+3,f,c
  1526  000FE8  5019               	movf	??_sprintf+2,w,c
  1527  000FEA  2621               	addwf	sprintf@width,f,c
  1528  000FEC  501A               	movf	??_sprintf+3,w,c
  1529  000FEE  2222               	addwfc	sprintf@width+1,f,c
  1530  000FF0  4A0F               	infsnz	sprintf@f,f,c
  1531  000FF2  2A10               	incf	sprintf@f+1,f,c
  1532                           
  1533                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1534  000FF4  C00F  FFF6         	movff	sprintf@f,tblptrl
  1535  000FF8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1536  000FFC                     	if	0	;tblptru may be non-zero
  1537  000FFC                     	endif
  1538  000FFC                     	if	0	;tblptru may be non-zero
  1539  000FFC                     	endif
  1540  000FFC  0008               	tblrd		*
  1541  000FFE  50F5               	movf	tablat,w,c
  1542  001000  EC03  F00F         	call	_isdigit
  1543  001004  A0D8               	btfss	status,0,c
  1544  001006  D007               	goto	l2209
  1545  001008  D7D1               	goto	l2197
  1546                           
  1547                           ;doprnt.c: 608: }
  1548                           ;doprnt.c: 635: switch(c = *f++) {
  1549  00100A  D005               	goto	l2209
  1550                           
  1551                           ;doprnt.c: 638: goto alldone;
  1552                           
  1553                           ;doprnt.c: 637: case 0:
  1554  00100C  D0C1               	goto	l2263
  1555                           
  1556                           ;doprnt.c: 813: continue;
  1557                           
  1558                           ;doprnt.c: 802: default:
  1559  00100E  D0B2               	goto	l2261
  1560  001010                     l2205:
  1561                           
  1562                           ;doprnt.c: 818: flag |= 0xC0;
  1563  001010  0EC0               	movlw	192
  1564  001012  121D               	iorwf	sprintf@flag,f,c
  1565                           
  1566                           ;doprnt.c: 822: }
  1567                           
  1568                           ;doprnt.c: 819: break;
  1569  001014  D011               	goto	l2211
  1570  001016                     l2209:
  1571  001016  C00F  FFF6         	movff	sprintf@f,tblptrl
  1572  00101A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1573  00101E  4A0F               	infsnz	sprintf@f,f,c
  1574  001020  2A10               	incf	sprintf@f+1,f,c
  1575  001022                     	if	0	;tblptru may be non-zero
  1576  001022                     	endif
  1577  001022                     	if	0	;tblptru may be non-zero
  1578  001022                     	endif
  1579  001022  0008               	tblrd		*
  1580  001024  CFF5 F023          	movff	tablat,sprintf@c
  1581  001028  5023               	movf	sprintf@c,w,c
  1582                           
  1583                           ; Switch size 1, requested type "space"
  1584                           ; Number of cases is 2, Range of values is 0 to 117
  1585                           ; switch strategies available:
  1586                           ; Name         Instructions Cycles
  1587                           ; simple_byte            7     4 (average)
  1588                           ;	Chosen strategy is simple_byte
  1589  00102A  0A00               	xorlw	0	; case 0
  1590  00102C  B4D8               	btfsc	status,2,c
  1591  00102E  D0B0               	goto	l2263
  1592  001030  0A75               	xorlw	117	; case 117
  1593  001032  B4D8               	btfsc	status,2,c
  1594  001034  D7ED               	goto	l2205
  1595  001036  D09E               	goto	l2261
  1596  001038                     l2211:
  1597                           
  1598                           ;doprnt.c: 1273: {
  1599                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1600  001038  C01B  FFD9         	movff	sprintf@ap,fsr2l
  1601  00103C  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  1602  001040  CFDE F01E          	movff	postinc2,sprintf@val
  1603  001044  CFDD F01F          	movff	postdec2,sprintf@val+1
  1604  001048  0E02               	movlw	2
  1605  00104A  261B               	addwf	sprintf@ap,f,c
  1606  00104C  0E00               	movlw	0
  1607  00104E  221C               	addwfc	sprintf@ap+1,f,c
  1608                           
  1609                           ;doprnt.c: 1287: }
  1610                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1611  001050  0E01               	movlw	1
  1612  001052  6E23               	movwf	sprintf@c,c
  1613  001054                     l2217:
  1614  001054  0E05               	movlw	5
  1615  001056  1823               	xorwf	sprintf@c,w,c
  1616  001058  B4D8               	btfsc	status,2,c
  1617  00105A  D016               	goto	l2229
  1618  00105C  D001               	goto	l2221
  1619  00105E  D014               	goto	l2229
  1620  001060                     l2221:
  1621                           
  1622                           ;doprnt.c: 1306: if(val < dpowers[c])
  1623  001060  5023               	movf	sprintf@c,w,c
  1624  001062  0D02               	mullw	2
  1625  001064  0E01               	movlw	low _dpowers
  1626  001066  24F3               	addwf	prodl,w,c
  1627  001068  6EF6               	movwf	tblptrl,c
  1628  00106A  0E0F               	movlw	high _dpowers
  1629  00106C  20F4               	addwfc	prodh,w,c
  1630  00106E  6EF7               	movwf	tblptrh,c
  1631  001070                     	if	0	;There are less than 3 active tblptr bytes
  1632  001070                     	endif
  1633  001070  0009               	tblrd		*+
  1634  001072  50F5               	movf	tablat,w,c
  1635  001074  5C1E               	subwf	sprintf@val,w,c
  1636  001076  0009               	tblrd		*+
  1637  001078  50F5               	movf	tablat,w,c
  1638  00107A  581F               	subwfb	sprintf@val+1,w,c
  1639  00107C  A0D8               	btfss	status,0,c
  1640  00107E  D004               	goto	l2229
  1641  001080  D001               	goto	l2225
  1642                           
  1643                           ;doprnt.c: 1307: break;
  1644  001082  D002               	goto	l2229
  1645  001084                     l2225:
  1646  001084  2A23               	incf	sprintf@c,f,c
  1647  001086  D7E6               	goto	l2217
  1648  001088                     l2229:
  1649                           
  1650                           ;doprnt.c: 1381: if(width > c)
  1651  001088  0E80               	movlw	128
  1652  00108A  BE23               	btfsc	sprintf@c,7,c
  1653  00108C  0E7F               	movlw	127
  1654  00108E  6E17               	movwf	??_sprintf& (0+255),c
  1655  001090  5021               	movf	sprintf@width,w,c
  1656  001092  5C23               	subwf	sprintf@c,w,c
  1657  001094  5022               	movf	sprintf@width+1,w,c
  1658  001096  0A80               	xorlw	128
  1659  001098  5817               	subwfb	??_sprintf& (0+255),w,c
  1660  00109A  B0D8               	btfsc	status,0,c
  1661  00109C  D007               	goto	l2233
  1662                           
  1663                           ;doprnt.c: 1382: width -= c;
  1664  00109E  5023               	movf	sprintf@c,w,c
  1665  0010A0  5E21               	subwf	sprintf@width,f,c
  1666  0010A2  0E00               	movlw	0
  1667  0010A4  BE23               	btfsc	sprintf@c,7,c
  1668  0010A6  0EFF               	movlw	255
  1669  0010A8  5A22               	subwfb	sprintf@width+1,f,c
  1670  0010AA  D005               	goto	l2235
  1671  0010AC                     l2233:
  1672                           
  1673                           ;doprnt.c: 1383: else
  1674                           ;doprnt.c: 1384: width = 0;
  1675  0010AC  0E00               	movlw	0
  1676  0010AE  6E22               	movwf	sprintf@width+1,c
  1677  0010B0  0E00               	movlw	0
  1678  0010B2  6E21               	movwf	sprintf@width,c
  1679  0010B4  D000               	goto	l2235
  1680  0010B6                     l2235:
  1681                           
  1682                           ;doprnt.c: 1387: if(flag & 0x04) {
  1683  0010B6  A41D               	btfss	sprintf@flag,2,c
  1684  0010B8  D015               	goto	l2245
  1685                           
  1686                           ;doprnt.c: 1415: if(width)
  1687  0010BA  5021               	movf	sprintf@width,w,c
  1688  0010BC  1022               	iorwf	sprintf@width+1,w,c
  1689  0010BE  B4D8               	btfsc	status,2,c
  1690  0010C0  D026               	goto	l276
  1691  0010C2                     l2239:
  1692                           
  1693                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1694  0010C2  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1695  0010C6  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1696  0010CA  0E30               	movlw	48
  1697  0010CC  6EDF               	movwf	indf2,c
  1698  0010CE  4A0D               	infsnz	sprintf@sp,f,c
  1699  0010D0  2A0E               	incf	sprintf@sp+1,f,c
  1700                           
  1701                           ;doprnt.c: 1418: while(--width);
  1702  0010D2  0621               	decf	sprintf@width,f,c
  1703  0010D4  A0D8               	btfss	status,0,c
  1704  0010D6  0622               	decf	sprintf@width+1,f,c
  1705  0010D8  5021               	movf	sprintf@width,w,c
  1706  0010DA  1022               	iorwf	sprintf@width+1,w,c
  1707  0010DC  B4D8               	btfsc	status,2,c
  1708  0010DE  D017               	goto	l276
  1709  0010E0  D7F0               	goto	l2239
  1710                           
  1711                           ;doprnt.c: 1420: } else
  1712  0010E2  D015               	goto	l276
  1713  0010E4                     l2245:
  1714                           
  1715                           ;doprnt.c: 1422: {
  1716                           ;doprnt.c: 1424: if(width
  1717                           ;doprnt.c: 1428: )
  1718  0010E4  5021               	movf	sprintf@width,w,c
  1719  0010E6  1022               	iorwf	sprintf@width+1,w,c
  1720  0010E8  B4D8               	btfsc	status,2,c
  1721  0010EA  D011               	goto	l276
  1722  0010EC                     l2247:
  1723                           
  1724                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1725  0010EC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1726  0010F0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1727  0010F4  0E20               	movlw	32
  1728  0010F6  6EDF               	movwf	indf2,c
  1729  0010F8  4A0D               	infsnz	sprintf@sp,f,c
  1730  0010FA  2A0E               	incf	sprintf@sp+1,f,c
  1731                           
  1732                           ;doprnt.c: 1431: while(--width);
  1733  0010FC  0621               	decf	sprintf@width,f,c
  1734  0010FE  A0D8               	btfss	status,0,c
  1735  001100  0622               	decf	sprintf@width+1,f,c
  1736  001102  5021               	movf	sprintf@width,w,c
  1737  001104  1022               	iorwf	sprintf@width+1,w,c
  1738  001106  B4D8               	btfsc	status,2,c
  1739  001108  D002               	goto	l276
  1740  00110A  D7F0               	goto	l2247
  1741  00110C  D000               	goto	l276
  1742  00110E                     l276:
  1743                           
  1744                           ;doprnt.c: 1469: }
  1745                           ;doprnt.c: 1472: prec = c;
  1746  00110E  C023  F020         	movff	sprintf@c,sprintf@prec
  1747                           
  1748                           ;doprnt.c: 1474: while(prec--) {
  1749  001112  D02A               	goto	l2259
  1750  001114                     l2253:
  1751                           
  1752                           ;doprnt.c: 1478: {
  1753                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1754  001114  5020               	movf	sprintf@prec,w,c
  1755  001116  0D02               	mullw	2
  1756  001118  0E01               	movlw	low _dpowers
  1757  00111A  24F3               	addwf	prodl,w,c
  1758  00111C  6EF6               	movwf	tblptrl,c
  1759  00111E  0E0F               	movlw	high _dpowers
  1760  001120  20F4               	addwfc	prodh,w,c
  1761  001122  6EF7               	movwf	tblptrh,c
  1762  001124                     	if	0	;There are less than 3 active tblptr bytes
  1763  001124                     	endif
  1764  001124  0009               	tblrd		*+
  1765  001126  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1766  00112A  000A               	tblrd		*-
  1767  00112C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1768  001130  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  1769  001134  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1770  001138  ECDA  F00D         	call	___lwdiv	;wreg free
  1771  00113C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  1772  001140  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  1773  001144  0E00               	movlw	0
  1774  001146  6E0B               	movwf	___lwmod@divisor+1,c
  1775  001148  0E0A               	movlw	10
  1776  00114A  6E0A               	movwf	___lwmod@divisor,c
  1777  00114C  EC32  F00E         	call	___lwmod	;wreg free
  1778  001150  5008               	movf	?___lwmod,w,c
  1779  001152  0F30               	addlw	48
  1780  001154  6E23               	movwf	sprintf@c,c
  1781                           
  1782                           ;doprnt.c: 1523: }
  1783                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1784  001156  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1785  00115A  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1786  00115E  C023  FFDF         	movff	sprintf@c,indf2
  1787  001162  4A0D               	infsnz	sprintf@sp,f,c
  1788  001164  2A0E               	incf	sprintf@sp+1,f,c
  1789  001166  D000               	goto	l2259
  1790  001168                     l2259:
  1791  001168  0620               	decf	sprintf@prec,f,c
  1792  00116A  2820               	incf	sprintf@prec,w,c
  1793  00116C  B4D8               	btfsc	status,2,c
  1794  00116E  D002               	goto	l2261
  1795  001170  D7D1               	goto	l2253
  1796  001172  D000               	goto	l2261
  1797  001174                     l2261:
  1798  001174  C00F  FFF6         	movff	sprintf@f,tblptrl
  1799  001178  C010  FFF7         	movff	sprintf@f+1,tblptrh
  1800  00117C  4A0F               	infsnz	sprintf@f,f,c
  1801  00117E  2A10               	incf	sprintf@f+1,f,c
  1802  001180                     	if	0	;tblptru may be non-zero
  1803  001180                     	endif
  1804  001180                     	if	0	;tblptru may be non-zero
  1805  001180                     	endif
  1806  001180  0008               	tblrd		*
  1807  001182  CFF5 F023          	movff	tablat,sprintf@c
  1808  001186  5023               	movf	sprintf@c,w,c
  1809  001188  B4D8               	btfsc	status,2,c
  1810  00118A  D002               	goto	l2263
  1811  00118C  D6DC               	goto	l2179
  1812  00118E  D000               	goto	l2263
  1813  001190                     l2263:
  1814                           
  1815                           ;doprnt.c: 1538: *sp = 0;
  1816  001190  C00D  FFD9         	movff	sprintf@sp,fsr2l
  1817  001194  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  1818  001198  0E00               	movlw	0
  1819  00119A  6EDF               	movwf	indf2,c
  1820  00119C  0012               	return	
  1821                           
  1822                           ;doprnt.c: 1540: return 0;
  1823                           ;	Return value of _sprintf is never used
  1824  00119E  0012               	return		;funcret
  1825  0011A0                     __end_of_sprintf:
  1826                           	opt stack 0
  1827                           tblptru	equ	0xFF8
  1828                           tblptrh	equ	0xFF7
  1829                           tblptrl	equ	0xFF6
  1830                           tablat	equ	0xFF5
  1831                           prodh	equ	0xFF4
  1832                           prodl	equ	0xFF3
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           postdec1	equ	0xFE5
  1836                           fsr1l	equ	0xFE1
  1837                           indf2	equ	0xFDF
  1838                           postinc2	equ	0xFDE
  1839                           postdec2	equ	0xFDD
  1840                           fsr2h	equ	0xFDA
  1841                           fsr2l	equ	0xFD9
  1842                           status	equ	0xFD8
  1843                           
  1844 ;; *************** function _isdigit *****************
  1845 ;; Defined at:
  1846 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  c               1    wreg     unsigned char 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  c               1    2[COMRAM] unsigned char 
  1851 ;; Return value:  Size  Location     Type
  1852 ;;		None               void
  1853 ;; Registers used:
  1854 ;;		wreg, status,2, status,0
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1861 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1863 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1864 ;;Total ram usage:        3 bytes
  1865 ;; Hardware stack levels used:    1
  1866 ;; This function calls:
  1867 ;;		Nothing
  1868 ;; This function is called by:
  1869 ;;		_sprintf
  1870 ;; This function uses a non-reentrant model
  1871 ;;
  1872                           
  1873                           	psect	text4
  1874  001E06                     __ptext4:
  1875                           	opt stack 0
  1876  001E06                     _isdigit:
  1877                           	opt stack 28
  1878                           
  1879                           ;incstack = 0
  1880                           ;isdigit@c stored from wreg
  1881  001E06  6E03               	movwf	isdigit@c,c
  1882  001E08  0E00               	movlw	0
  1883  001E0A  6E02               	movwf	_isdigit$1822,c
  1884  001E0C  0E3A               	movlw	58
  1885  001E0E  6003               	cpfslt	isdigit@c,c
  1886  001E10  D006               	goto	l1967
  1887  001E12  0E2F               	movlw	47
  1888  001E14  6403               	cpfsgt	isdigit@c,c
  1889  001E16  D003               	goto	l1967
  1890  001E18  0E01               	movlw	1
  1891  001E1A  6E02               	movwf	_isdigit$1822,c
  1892  001E1C  D000               	goto	l1967
  1893  001E1E                     l1967:
  1894  001E1E  C002  F001         	movff	_isdigit$1822,??_isdigit
  1895  001E22  3001               	rrcf	??_isdigit,w,c
  1896  001E24  0012               	return	
  1897  001E26  0012               	return		;funcret
  1898  001E28                     __end_of_isdigit:
  1899                           	opt stack 0
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           prodh	equ	0xFF4
  1905                           prodl	equ	0xFF3
  1906                           postinc0	equ	0xFEE
  1907                           wreg	equ	0xFE8
  1908                           postdec1	equ	0xFE5
  1909                           fsr1l	equ	0xFE1
  1910                           indf2	equ	0xFDF
  1911                           postinc2	equ	0xFDE
  1912                           postdec2	equ	0xFDD
  1913                           fsr2h	equ	0xFDA
  1914                           fsr2l	equ	0xFD9
  1915                           status	equ	0xFD8
  1916                           
  1917 ;; *************** function ___wmul *****************
  1918 ;; Defined at:
  1919 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  multiplier      2    0[COMRAM] unsigned int 
  1922 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  product         2    4[COMRAM] unsigned int 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  2    0[COMRAM] unsigned int 
  1927 ;; Registers used:
  1928 ;;		wreg, status,2, status,0, prodl, prodh
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1934 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1935 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1937 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1938 ;;Total ram usage:        6 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; This function calls:
  1941 ;;		Nothing
  1942 ;; This function is called by:
  1943 ;;		_sprintf
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text5
  1948  001DBA                     __ptext5:
  1949                           	opt stack 0
  1950  001DBA                     ___wmul:
  1951                           	opt stack 28
  1952                           
  1953                           ;incstack = 0
  1954  001DBA  5001               	movf	___wmul@multiplier,w,c
  1955  001DBC  0203               	mulwf	___wmul@multiplicand,c
  1956  001DBE  CFF3 F005          	movff	prodl,___wmul@product
  1957  001DC2  CFF4 F006          	movff	prodh,___wmul@product+1
  1958  001DC6  5001               	movf	___wmul@multiplier,w,c
  1959  001DC8  0204               	mulwf	___wmul@multiplicand+1,c
  1960  001DCA  50F3               	movf	prodl,w,c
  1961  001DCC  2606               	addwf	___wmul@product+1,f,c
  1962  001DCE  5002               	movf	___wmul@multiplier+1,w,c
  1963  001DD0  0203               	mulwf	___wmul@multiplicand,c
  1964  001DD2  50F3               	movf	prodl,w,c
  1965  001DD4  2606               	addwf	___wmul@product+1,f,c
  1966  001DD6  C005  F001         	movff	___wmul@product,?___wmul
  1967  001DDA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1968  001DDE  0012               	return	
  1969  001DE0  0012               	return		;funcret
  1970  001DE2                     __end_of___wmul:
  1971                           	opt stack 0
  1972                           tblptru	equ	0xFF8
  1973                           tblptrh	equ	0xFF7
  1974                           tblptrl	equ	0xFF6
  1975                           tablat	equ	0xFF5
  1976                           prodh	equ	0xFF4
  1977                           prodl	equ	0xFF3
  1978                           postinc0	equ	0xFEE
  1979                           wreg	equ	0xFE8
  1980                           postdec1	equ	0xFE5
  1981                           fsr1l	equ	0xFE1
  1982                           indf2	equ	0xFDF
  1983                           postinc2	equ	0xFDE
  1984                           postdec2	equ	0xFDD
  1985                           fsr2h	equ	0xFDA
  1986                           fsr2l	equ	0xFD9
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function ___lwmod *****************
  1990 ;; Defined at:
  1991 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  dividend        2    7[COMRAM] unsigned int 
  1994 ;;  divisor         2    9[COMRAM] unsigned int 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  counter         1   11[COMRAM] unsigned char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  2    7[COMRAM] unsigned int 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2009 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2010 ;;Total ram usage:        5 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_sprintf
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text6
  2020  001C64                     __ptext6:
  2021                           	opt stack 0
  2022  001C64                     ___lwmod:
  2023                           	opt stack 28
  2024                           
  2025                           ;incstack = 0
  2026  001C64  500A               	movf	___lwmod@divisor,w,c
  2027  001C66  100B               	iorwf	___lwmod@divisor+1,w,c
  2028  001C68  B4D8               	btfsc	status,2,c
  2029  001C6A  D01D               	goto	l930
  2030  001C6C  0E01               	movlw	1
  2031  001C6E  6E0C               	movwf	___lwmod@counter,c
  2032  001C70  D005               	goto	l2049
  2033  001C72                     l2047:
  2034  001C72  90D8               	bcf	status,0,c
  2035  001C74  360A               	rlcf	___lwmod@divisor,f,c
  2036  001C76  360B               	rlcf	___lwmod@divisor+1,f,c
  2037  001C78  2A0C               	incf	___lwmod@counter,f,c
  2038  001C7A  D000               	goto	l2049
  2039  001C7C                     l2049:
  2040  001C7C  BE0B               	btfsc	___lwmod@divisor+1,7,c
  2041  001C7E  D002               	goto	l2051
  2042  001C80  D7F8               	goto	l2047
  2043  001C82  D000               	goto	l2051
  2044  001C84                     l2051:
  2045  001C84  500A               	movf	___lwmod@divisor,w,c
  2046  001C86  5C08               	subwf	___lwmod@dividend,w,c
  2047  001C88  500B               	movf	___lwmod@divisor+1,w,c
  2048  001C8A  5809               	subwfb	___lwmod@dividend+1,w,c
  2049  001C8C  A0D8               	btfss	status,0,c
  2050  001C8E  D005               	goto	l2055
  2051  001C90  500A               	movf	___lwmod@divisor,w,c
  2052  001C92  5E08               	subwf	___lwmod@dividend,f,c
  2053  001C94  500B               	movf	___lwmod@divisor+1,w,c
  2054  001C96  5A09               	subwfb	___lwmod@dividend+1,f,c
  2055  001C98  D000               	goto	l2055
  2056  001C9A                     l2055:
  2057  001C9A  90D8               	bcf	status,0,c
  2058  001C9C  320B               	rrcf	___lwmod@divisor+1,f,c
  2059  001C9E  320A               	rrcf	___lwmod@divisor,f,c
  2060  001CA0  2E0C               	decfsz	___lwmod@counter,f,c
  2061  001CA2  D7F0               	goto	l2051
  2062  001CA4  D000               	goto	l930
  2063  001CA6                     l930:
  2064  001CA6  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2065  001CAA  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2066  001CAE  0012               	return		;funcret
  2067  001CB0                     __end_of___lwmod:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           prodh	equ	0xFF4
  2074                           prodl	equ	0xFF3
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           postdec1	equ	0xFE5
  2078                           fsr1l	equ	0xFE1
  2079                           indf2	equ	0xFDF
  2080                           postinc2	equ	0xFDE
  2081                           postdec2	equ	0xFDD
  2082                           fsr2h	equ	0xFDA
  2083                           fsr2l	equ	0xFD9
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function ___lwdiv *****************
  2087 ;; Defined at:
  2088 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  dividend        2    0[COMRAM] unsigned int 
  2091 ;;  divisor         2    2[COMRAM] unsigned int 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  quotient        2    4[COMRAM] unsigned int 
  2094 ;;  counter         1    6[COMRAM] unsigned char 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  2    0[COMRAM] unsigned int 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2104 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2105 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2107 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2108 ;;Total ram usage:        7 bytes
  2109 ;; Hardware stack levels used:    1
  2110 ;; This function calls:
  2111 ;;		Nothing
  2112 ;; This function is called by:
  2113 ;;		_sprintf
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text7
  2118  001BB4                     __ptext7:
  2119                           	opt stack 0
  2120  001BB4                     ___lwdiv:
  2121                           	opt stack 28
  2122                           
  2123                           ;incstack = 0
  2124  001BB4  0E00               	movlw	0
  2125  001BB6  6E06               	movwf	___lwdiv@quotient+1,c
  2126  001BB8  0E00               	movlw	0
  2127  001BBA  6E05               	movwf	___lwdiv@quotient,c
  2128  001BBC  5003               	movf	___lwdiv@divisor,w,c
  2129  001BBE  1004               	iorwf	___lwdiv@divisor+1,w,c
  2130  001BC0  B4D8               	btfsc	status,2,c
  2131  001BC2  D021               	goto	l920
  2132  001BC4  0E01               	movlw	1
  2133  001BC6  6E07               	movwf	___lwdiv@counter,c
  2134  001BC8  D005               	goto	l2029
  2135  001BCA                     l2027:
  2136  001BCA  90D8               	bcf	status,0,c
  2137  001BCC  3603               	rlcf	___lwdiv@divisor,f,c
  2138  001BCE  3604               	rlcf	___lwdiv@divisor+1,f,c
  2139  001BD0  2A07               	incf	___lwdiv@counter,f,c
  2140  001BD2  D000               	goto	l2029
  2141  001BD4                     l2029:
  2142  001BD4  BE04               	btfsc	___lwdiv@divisor+1,7,c
  2143  001BD6  D002               	goto	l2031
  2144  001BD8  D7F8               	goto	l2027
  2145  001BDA  D000               	goto	l2031
  2146  001BDC                     l2031:
  2147  001BDC  90D8               	bcf	status,0,c
  2148  001BDE  3605               	rlcf	___lwdiv@quotient,f,c
  2149  001BE0  3606               	rlcf	___lwdiv@quotient+1,f,c
  2150  001BE2  5003               	movf	___lwdiv@divisor,w,c
  2151  001BE4  5C01               	subwf	___lwdiv@dividend,w,c
  2152  001BE6  5004               	movf	___lwdiv@divisor+1,w,c
  2153  001BE8  5802               	subwfb	___lwdiv@dividend+1,w,c
  2154  001BEA  A0D8               	btfss	status,0,c
  2155  001BEC  D006               	goto	l2039
  2156  001BEE  5003               	movf	___lwdiv@divisor,w,c
  2157  001BF0  5E01               	subwf	___lwdiv@dividend,f,c
  2158  001BF2  5004               	movf	___lwdiv@divisor+1,w,c
  2159  001BF4  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2160  001BF6  8005               	bsf	___lwdiv@quotient,0,c
  2161  001BF8  D000               	goto	l2039
  2162  001BFA                     l2039:
  2163  001BFA  90D8               	bcf	status,0,c
  2164  001BFC  3204               	rrcf	___lwdiv@divisor+1,f,c
  2165  001BFE  3203               	rrcf	___lwdiv@divisor,f,c
  2166  001C00  2E07               	decfsz	___lwdiv@counter,f,c
  2167  001C02  D7EC               	goto	l2031
  2168  001C04  D000               	goto	l920
  2169  001C06                     l920:
  2170  001C06  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2171  001C0A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2172  001C0E  0012               	return		;funcret
  2173  001C10                     __end_of___lwdiv:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodh	equ	0xFF4
  2180                           prodl	equ	0xFF3
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           postdec1	equ	0xFE5
  2184                           fsr1l	equ	0xFE1
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           fsr2h	equ	0xFDA
  2189                           fsr2l	equ	0xFD9
  2190                           status	equ	0xFD8
  2191                           
  2192 ;; *************** function _lcd_putrs *****************
  2193 ;; Defined at:
  2194 ;;		line 221 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  2197 ;;		 -> STR_5(7), STR_4(7), buffer2(20), STR_1(7), 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;		None
  2200 ;; Return value:  Size  Location     Type
  2201 ;;		None               void
  2202 ;; Registers used:
  2203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2212 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2213 ;;Total ram usage:        2 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    4
  2216 ;; This function calls:
  2217 ;;		_lcd_putc
  2218 ;; This function is called by:
  2219 ;;		_caratula
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text8
  2224  001C10                     __ptext8:
  2225                           	opt stack 0
  2226  001C10                     _lcd_putrs:
  2227                           	opt stack 25
  2228                           
  2229                           ;unmc_lcd_216.c: 223: while(*ptr){
  2230                           
  2231                           ;incstack = 0
  2232  001C10  D015               	goto	l2175
  2233  001C12                     l2171:
  2234                           
  2235                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  2236  001C12  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2237  001C16  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2238  001C1A  6AF8               	clrf	tblptru,c
  2239  001C1C  0E0E               	movlw	(high __ramtop+-1)
  2240  001C1E  64F7               	cpfsgt	tblptrh,c
  2241  001C20  D003               	bra	u1567
  2242  001C22  0008               	tblrd		*
  2243  001C24  50F5               	movf	tablat,w,c
  2244  001C26  D005               	bra	u1560
  2245  001C28                     u1567:
  2246  001C28  CFF6 FFE9          	movff	tblptrl,fsr0l
  2247  001C2C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2248  001C30  50EF               	movf	indf0,w,c
  2249  001C32                     u1560:
  2250  001C32  EC58  F00E         	call	_lcd_putc
  2251  001C36  4A09               	infsnz	lcd_putrs@ptr,f,c
  2252  001C38  2A0A               	incf	lcd_putrs@ptr+1,f,c
  2253  001C3A  D000               	goto	l2175
  2254  001C3C                     l2175:
  2255  001C3C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  2256  001C40  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  2257  001C44  6AF8               	clrf	tblptru,c
  2258  001C46  0E0E               	movlw	(high __ramtop+-1)
  2259  001C48  64F7               	cpfsgt	tblptrh,c
  2260  001C4A  D003               	bra	u1577
  2261  001C4C  0008               	tblrd		*
  2262  001C4E  50F5               	movf	tablat,w,c
  2263  001C50  D005               	bra	u1570
  2264  001C52                     u1577:
  2265  001C52  CFF6 FFE9          	movff	tblptrl,fsr0l
  2266  001C56  CFF7 FFEA          	movff	tblptrh,fsr0h
  2267  001C5A  50EF               	movf	indf0,w,c
  2268  001C5C                     u1570:
  2269  001C5C  0900               	iorlw	0
  2270  001C5E  A4D8               	btfss	status,2,c
  2271  001C60  D7D8               	goto	l2171
  2272  001C62  0012               	return		;funcret
  2273  001C64                     __end_of_lcd_putrs:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           indf0	equ	0xFEF
  2282                           postinc0	equ	0xFEE
  2283                           fsr0h	equ	0xFEA
  2284                           fsr0l	equ	0xFE9
  2285                           wreg	equ	0xFE8
  2286                           postdec1	equ	0xFE5
  2287                           fsr1l	equ	0xFE1
  2288                           indf2	equ	0xFDF
  2289                           postinc2	equ	0xFDE
  2290                           postdec2	equ	0xFDD
  2291                           fsr2h	equ	0xFDA
  2292                           fsr2l	equ	0xFD9
  2293                           status	equ	0xFD8
  2294                           
  2295 ;; *************** function _lcd_putc *****************
  2296 ;; Defined at:
  2297 ;;		line 172 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;  c               1    wreg     unsigned char 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  c               1    7[COMRAM] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;		None               void
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0, cstack
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2315 ;;Total ram usage:        1 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    3
  2318 ;; This function calls:
  2319 ;;		_lcd_gotoxy
  2320 ;;		_lcd_send_byte
  2321 ;; This function is called by:
  2322 ;;		_lcd_putrs
  2323 ;;		_lcd_puts
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text9
  2328  001CB0                     __ptext9:
  2329                           	opt stack 0
  2330  001CB0                     _lcd_putc:
  2331                           	opt stack 25
  2332                           
  2333                           ;incstack = 0
  2334                           ;lcd_putc@c stored from wreg
  2335  001CB0  6E08               	movwf	lcd_putc@c,c
  2336                           
  2337                           ;unmc_lcd_216.c: 173: switch(c){
  2338  001CB2  D018               	goto	l1957
  2339  001CB4                     l1947:
  2340                           
  2341                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  2342  001CB4  0E01               	movlw	1
  2343  001CB6  6E03               	movwf	lcd_send_byte@n,c
  2344  001CB8  0E00               	movlw	0
  2345  001CBA  ECC4  F00E         	call	_lcd_send_byte
  2346                           
  2347                           ;unmc_lcd_216.c: 176: break;
  2348  001CBE  0012               	return	
  2349  001CC0                     l1949:
  2350                           
  2351                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  2352  001CC0  0E02               	movlw	2
  2353  001CC2  6E05               	movwf	lcd_gotoxy@y,c
  2354  001CC4  0E01               	movlw	1
  2355  001CC6  ECF1  F00E         	call	_lcd_gotoxy
  2356                           
  2357                           ;unmc_lcd_216.c: 179: break;
  2358  001CCA  0012               	return	
  2359  001CCC                     l1951:
  2360                           
  2361                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  2362  001CCC  0E10               	movlw	16
  2363  001CCE  6E03               	movwf	lcd_send_byte@n,c
  2364  001CD0  0E00               	movlw	0
  2365  001CD2  ECC4  F00E         	call	_lcd_send_byte
  2366                           
  2367                           ;unmc_lcd_216.c: 182: break;
  2368  001CD6  0012               	return	
  2369  001CD8                     l1953:
  2370                           
  2371                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  2372  001CD8  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  2373  001CDC  0E01               	movlw	1
  2374  001CDE  ECC4  F00E         	call	_lcd_send_byte
  2375                           
  2376                           ;unmc_lcd_216.c: 186: }
  2377                           
  2378                           ;unmc_lcd_216.c: 185: break;
  2379  001CE2  0012               	return	
  2380  001CE4                     l1957:
  2381  001CE4  5008               	movf	lcd_putc@c,w,c
  2382                           
  2383                           ; Switch size 1, requested type "space"
  2384                           ; Number of cases is 3, Range of values is 8 to 12
  2385                           ; switch strategies available:
  2386                           ; Name         Instructions Cycles
  2387                           ; simple_byte           10     6 (average)
  2388                           ;	Chosen strategy is simple_byte
  2389  001CE6  0A08               	xorlw	8	; case 8
  2390  001CE8  B4D8               	btfsc	status,2,c
  2391  001CEA  D7F0               	goto	l1951
  2392  001CEC  0A02               	xorlw	2	; case 10
  2393  001CEE  B4D8               	btfsc	status,2,c
  2394  001CF0  D7E7               	goto	l1949
  2395  001CF2  0A06               	xorlw	6	; case 12
  2396  001CF4  B4D8               	btfsc	status,2,c
  2397  001CF6  D7DE               	goto	l1947
  2398  001CF8  D7EF               	goto	l1953
  2399  001CFA  0012               	return		;funcret
  2400  001CFC                     __end_of_lcd_putc:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           prodh	equ	0xFF4
  2407                           prodl	equ	0xFF3
  2408                           indf0	equ	0xFEF
  2409                           postinc0	equ	0xFEE
  2410                           fsr0h	equ	0xFEA
  2411                           fsr0l	equ	0xFE9
  2412                           wreg	equ	0xFE8
  2413                           postdec1	equ	0xFE5
  2414                           fsr1l	equ	0xFE1
  2415                           indf2	equ	0xFDF
  2416                           postinc2	equ	0xFDE
  2417                           postdec2	equ	0xFDD
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _lcd_gotoxy *****************
  2423 ;; Defined at:
  2424 ;;		line 158 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  x               1    wreg     unsigned char 
  2427 ;;  y               1    4[COMRAM] unsigned char 
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  x               1    5[COMRAM] unsigned char 
  2430 ;;  address         1    6[COMRAM] unsigned char 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;		None               void
  2433 ;; Registers used:
  2434 ;;		wreg, status,2, status,0, cstack
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2440 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2441 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2443 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2444 ;;Total ram usage:        3 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    2
  2447 ;; This function calls:
  2448 ;;		_lcd_send_byte
  2449 ;; This function is called by:
  2450 ;;		_caratula
  2451 ;;		_main
  2452 ;;		_lcd_putc
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text10
  2457  001DE2                     __ptext10:
  2458                           	opt stack 0
  2459  001DE2                     _lcd_gotoxy:
  2460                           	opt stack 28
  2461                           
  2462                           ;incstack = 0
  2463                           ;lcd_gotoxy@x stored from wreg
  2464  001DE2  6E06               	movwf	lcd_gotoxy@x,c
  2465                           
  2466                           ;unmc_lcd_216.c: 159: int8 address;
  2467                           ;unmc_lcd_216.c: 161: if(y != 1)
  2468  001DE4  0405               	decf	lcd_gotoxy@y,w,c
  2469  001DE6  B4D8               	btfsc	status,2,c
  2470  001DE8  D002               	goto	l1803
  2471                           
  2472                           ;unmc_lcd_216.c: 162: address = 0x40;
  2473  001DEA  0E40               	movlw	64
  2474  001DEC  D001               	goto	L2
  2475  001DEE                     l1803:
  2476                           
  2477                           ;unmc_lcd_216.c: 163: else
  2478                           ;unmc_lcd_216.c: 164: address=0;
  2479  001DEE  0E00               	movlw	0
  2480  001DF0                     L2:
  2481  001DF0  6E07               	movwf	lcd_gotoxy@address,c
  2482  001DF2  D000               	goto	l1805
  2483  001DF4                     l1805:
  2484                           
  2485                           ;unmc_lcd_216.c: 166: address += x-1;
  2486  001DF4  0406               	decf	lcd_gotoxy@x,w,c
  2487  001DF6  2607               	addwf	lcd_gotoxy@address,f,c
  2488                           
  2489                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  2490  001DF8  5007               	movf	lcd_gotoxy@address,w,c
  2491  001DFA  0980               	iorlw	128
  2492  001DFC  6E03               	movwf	lcd_send_byte@n,c
  2493  001DFE  0E00               	movlw	0
  2494  001E00  ECC4  F00E         	call	_lcd_send_byte
  2495  001E04  0012               	return		;funcret
  2496  001E06                     __end_of_lcd_gotoxy:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           indf0	equ	0xFEF
  2505                           postinc0	equ	0xFEE
  2506                           fsr0h	equ	0xFEA
  2507                           fsr0l	equ	0xFE9
  2508                           wreg	equ	0xFE8
  2509                           postdec1	equ	0xFE5
  2510                           fsr1l	equ	0xFE1
  2511                           indf2	equ	0xFDF
  2512                           postinc2	equ	0xFDE
  2513                           postdec2	equ	0xFDD
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518 ;; *************** function _Setup *****************
  2519 ;; Defined at:
  2520 ;;		line 66 in file "main.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;		None
  2525 ;; Return value:  Size  Location     Type
  2526 ;;		None               void
  2527 ;; Registers used:
  2528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2538 ;;Total ram usage:        0 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    3
  2541 ;; This function calls:
  2542 ;;		_Write_RTC
  2543 ;;		_lcd_comand
  2544 ;;		_lcd_init
  2545 ;; This function is called by:
  2546 ;;		_main
  2547 ;; This function uses a non-reentrant model
  2548 ;;
  2549                           
  2550                           	psect	text11
  2551  001CFC                     __ptext11:
  2552                           	opt stack 0
  2553  001CFC                     _Setup:
  2554                           	opt stack 27
  2555                           
  2556                           ;main.c: 68: OSCTUNEbits.INTSRC=1;
  2557                           
  2558                           ;incstack = 0
  2559  001CFC  8E9B               	bsf	3995,7,c	;volatile
  2560                           
  2561                           ;main.c: 69: OSCTUNEbits.PLLEN=0;
  2562  001CFE  9C9B               	bcf	3995,6,c	;volatile
  2563                           
  2564                           ;main.c: 70: OSCCONbits.IRCF0=1;
  2565  001D00  88D3               	bsf	4051,4,c	;volatile
  2566                           
  2567                           ;main.c: 71: OSCCONbits.IRCF1=1;
  2568  001D02  8AD3               	bsf	4051,5,c	;volatile
  2569                           
  2570                           ;main.c: 72: OSCCONbits.IRCF2=1;
  2571  001D04  8CD3               	bsf	4051,6,c	;volatile
  2572                           
  2573                           ;main.c: 73: OSCCONbits.SCS0=0;
  2574  001D06  90D3               	bcf	4051,0,c	;volatile
  2575                           
  2576                           ;main.c: 74: OSCCONbits.SCS1=0;
  2577  001D08  92D3               	bcf	4051,1,c	;volatile
  2578                           
  2579                           ;main.c: 75: TRISA = 0b11111111;
  2580  001D0A  6892               	setf	3986,c	;volatile
  2581                           
  2582                           ;main.c: 76: TRISB = 0;
  2583  001D0C  0E00               	movlw	0
  2584  001D0E  6E93               	movwf	3987,c	;volatile
  2585                           
  2586                           ;main.c: 77: TRISC = 0b00000111;
  2587  001D10  0E07               	movlw	7
  2588  001D12  6E94               	movwf	3988,c	;volatile
  2589                           
  2590                           ;main.c: 81: ANCON0=0b11111111;
  2591  001D14  010F               	movlb	15	; () banked
  2592  001D16  6948               	setf	72,b	;volatile
  2593                           
  2594                           ;main.c: 82: ANCON0=0b10010111;
  2595  001D18  0E97               	movlw	151
  2596  001D1A  010F               	movlb	15	; () banked
  2597  001D1C  6F48               	movwf	72,b	;volatile
  2598                           
  2599                           ;main.c: 83: ADCON0=0b00101101;
  2600  001D1E  0E2D               	movlw	45
  2601  001D20  6EC2               	movwf	4034,c	;volatile
  2602                           
  2603                           ;main.c: 84: ADCON1=0b00010000;
  2604  001D22  0E10               	movlw	16
  2605  001D24  6EC1               	movwf	4033,c	;volatile
  2606                           
  2607                           ; BSR set to: 15
  2608                           ;main.c: 85: RTCCFGbits.RTCEN=1;
  2609  001D26  010F               	movlb	15	; () banked
  2610  001D28  8F3F               	bsf	63,7,b	;volatile
  2611                           
  2612                           ; BSR set to: 15
  2613                           ;main.c: 86: RTCCFGbits.RTCWREN=1;
  2614  001D2A  010F               	movlb	15	; () banked
  2615  001D2C  8B3F               	bsf	63,5,b	;volatile
  2616                           
  2617                           ; BSR set to: 15
  2618                           ;main.c: 87: T1CONbits.T1OSCEN=1;
  2619  001D2E  86CD               	bsf	4045,3,c	;volatile
  2620                           
  2621                           ; BSR set to: 15
  2622                           ;main.c: 88: Write_RTC();
  2623  001D30  ECD8  F009         	call	_Write_RTC	;wreg free
  2624                           
  2625                           ;main.c: 89: lcd_init();
  2626  001D34  EC28  F00D         	call	_lcd_init	;wreg free
  2627                           
  2628                           ;main.c: 91: lcd_comand(0b00001110);
  2629  001D38  0E0E               	movlw	14
  2630  001D3A  EC39  F00F         	call	_lcd_comand
  2631                           
  2632                           ;main.c: 94: LATBbits.LATB1 = 0;;
  2633  001D3E  928A               	bcf	3978,1,c	;volatile
  2634                           
  2635                           ;main.c: 95: LATBbits.LATB0 = 0;;
  2636  001D40  908A               	bcf	3978,0,c	;volatile
  2637  001D42  0012               	return		;funcret
  2638  001D44                     __end_of_Setup:
  2639                           	opt stack 0
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           prodh	equ	0xFF4
  2645                           prodl	equ	0xFF3
  2646                           indf0	equ	0xFEF
  2647                           postinc0	equ	0xFEE
  2648                           fsr0h	equ	0xFEA
  2649                           fsr0l	equ	0xFE9
  2650                           wreg	equ	0xFE8
  2651                           postdec1	equ	0xFE5
  2652                           fsr1l	equ	0xFE1
  2653                           indf2	equ	0xFDF
  2654                           postinc2	equ	0xFDE
  2655                           postdec2	equ	0xFDD
  2656                           fsr2h	equ	0xFDA
  2657                           fsr2l	equ	0xFD9
  2658                           status	equ	0xFD8
  2659                           
  2660 ;; *************** function _lcd_init *****************
  2661 ;; Defined at:
  2662 ;;		line 119 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;		None
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  i               1    4[COMRAM] unsigned char 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;		None               void
  2669 ;; Registers used:
  2670 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2679 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2680 ;;Total ram usage:        1 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    2
  2683 ;; This function calls:
  2684 ;;		_Delay1KTCYx
  2685 ;;		_lcd_send_byte
  2686 ;;		_lcd_send_nibble
  2687 ;; This function is called by:
  2688 ;;		_Setup
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text12
  2693  001A50                     __ptext12:
  2694                           	opt stack 0
  2695  001A50                     _lcd_init:
  2696                           	opt stack 27
  2697                           
  2698                           ;unmc_lcd_216.c: 120: int8 i;
  2699                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  2700                           
  2701                           ;incstack = 0
  2702  001A50  9693               	bcf	3987,3,c	;volatile
  2703                           
  2704                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  2705  001A52  9493               	bcf	3987,2,c	;volatile
  2706                           
  2707                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  2708  001A54  968A               	bcf	3978,3,c	;volatile
  2709                           
  2710                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  2711  001A56  948A               	bcf	3978,2,c	;volatile
  2712                           
  2713                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  2714  001A58  9893               	bcf	3987,4,c	;volatile
  2715                           
  2716                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  2717  001A5A  9A93               	bcf	3987,5,c	;volatile
  2718                           
  2719                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  2720  001A5C  9C93               	bcf	3987,6,c	;volatile
  2721                           
  2722                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  2723  001A5E  9E93               	bcf	3987,7,c	;volatile
  2724                           
  2725                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  2726  001A60  0E0A               	movlw	10
  2727  001A62  EC1E  F00F         	call	_Delay1KTCYx
  2728                           
  2729                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  2730  001A66  0E0A               	movlw	10
  2731  001A68  EC1E  F00F         	call	_Delay1KTCYx
  2732                           
  2733                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  2734  001A6C  0E0A               	movlw	10
  2735  001A6E  EC1E  F00F         	call	_Delay1KTCYx
  2736                           
  2737                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  2738  001A72  0E00               	movlw	0
  2739  001A74  6E05               	movwf	lcd_init@i,c
  2740  001A76                     l2273:
  2741  001A76  0E02               	movlw	2
  2742  001A78  6405               	cpfsgt	lcd_init@i,c
  2743  001A7A  D001               	goto	l2277
  2744  001A7C  D008               	goto	l2283
  2745  001A7E                     l2277:
  2746                           
  2747                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  2748  001A7E  0E03               	movlw	3
  2749  001A80  EC68  F00D         	call	_lcd_send_nibble
  2750                           
  2751                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  2752  001A84  0E0A               	movlw	10
  2753  001A86  EC1E  F00F         	call	_Delay1KTCYx
  2754  001A8A  2A05               	incf	lcd_init@i,f,c
  2755  001A8C  D7F4               	goto	l2273
  2756  001A8E                     l2283:
  2757                           
  2758                           ;unmc_lcd_216.c: 146: }
  2759                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  2760  001A8E  0E02               	movlw	2
  2761  001A90  EC68  F00D         	call	_lcd_send_nibble
  2762                           
  2763                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  2764  001A94  0E00               	movlw	0
  2765  001A96  6E05               	movwf	lcd_init@i,c
  2766  001A98  0E03               	movlw	3
  2767  001A9A  6405               	cpfsgt	lcd_init@i,c
  2768  001A9C  D002               	goto	l2291
  2769  001A9E  0012               	return	
  2770  001AA0  0012               	return	
  2771  001AA2                     l2291:
  2772                           
  2773                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  2774  001AA2  5005               	movf	lcd_init@i,w,c
  2775  001AA4  0D01               	mullw	1
  2776  001AA6  0E0B               	movlw	low _LCD_INIT_STRING
  2777  001AA8  24F3               	addwf	prodl,w,c
  2778  001AAA  6EF6               	movwf	tblptrl,c
  2779  001AAC  0E0F               	movlw	high _LCD_INIT_STRING
  2780  001AAE  20F4               	addwfc	prodh,w,c
  2781  001AB0  6EF7               	movwf	tblptrh,c
  2782  001AB2                     	if	0	;There are less than 3 active tblptr bytes
  2783  001AB2                     	endif
  2784  001AB2  0008               	tblrd		*
  2785  001AB4  CFF5 F003          	movff	tablat,lcd_send_byte@n
  2786  001AB8  0E00               	movlw	0
  2787  001ABA  ECC4  F00E         	call	_lcd_send_byte
  2788                           
  2789                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  2790  001ABE  0E0A               	movlw	10
  2791  001AC0  EC1E  F00F         	call	_Delay1KTCYx
  2792  001AC4  2A05               	incf	lcd_init@i,f,c
  2793  001AC6  0E03               	movlw	3
  2794  001AC8  6405               	cpfsgt	lcd_init@i,c
  2795  001ACA  D7EB               	goto	l2291
  2796  001ACC  0012               	return	
  2797  001ACE  0012               	return		;funcret
  2798  001AD0                     __end_of_lcd_init:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodh	equ	0xFF4
  2805                           prodl	equ	0xFF3
  2806                           indf0	equ	0xFEF
  2807                           postinc0	equ	0xFEE
  2808                           fsr0h	equ	0xFEA
  2809                           fsr0l	equ	0xFE9
  2810                           wreg	equ	0xFE8
  2811                           postdec1	equ	0xFE5
  2812                           fsr1l	equ	0xFE1
  2813                           indf2	equ	0xFDF
  2814                           postinc2	equ	0xFDE
  2815                           postdec2	equ	0xFDD
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _Delay1KTCYx *****************
  2821 ;; Defined at:
  2822 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;  unit            1    wreg     unsigned char 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  unit            1    0[COMRAM] unsigned char 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;		None               void
  2829 ;; Registers used:
  2830 ;;		wreg
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2840 ;;Total ram usage:        1 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; This function calls:
  2843 ;;		Nothing
  2844 ;; This function is called by:
  2845 ;;		_lcd_init
  2846 ;;		_DelayPORXLCD
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text13
  2851  001E3C                     __ptext13:
  2852                           	opt stack 0
  2853  001E3C                     _Delay1KTCYx:
  2854                           	opt stack 28
  2855                           
  2856                           ;incstack = 0
  2857                           ;Delay1KTCYx@unit stored from wreg
  2858  001E3C  6E01               	movwf	Delay1KTCYx@unit,c
  2859  001E3E  0EFA               	movlw	250
  2860  001E40                     u2147:
  2861  001E40  F000               	nop	
  2862  001E42  2EE8               	decfsz	wreg,f,c
  2863  001E44  D7FD               	goto	u2147
  2864  001E46  2E01               	decfsz	Delay1KTCYx@unit,f,c
  2865  001E48  D7FA               	goto	l1049
  2866  001E4A  0012               	return	
  2867  001E4C  0012               	return		;funcret
  2868  001E4E                     __end_of_Delay1KTCYx:
  2869                           	opt stack 0
  2870                           tblptru	equ	0xFF8
  2871                           tblptrh	equ	0xFF7
  2872                           tblptrl	equ	0xFF6
  2873                           tablat	equ	0xFF5
  2874                           prodh	equ	0xFF4
  2875                           prodl	equ	0xFF3
  2876                           indf0	equ	0xFEF
  2877                           postinc0	equ	0xFEE
  2878                           fsr0h	equ	0xFEA
  2879                           fsr0l	equ	0xFE9
  2880                           wreg	equ	0xFE8
  2881                           postdec1	equ	0xFE5
  2882                           fsr1l	equ	0xFE1
  2883                           indf2	equ	0xFDF
  2884                           postinc2	equ	0xFDE
  2885                           postdec2	equ	0xFDD
  2886                           fsr2h	equ	0xFDA
  2887                           fsr2l	equ	0xFD9
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function _lcd_comand *****************
  2891 ;; Defined at:
  2892 ;;		line 189 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  d               1    wreg     unsigned char 
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  d               1    4[COMRAM] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;		None               void
  2899 ;; Registers used:
  2900 ;;		wreg, status,2, status,0, cstack
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2910 ;;Total ram usage:        1 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    2
  2913 ;; This function calls:
  2914 ;;		_lcd_send_byte
  2915 ;; This function is called by:
  2916 ;;		_caratula
  2917 ;;		_Setup
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           	psect	text14
  2922  001E72                     __ptext14:
  2923                           	opt stack 0
  2924  001E72                     _lcd_comand:
  2925                           	opt stack 27
  2926                           
  2927                           ;incstack = 0
  2928                           ;lcd_comand@d stored from wreg
  2929  001E72  6E05               	movwf	lcd_comand@d,c
  2930                           
  2931                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
  2932  001E74  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
  2933  001E78  0E00               	movlw	0
  2934  001E7A  ECC4  F00E         	call	_lcd_send_byte
  2935  001E7E  0012               	return		;funcret
  2936  001E80                     __end_of_lcd_comand:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           indf0	equ	0xFEF
  2945                           postinc0	equ	0xFEE
  2946                           fsr0h	equ	0xFEA
  2947                           fsr0l	equ	0xFE9
  2948                           wreg	equ	0xFE8
  2949                           postdec1	equ	0xFE5
  2950                           fsr1l	equ	0xFE1
  2951                           indf2	equ	0xFDF
  2952                           postinc2	equ	0xFDE
  2953                           postdec2	equ	0xFDD
  2954                           fsr2h	equ	0xFDA
  2955                           fsr2l	equ	0xFD9
  2956                           status	equ	0xFD8
  2957                           
  2958 ;; *************** function _lcd_send_byte *****************
  2959 ;; Defined at:
  2960 ;;		line 86 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  2961 ;; Parameters:    Size  Location     Type
  2962 ;;  address         1    wreg     unsigned char 
  2963 ;;  n               1    2[COMRAM] unsigned char 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  address         1    3[COMRAM] unsigned char 
  2966 ;; Return value:  Size  Location     Type
  2967 ;;		None               void
  2968 ;; Registers used:
  2969 ;;		wreg, status,2, status,0, cstack
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2975 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2978 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2979 ;;Total ram usage:        2 bytes
  2980 ;; Hardware stack levels used:    1
  2981 ;; Hardware stack levels required when called:    1
  2982 ;; This function calls:
  2983 ;;		_Delay100TCYx
  2984 ;;		_lcd_send_nibble
  2985 ;; This function is called by:
  2986 ;;		_lcd_init
  2987 ;;		_lcd_gotoxy
  2988 ;;		_lcd_putc
  2989 ;;		_lcd_comand
  2990 ;;		_lcd_setcursor_vb
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text15
  2995  001D88                     __ptext15:
  2996                           	opt stack 0
  2997  001D88                     _lcd_send_byte:
  2998                           	opt stack 28
  2999                           
  3000                           ;incstack = 0
  3001                           ;lcd_send_byte@address stored from wreg
  3002  001D88  6E04               	movwf	lcd_send_byte@address,c
  3003                           
  3004                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  3005  001D8A  968A               	bcf	3978,3,c	;volatile
  3006                           
  3007                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  3008  001D8C  0E02               	movlw	2
  3009  001D8E  EC27  F00F         	call	_Delay100TCYx
  3010                           
  3011                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  3012  001D92  9893               	bcf	3987,4,c	;volatile
  3013                           
  3014                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  3015  001D94  9A93               	bcf	3987,5,c	;volatile
  3016                           
  3017                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  3018  001D96  9C93               	bcf	3987,6,c	;volatile
  3019                           
  3020                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  3021  001D98  9E93               	bcf	3987,7,c	;volatile
  3022                           
  3023                           ;unmc_lcd_216.c: 101: if(address)
  3024  001D9A  5004               	movf	lcd_send_byte@address,w,c
  3025  001D9C  B4D8               	btfsc	status,2,c
  3026  001D9E  D002               	goto	l197
  3027                           
  3028                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  3029  001DA0  868A               	bsf	3978,3,c	;volatile
  3030  001DA2  D001               	goto	l198
  3031  001DA4                     l197:
  3032                           
  3033                           ;unmc_lcd_216.c: 103: else
  3034                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  3035  001DA4  968A               	bcf	3978,3,c	;volatile
  3036  001DA6                     l198:
  3037                           
  3038                           ;unmc_lcd_216.c: 106: __nop();
  3039  001DA6  F000               	nop	
  3040                           
  3041                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  3042  001DA8  3803               	swapf	lcd_send_byte@n,w,c
  3043  001DAA  0B0F               	andlw	15
  3044  001DAC  EC68  F00D         	call	_lcd_send_nibble
  3045                           
  3046                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  3047  001DB0  5003               	movf	lcd_send_byte@n,w,c
  3048  001DB2  0B0F               	andlw	15
  3049  001DB4  EC68  F00D         	call	_lcd_send_nibble
  3050  001DB8  0012               	return		;funcret
  3051  001DBA                     __end_of_lcd_send_byte:
  3052                           	opt stack 0
  3053                           tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           prodh	equ	0xFF4
  3058                           prodl	equ	0xFF3
  3059                           indf0	equ	0xFEF
  3060                           postinc0	equ	0xFEE
  3061                           fsr0h	equ	0xFEA
  3062                           fsr0l	equ	0xFE9
  3063                           wreg	equ	0xFE8
  3064                           postdec1	equ	0xFE5
  3065                           fsr1l	equ	0xFE1
  3066                           indf2	equ	0xFDF
  3067                           postinc2	equ	0xFDE
  3068                           postdec2	equ	0xFDD
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function _lcd_send_nibble *****************
  3074 ;; Defined at:
  3075 ;;		line 25 in file "C:/Archivos de programa/Unimic/unmc_01/sources/unmc_lcd_216.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  nibble          1    wreg     unsigned char 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  nibble          1    1[COMRAM] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;		None               void
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3093 ;;Total ram usage:        2 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_lcd_send_byte
  3099 ;;		_lcd_init
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text16
  3104  001AD0                     __ptext16:
  3105                           	opt stack 0
  3106  001AD0                     _lcd_send_nibble:
  3107                           	opt stack 28
  3108                           
  3109                           ;incstack = 0
  3110                           ;lcd_send_nibble@nibble stored from wreg
  3111  001AD0  6E02               	movwf	lcd_send_nibble@nibble,c
  3112                           
  3113                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  3114  001AD2  A002               	btfss	lcd_send_nibble@nibble,0,c
  3115  001AD4  D003               	goto	u1060
  3116  001AD6  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3117  001AD8  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3118  001ADA  D001               	goto	u1078
  3119  001ADC                     u1060:
  3120  001ADC  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3121  001ADE                     u1078:
  3122  001ADE  3A01               	swapf	??_lcd_send_nibble,f,c
  3123  001AE0  508A               	movf	3978,w,c	;volatile
  3124  001AE2  1801               	xorwf	??_lcd_send_nibble,w,c
  3125  001AE4  0BEF               	andlw	-17
  3126  001AE6  1801               	xorwf	??_lcd_send_nibble,w,c
  3127  001AE8  6E8A               	movwf	3978,c	;volatile
  3128                           
  3129                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  3130  001AEA  A202               	btfss	lcd_send_nibble@nibble,1,c
  3131  001AEC  D003               	goto	u1080
  3132  001AEE  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3133  001AF0  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3134  001AF2  D001               	goto	u1098
  3135  001AF4                     u1080:
  3136  001AF4  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3137  001AF6                     u1098:
  3138  001AF6  3A01               	swapf	??_lcd_send_nibble,f,c
  3139  001AF8  4601               	rlncf	??_lcd_send_nibble,f,c
  3140  001AFA  508A               	movf	3978,w,c	;volatile
  3141  001AFC  1801               	xorwf	??_lcd_send_nibble,w,c
  3142  001AFE  0BDF               	andlw	-33
  3143  001B00  1801               	xorwf	??_lcd_send_nibble,w,c
  3144  001B02  6E8A               	movwf	3978,c	;volatile
  3145                           
  3146                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  3147  001B04  A402               	btfss	lcd_send_nibble@nibble,2,c
  3148  001B06  D003               	goto	u1100
  3149  001B08  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3150  001B0A  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3151  001B0C  D001               	goto	u1118
  3152  001B0E                     u1100:
  3153  001B0E  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3154  001B10                     u1118:
  3155  001B10  3A01               	swapf	??_lcd_send_nibble,f,c
  3156  001B12  4601               	rlncf	??_lcd_send_nibble,f,c
  3157  001B14  4601               	rlncf	??_lcd_send_nibble,f,c
  3158  001B16  508A               	movf	3978,w,c	;volatile
  3159  001B18  1801               	xorwf	??_lcd_send_nibble,w,c
  3160  001B1A  0BBF               	andlw	-65
  3161  001B1C  1801               	xorwf	??_lcd_send_nibble,w,c
  3162  001B1E  6E8A               	movwf	3978,c	;volatile
  3163                           
  3164                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  3165  001B20  A602               	btfss	lcd_send_nibble@nibble,3,c
  3166  001B22  D003               	goto	u1120
  3167  001B24  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3168  001B26  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  3169  001B28  D001               	goto	u1138
  3170  001B2A                     u1120:
  3171  001B2A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  3172  001B2C                     u1138:
  3173  001B2C  3201               	rrcf	??_lcd_send_nibble,f,c
  3174  001B2E  3201               	rrcf	??_lcd_send_nibble,f,c
  3175  001B30  508A               	movf	3978,w,c	;volatile
  3176  001B32  1801               	xorwf	??_lcd_send_nibble,w,c
  3177  001B34  0B7F               	andlw	-129
  3178  001B36  1801               	xorwf	??_lcd_send_nibble,w,c
  3179  001B38  6E8A               	movwf	3978,c	;volatile
  3180                           
  3181                           ;unmc_lcd_216.c: 32: __nop();
  3182  001B3A  F000               	nop	
  3183                           
  3184                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  3185  001B3C  848A               	bsf	3978,2,c	;volatile
  3186                           
  3187                           ;unmc_lcd_216.c: 34: __nop();__nop();
  3188  001B3E  F000               	nop	
  3189  001B40  F000               	nop	
  3190                           
  3191                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  3192  001B42  948A               	bcf	3978,2,c	;volatile
  3193  001B44  0012               	return		;funcret
  3194  001B46                     __end_of_lcd_send_nibble:
  3195                           	opt stack 0
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           indf0	equ	0xFEF
  3203                           postinc0	equ	0xFEE
  3204                           fsr0h	equ	0xFEA
  3205                           fsr0l	equ	0xFE9
  3206                           wreg	equ	0xFE8
  3207                           postdec1	equ	0xFE5
  3208                           fsr1l	equ	0xFE1
  3209                           indf2	equ	0xFDF
  3210                           postinc2	equ	0xFDE
  3211                           postdec2	equ	0xFDD
  3212                           fsr2h	equ	0xFDA
  3213                           fsr2l	equ	0xFD9
  3214                           status	equ	0xFD8
  3215                           
  3216 ;; *************** function _Delay100TCYx *****************
  3217 ;; Defined at:
  3218 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  unit            1    wreg     unsigned char 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  unit            1    0[COMRAM] unsigned char 
  3223 ;; Return value:  Size  Location     Type
  3224 ;;		None               void
  3225 ;; Registers used:
  3226 ;;		wreg
  3227 ;; Tracked objects:
  3228 ;;		On entry : 0/0
  3229 ;;		On exit  : 0/0
  3230 ;;		Unchanged: 0/0
  3231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3235 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3236 ;;Total ram usage:        1 bytes
  3237 ;; Hardware stack levels used:    1
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_lcd_send_byte
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text17
  3246  001E4E                     __ptext17:
  3247                           	opt stack 0
  3248  001E4E                     _Delay100TCYx:
  3249                           	opt stack 28
  3250                           
  3251                           ;incstack = 0
  3252                           ;Delay100TCYx@unit stored from wreg
  3253  001E4E  6E01               	movwf	Delay100TCYx@unit,c
  3254  001E50  0E21               	movlw	33
  3255  001E52                     u2157:
  3256  001E52  2EE8               	decfsz	wreg,f,c
  3257  001E54  D7FE               	goto	u2157
  3258  001E56  F000               	nop	
  3259  001E58  2E01               	decfsz	Delay100TCYx@unit,f,c
  3260  001E5A  D7FA               	goto	l1777
  3261  001E5C  0012               	return	
  3262  001E5E  0012               	return		;funcret
  3263  001E60                     __end_of_Delay100TCYx:
  3264                           	opt stack 0
  3265                           tblptru	equ	0xFF8
  3266                           tblptrh	equ	0xFF7
  3267                           tblptrl	equ	0xFF6
  3268                           tablat	equ	0xFF5
  3269                           prodh	equ	0xFF4
  3270                           prodl	equ	0xFF3
  3271                           indf0	equ	0xFEF
  3272                           postinc0	equ	0xFEE
  3273                           fsr0h	equ	0xFEA
  3274                           fsr0l	equ	0xFE9
  3275                           wreg	equ	0xFE8
  3276                           postdec1	equ	0xFE5
  3277                           fsr1l	equ	0xFE1
  3278                           indf2	equ	0xFDF
  3279                           postinc2	equ	0xFDE
  3280                           postdec2	equ	0xFDD
  3281                           fsr2h	equ	0xFDA
  3282                           fsr2l	equ	0xFD9
  3283                           status	equ	0xFD8
  3284                           
  3285 ;; *************** function _Write_RTC *****************
  3286 ;; Defined at:
  3287 ;;		line 74 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;		None
  3292 ;; Return value:  Size  Location     Type
  3293 ;;		None               void
  3294 ;; Registers used:
  3295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3305 ;;Total ram usage:        0 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    2
  3308 ;; This function calls:
  3309 ;;		_RtccWrOn
  3310 ;;		_RtccWriteDate
  3311 ;;		_RtccWriteTime
  3312 ;;		___awdiv
  3313 ;; This function is called by:
  3314 ;;		_Setup
  3315 ;;		_main
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text18
  3320  0013B0                     __ptext18:
  3321                           	opt stack 0
  3322  0013B0                     _Write_RTC:
  3323                           	opt stack 28
  3324                           
  3325                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  3326                           
  3327                           ;incstack = 0
  3328  0013B0  EC30  F00F         	call	_RtccWrOn	;wreg free
  3329                           
  3330                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  3331  0013B4  80A3               	bsf	4003,0,c	;volatile
  3332                           
  3333                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  3334  0013B6  C03F  F001         	movff	_segundo,___awdiv@dividend
  3335  0013BA  C040  F002         	movff	_segundo+1,___awdiv@dividend+1
  3336  0013BE  0E00               	movlw	0
  3337  0013C0  6E04               	movwf	___awdiv@divisor+1,c
  3338  0013C2  0E0A               	movlw	10
  3339  0013C4  6E03               	movwf	___awdiv@divisor,c
  3340  0013C6  EC96  F00C         	call	___awdiv	;wreg free
  3341  0013CA  5001               	movf	?___awdiv,w,c
  3342  0013CC  6E54               	movwf	_segundo_d,c
  3343                           
  3344                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  3345  0013CE  5054               	movf	_segundo_d,w,c
  3346  0013D0  0D0A               	mullw	10
  3347  0013D2  50F3               	movf	prodl,w,c
  3348  0013D4  0800               	sublw	0
  3349  0013D6  243F               	addwf	_segundo,w,c
  3350  0013D8  6E55               	movwf	_segundo_u,c
  3351                           
  3352                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  3353  0013DA  5054               	movf	_segundo_d,w,c
  3354  0013DC  0D10               	mullw	16
  3355  0013DE  50F3               	movf	prodl,w,c
  3356  0013E0  2455               	addwf	_segundo_u,w,c
  3357  0013E2  6E46               	movwf	_RtccTime+1,c
  3358                           
  3359                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  3360  0013E4  C03D  F001         	movff	_minuto,___awdiv@dividend
  3361  0013E8  C03E  F002         	movff	_minuto+1,___awdiv@dividend+1
  3362  0013EC  0E00               	movlw	0
  3363  0013EE  6E04               	movwf	___awdiv@divisor+1,c
  3364  0013F0  0E0A               	movlw	10
  3365  0013F2  6E03               	movwf	___awdiv@divisor,c
  3366  0013F4  EC96  F00C         	call	___awdiv	;wreg free
  3367  0013F8  5001               	movf	?___awdiv,w,c
  3368  0013FA  6E52               	movwf	_minuto_d,c
  3369                           
  3370                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  3371  0013FC  5052               	movf	_minuto_d,w,c
  3372  0013FE  0D0A               	mullw	10
  3373  001400  50F3               	movf	prodl,w,c
  3374  001402  0800               	sublw	0
  3375  001404  243D               	addwf	_minuto,w,c
  3376  001406  6E53               	movwf	_minuto_u,c
  3377                           
  3378                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  3379  001408  5052               	movf	_minuto_d,w,c
  3380  00140A  0D10               	mullw	16
  3381  00140C  50F3               	movf	prodl,w,c
  3382  00140E  2453               	addwf	_minuto_u,w,c
  3383  001410  6E47               	movwf	_RtccTime+2,c
  3384                           
  3385                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  3386  001412  C035  F001         	movff	_hora,___awdiv@dividend
  3387  001416  C036  F002         	movff	_hora+1,___awdiv@dividend+1
  3388  00141A  0E00               	movlw	0
  3389  00141C  6E04               	movwf	___awdiv@divisor+1,c
  3390  00141E  0E0A               	movlw	10
  3391  001420  6E03               	movwf	___awdiv@divisor,c
  3392  001422  EC96  F00C         	call	___awdiv	;wreg free
  3393  001426  5001               	movf	?___awdiv,w,c
  3394  001428  6E4E               	movwf	_hora_d,c
  3395                           
  3396                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  3397  00142A  504E               	movf	_hora_d,w,c
  3398  00142C  0D0A               	mullw	10
  3399  00142E  50F3               	movf	prodl,w,c
  3400  001430  0800               	sublw	0
  3401  001432  2435               	addwf	_hora,w,c
  3402  001434  6E4F               	movwf	_hora_u,c
  3403                           
  3404                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  3405  001436  504E               	movf	_hora_d,w,c
  3406  001438  0D10               	mullw	16
  3407  00143A  50F3               	movf	prodl,w,c
  3408  00143C  244F               	addwf	_hora_u,w,c
  3409  00143E  6E48               	movwf	_RtccTime+3,c
  3410                           
  3411                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  3412  001440  C056  F001         	movff	_anio,___awdiv@dividend
  3413  001444  C057  F002         	movff	_anio+1,___awdiv@dividend+1
  3414  001448  0E00               	movlw	0
  3415  00144A  6E04               	movwf	___awdiv@divisor+1,c
  3416  00144C  0E0A               	movlw	10
  3417  00144E  6E03               	movwf	___awdiv@divisor,c
  3418  001450  EC96  F00C         	call	___awdiv	;wreg free
  3419  001454  5001               	movf	?___awdiv,w,c
  3420  001456  6E49               	movwf	_anio_d,c
  3421                           
  3422                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  3423  001458  5049               	movf	_anio_d,w,c
  3424  00145A  0D0A               	mullw	10
  3425  00145C  50F3               	movf	prodl,w,c
  3426  00145E  0800               	sublw	0
  3427  001460  2456               	addwf	_anio,w,c
  3428  001462  6E4A               	movwf	_anio_u,c
  3429                           
  3430                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  3431  001464  5049               	movf	_anio_d,w,c
  3432  001466  0D10               	mullw	16
  3433  001468  50F3               	movf	prodl,w,c
  3434  00146A  244A               	addwf	_anio_u,w,c
  3435  00146C  6E44               	movwf	_RtccDate+3,c
  3436                           
  3437                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  3438  00146E  C05A  F001         	movff	_mes,___awdiv@dividend
  3439  001472  C05B  F002         	movff	_mes+1,___awdiv@dividend+1
  3440  001476  0E00               	movlw	0
  3441  001478  6E04               	movwf	___awdiv@divisor+1,c
  3442  00147A  0E0A               	movlw	10
  3443  00147C  6E03               	movwf	___awdiv@divisor,c
  3444  00147E  EC96  F00C         	call	___awdiv	;wreg free
  3445  001482  5001               	movf	?___awdiv,w,c
  3446  001484  6E50               	movwf	_mes_d,c
  3447                           
  3448                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  3449  001486  5050               	movf	_mes_d,w,c
  3450  001488  0D0A               	mullw	10
  3451  00148A  50F3               	movf	prodl,w,c
  3452  00148C  0800               	sublw	0
  3453  00148E  245A               	addwf	_mes,w,c
  3454  001490  6E51               	movwf	_mes_u,c
  3455                           
  3456                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  3457  001492  5050               	movf	_mes_d,w,c
  3458  001494  0D10               	mullw	16
  3459  001496  50F3               	movf	prodl,w,c
  3460  001498  2451               	addwf	_mes_u,w,c
  3461  00149A  6E43               	movwf	_RtccDate+2,c
  3462                           
  3463                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  3464  00149C  C058  F001         	movff	_dia,___awdiv@dividend
  3465  0014A0  C059  F002         	movff	_dia+1,___awdiv@dividend+1
  3466  0014A4  0E00               	movlw	0
  3467  0014A6  6E04               	movwf	___awdiv@divisor+1,c
  3468  0014A8  0E0A               	movlw	10
  3469  0014AA  6E03               	movwf	___awdiv@divisor,c
  3470  0014AC  EC96  F00C         	call	___awdiv	;wreg free
  3471  0014B0  5001               	movf	?___awdiv,w,c
  3472  0014B2  6E4C               	movwf	_fecha_d,c
  3473                           
  3474                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  3475  0014B4  504C               	movf	_fecha_d,w,c
  3476  0014B6  0D0A               	mullw	10
  3477  0014B8  50F3               	movf	prodl,w,c
  3478  0014BA  0800               	sublw	0
  3479  0014BC  2458               	addwf	_dia,w,c
  3480  0014BE  6E4D               	movwf	_fecha_u,c
  3481                           
  3482                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  3483  0014C0  504C               	movf	_fecha_d,w,c
  3484  0014C2  0D10               	mullw	16
  3485  0014C4  50F3               	movf	prodl,w,c
  3486  0014C6  244D               	addwf	_fecha_u,w,c
  3487  0014C8  6E42               	movwf	_RtccDate+1,c
  3488                           
  3489                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  3490  0014CA  C033  F04B         	movff	_diasem,_dia_semana
  3491                           
  3492                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  3493  0014CE  C033  F041         	movff	_diasem,_RtccDate
  3494                           
  3495                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  3496  0014D2  0E45               	movlw	low _RtccTime
  3497  0014D4  6E01               	movwf	RtccWriteTime@pTm,c
  3498  0014D6  0E00               	movlw	high _RtccTime
  3499  0014D8  6E02               	movwf	RtccWriteTime@pTm+1,c
  3500  0014DA  0E01               	movlw	1
  3501  0014DC  6E03               	movwf	RtccWriteTime@di,c
  3502  0014DE  EC1F  F00B         	call	_RtccWriteTime	;wreg free
  3503                           
  3504                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  3505  0014E2  0E41               	movlw	low _RtccDate
  3506  0014E4  6E01               	movwf	RtccWriteDate@pDt,c
  3507  0014E6  0E00               	movlw	high _RtccDate
  3508  0014E8  6E02               	movwf	RtccWriteDate@pDt+1,c
  3509  0014EA  0E01               	movlw	1
  3510  0014EC  6E03               	movwf	RtccWriteDate@di,c
  3511  0014EE  EC7C  F00A         	call	_RtccWriteDate	;wreg free
  3512                           
  3513                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  3514  0014F2  010F               	movlb	15	; () banked
  3515  0014F4  8F3F               	bsf	63,7,b	;volatile
  3516                           
  3517                           ; BSR set to: 15
  3518  0014F6  0012               	return		;funcret
  3519  0014F8                     __end_of_Write_RTC:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           indf0	equ	0xFEF
  3528                           postinc0	equ	0xFEE
  3529                           fsr0h	equ	0xFEA
  3530                           fsr0l	equ	0xFE9
  3531                           wreg	equ	0xFE8
  3532                           postdec1	equ	0xFE5
  3533                           fsr1l	equ	0xFE1
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function ___awdiv *****************
  3542 ;; Defined at:
  3543 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  dividend        2    0[COMRAM] int 
  3546 ;;  divisor         2    2[COMRAM] int 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  quotient        2    6[COMRAM] int 
  3549 ;;  sign            1    5[COMRAM] unsigned char 
  3550 ;;  counter         1    4[COMRAM] unsigned char 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  2    0[COMRAM] int 
  3553 ;; Registers used:
  3554 ;;		wreg, status,2, status,0
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3560 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3561 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3563 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3564 ;;Total ram usage:        8 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; This function calls:
  3567 ;;		Nothing
  3568 ;; This function is called by:
  3569 ;;		_Write_RTC
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text19
  3574  00192C                     __ptext19:
  3575                           	opt stack 0
  3576  00192C                     ___awdiv:
  3577                           	opt stack 29
  3578                           
  3579                           ; BSR set to: 15
  3580                           ;incstack = 0
  3581  00192C  0E00               	movlw	0
  3582  00192E  6E06               	movwf	___awdiv@sign,c
  3583  001930  AE04               	btfss	___awdiv@divisor+1,7,c
  3584  001932  D007               	goto	l1985
  3585  001934  6C03               	negf	___awdiv@divisor,c
  3586  001936  1E04               	comf	___awdiv@divisor+1,f,c
  3587  001938  B0D8               	btfsc	status,0,c
  3588  00193A  2A04               	incf	___awdiv@divisor+1,f,c
  3589  00193C  0E01               	movlw	1
  3590  00193E  6E06               	movwf	___awdiv@sign,c
  3591  001940  D000               	goto	l1985
  3592  001942                     l1985:
  3593  001942  AE02               	btfss	___awdiv@dividend+1,7,c
  3594  001944  D007               	goto	l1991
  3595  001946  6C01               	negf	___awdiv@dividend,c
  3596  001948  1E02               	comf	___awdiv@dividend+1,f,c
  3597  00194A  B0D8               	btfsc	status,0,c
  3598  00194C  2A02               	incf	___awdiv@dividend+1,f,c
  3599  00194E  0E01               	movlw	1
  3600  001950  1A06               	xorwf	___awdiv@sign,f,c
  3601  001952  D000               	goto	l1991
  3602  001954                     l1991:
  3603  001954  0E00               	movlw	0
  3604  001956  6E08               	movwf	___awdiv@quotient+1,c
  3605  001958  0E00               	movlw	0
  3606  00195A  6E07               	movwf	___awdiv@quotient,c
  3607  00195C  5003               	movf	___awdiv@divisor,w,c
  3608  00195E  1004               	iorwf	___awdiv@divisor+1,w,c
  3609  001960  B4D8               	btfsc	status,2,c
  3610  001962  D021               	goto	l2013
  3611  001964  0E01               	movlw	1
  3612  001966  6E05               	movwf	___awdiv@counter,c
  3613  001968  D005               	goto	l1999
  3614  00196A                     l1997:
  3615  00196A  90D8               	bcf	status,0,c
  3616  00196C  3603               	rlcf	___awdiv@divisor,f,c
  3617  00196E  3604               	rlcf	___awdiv@divisor+1,f,c
  3618  001970  2A05               	incf	___awdiv@counter,f,c
  3619  001972  D000               	goto	l1999
  3620  001974                     l1999:
  3621  001974  BE04               	btfsc	___awdiv@divisor+1,7,c
  3622  001976  D002               	goto	l2001
  3623  001978  D7F8               	goto	l1997
  3624  00197A  D000               	goto	l2001
  3625  00197C                     l2001:
  3626  00197C  90D8               	bcf	status,0,c
  3627  00197E  3607               	rlcf	___awdiv@quotient,f,c
  3628  001980  3608               	rlcf	___awdiv@quotient+1,f,c
  3629  001982  5003               	movf	___awdiv@divisor,w,c
  3630  001984  5C01               	subwf	___awdiv@dividend,w,c
  3631  001986  5004               	movf	___awdiv@divisor+1,w,c
  3632  001988  5802               	subwfb	___awdiv@dividend+1,w,c
  3633  00198A  A0D8               	btfss	status,0,c
  3634  00198C  D006               	goto	l2009
  3635  00198E  5003               	movf	___awdiv@divisor,w,c
  3636  001990  5E01               	subwf	___awdiv@dividend,f,c
  3637  001992  5004               	movf	___awdiv@divisor+1,w,c
  3638  001994  5A02               	subwfb	___awdiv@dividend+1,f,c
  3639  001996  8007               	bsf	___awdiv@quotient,0,c
  3640  001998  D000               	goto	l2009
  3641  00199A                     l2009:
  3642  00199A  90D8               	bcf	status,0,c
  3643  00199C  3204               	rrcf	___awdiv@divisor+1,f,c
  3644  00199E  3203               	rrcf	___awdiv@divisor,f,c
  3645  0019A0  2E05               	decfsz	___awdiv@counter,f,c
  3646  0019A2  D7EC               	goto	l2001
  3647  0019A4  D000               	goto	l2013
  3648  0019A6                     l2013:
  3649  0019A6  5006               	movf	___awdiv@sign,w,c
  3650  0019A8  B4D8               	btfsc	status,2,c
  3651  0019AA  D005               	goto	l2017
  3652  0019AC  6C07               	negf	___awdiv@quotient,c
  3653  0019AE  1E08               	comf	___awdiv@quotient+1,f,c
  3654  0019B0  B0D8               	btfsc	status,0,c
  3655  0019B2  2A08               	incf	___awdiv@quotient+1,f,c
  3656  0019B4  D000               	goto	l2017
  3657  0019B6                     l2017:
  3658  0019B6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3659  0019BA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3660  0019BE  0012               	return	
  3661  0019C0  0012               	return		;funcret
  3662  0019C2                     __end_of___awdiv:
  3663                           	opt stack 0
  3664                           tblptru	equ	0xFF8
  3665                           tblptrh	equ	0xFF7
  3666                           tblptrl	equ	0xFF6
  3667                           tablat	equ	0xFF5
  3668                           prodh	equ	0xFF4
  3669                           prodl	equ	0xFF3
  3670                           indf0	equ	0xFEF
  3671                           postinc0	equ	0xFEE
  3672                           fsr0h	equ	0xFEA
  3673                           fsr0l	equ	0xFE9
  3674                           wreg	equ	0xFE8
  3675                           postdec1	equ	0xFE5
  3676                           fsr1l	equ	0xFE1
  3677                           indf2	equ	0xFDF
  3678                           postinc2	equ	0xFDE
  3679                           postdec2	equ	0xFDD
  3680                           fsr2h	equ	0xFDA
  3681                           fsr2l	equ	0xFD9
  3682                           status	equ	0xFD8
  3683                           
  3684 ;; *************** function _RtccWriteTime *****************
  3685 ;; Defined at:
  3686 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  pTm             2    0[COMRAM] PTR const struct .
  3689 ;;		 -> RtccTime(4), 
  3690 ;;  di              1    2[COMRAM] enum E7121
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  tempHourWDay    2    9[COMRAM] struct .
  3693 ;;  tempMinSec      2    7[COMRAM] struct .
  3694 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3695 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3696 ;;  wasOn           1    4[COMRAM] enum E7121
  3697 ;; Return value:  Size  Location     Type
  3698 ;;                  1    wreg      enum E7337
  3699 ;; Registers used:
  3700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3701 ;; Tracked objects:
  3702 ;;		On entry : 0/0
  3703 ;;		On exit  : 0/0
  3704 ;;		Unchanged: 0/0
  3705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3706 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3707 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3708 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3709 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3710 ;;Total ram usage:       11 bytes
  3711 ;; Hardware stack levels used:    1
  3712 ;; Hardware stack levels required when called:    1
  3713 ;; This function calls:
  3714 ;;		_RtccWrOn
  3715 ;; This function is called by:
  3716 ;;		_Write_RTC
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text20
  3721  00163E                     __ptext20:
  3722                           	opt stack 0
  3723  00163E                     _RtccWriteTime:
  3724                           	opt stack 28
  3725                           
  3726                           ;incstack = 0
  3727  00163E  0E00               	movlw	0
  3728  001640  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3729  001642  EE20 F002          	lfsr	2,2
  3730  001646  5001               	movf	RtccWriteTime@pTm,w,c
  3731  001648  26D9               	addwf	fsr2l,f,c
  3732  00164A  5002               	movf	RtccWriteTime@pTm+1,w,c
  3733  00164C  22DA               	addwfc	fsr2h,f,c
  3734  00164E  0E5A               	movlw	90
  3735  001650  60DF               	cpfslt	indf2,c
  3736  001652  0012               	return	
  3737  001654  EE20 F001          	lfsr	2,1
  3738  001658  5001               	movf	RtccWriteTime@pTm,w,c
  3739  00165A  26D9               	addwf	fsr2l,f,c
  3740  00165C  5002               	movf	RtccWriteTime@pTm+1,w,c
  3741  00165E  22DA               	addwfc	fsr2h,f,c
  3742  001660  0E5A               	movlw	90
  3743  001662  60DF               	cpfslt	indf2,c
  3744  001664  0012               	return	
  3745  001666  EE20 F003          	lfsr	2,3
  3746  00166A  5001               	movf	RtccWriteTime@pTm,w,c
  3747  00166C  26D9               	addwf	fsr2l,f,c
  3748  00166E  5002               	movf	RtccWriteTime@pTm+1,w,c
  3749  001670  22DA               	addwfc	fsr2h,f,c
  3750  001672  0E24               	movlw	36
  3751  001674  64DF               	cpfsgt	indf2,c
  3752  001676  D002               	goto	l1817
  3753  001678  0012               	return	
  3754                           
  3755                           ;	Return value of _RtccWriteTime is never used
  3756  00167A  0012               	return	
  3757  00167C                     l1817:
  3758  00167C  EE20 F002          	lfsr	2,2
  3759  001680  5001               	movf	RtccWriteTime@pTm,w,c
  3760  001682  26D9               	addwf	fsr2l,f,c
  3761  001684  5002               	movf	RtccWriteTime@pTm+1,w,c
  3762  001686  22DA               	addwfc	fsr2h,f,c
  3763  001688  50DF               	movf	indf2,w,c
  3764  00168A  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3765  00168C  EE20 F001          	lfsr	2,1
  3766  001690  5001               	movf	RtccWriteTime@pTm,w,c
  3767  001692  26D9               	addwf	fsr2l,f,c
  3768  001694  5002               	movf	RtccWriteTime@pTm+1,w,c
  3769  001696  22DA               	addwfc	fsr2h,f,c
  3770  001698  50DF               	movf	indf2,w,c
  3771  00169A  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3772  00169C  5003               	movf	RtccWriteTime@di,w,c
  3773  00169E  B4D8               	btfsc	status,2,c
  3774  0016A0  D002               	goto	l1823
  3775  0016A2  9CF2               	bcf	intcon,6,c	;volatile
  3776  0016A4  D000               	goto	l1823
  3777  0016A6                     l1823:
  3778  0016A6  0E00               	movlw	0
  3779  0016A8  BB3F               	btfsc	63,5,b	;volatile
  3780  0016AA  0E01               	movlw	1
  3781  0016AC  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3782  0016AE  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3783  0016B0  A4D8               	btfss	status,2,c
  3784  0016B2  D003               	goto	l1827
  3785  0016B4  EC30  F00F         	call	_RtccWrOn	;wreg free
  3786  0016B8  D000               	goto	l1827
  3787  0016BA                     l1827:
  3788  0016BA  0E00               	movlw	0
  3789  0016BC  BF3F               	btfsc	63,7,b	;volatile
  3790  0016BE  0E01               	movlw	1
  3791  0016C0  6E05               	movwf	RtccWriteTime@wasOn,c
  3792  0016C2  5005               	movf	RtccWriteTime@wasOn,w,c
  3793  0016C4  B4D8               	btfsc	status,2,c
  3794  0016C6  D007               	goto	l1833
  3795  0016C8  0E00               	movlw	0
  3796  0016CA  BE91               	btfsc	3985,7,c	;volatile
  3797  0016CC  0E01               	movlw	1
  3798  0016CE  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3799  0016D0  010F               	movlb	15	; () banked
  3800  0016D2  9F3F               	bcf	63,7,b	;volatile
  3801  0016D4  D000               	goto	l1833
  3802  0016D6                     l1833:
  3803  0016D6  0EFC               	movlw	252
  3804  0016D8  010F               	movlb	15	; () banked
  3805  0016DA  173F               	andwf	63,f,b	;volatile
  3806  0016DC  010F               	movlb	15	; () banked
  3807  0016DE  813F               	bsf	63,0,b	;volatile
  3808                           
  3809                           ; BSR set to: 15
  3810  0016E0  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3811                           
  3812                           ; BSR set to: 15
  3813  0016E4  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3814                           
  3815                           ; BSR set to: 15
  3816  0016E8  EE20 F003          	lfsr	2,3
  3817  0016EC  5001               	movf	RtccWriteTime@pTm,w,c
  3818  0016EE  26D9               	addwf	fsr2l,f,c
  3819  0016F0  5002               	movf	RtccWriteTime@pTm+1,w,c
  3820  0016F2  22DA               	addwfc	fsr2h,f,c
  3821  0016F4  50DF               	movf	indf2,w,c
  3822  0016F6  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3823                           
  3824                           ; BSR set to: 15
  3825  0016F8  0EFC               	movlw	252
  3826  0016FA  010F               	movlb	15	; () banked
  3827  0016FC  173F               	andwf	63,f,b	;volatile
  3828                           
  3829                           ; BSR set to: 15
  3830  0016FE  010F               	movlb	15	; () banked
  3831  001700  813F               	bsf	63,0,b	;volatile
  3832                           
  3833                           ; BSR set to: 15
  3834  001702  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3835                           
  3836                           ; BSR set to: 15
  3837  001706  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3838                           
  3839                           ; BSR set to: 15
  3840  00170A  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3841                           
  3842                           ; BSR set to: 15
  3843  00170E  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3844                           
  3845                           ; BSR set to: 15
  3846  001712  5005               	movf	RtccWriteTime@wasOn,w,c
  3847  001714  B4D8               	btfsc	status,2,c
  3848  001716  D00D               	goto	l1865
  3849                           
  3850                           ; BSR set to: 15
  3851  001718  010F               	movlb	15	; () banked
  3852  00171A  8F3F               	bsf	63,7,b	;volatile
  3853                           
  3854                           ; BSR set to: 15
  3855  00171C  5006               	movf	RtccWriteTime@wasAlrm,w,c
  3856  00171E  B4D8               	btfsc	status,2,c
  3857  001720  D002               	goto	l1861
  3858                           
  3859                           ; BSR set to: 15
  3860  001722  8E91               	bsf	3985,7,c	;volatile
  3861  001724  D000               	goto	l1861
  3862  001726                     l1861:
  3863                           
  3864                           ; BSR set to: 15
  3865  001726  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3866  001728  B4D8               	btfsc	status,2,c
  3867  00172A  D009               	goto	l1869
  3868                           
  3869                           ; BSR set to: 15
  3870  00172C  EC30  F00F         	call	_RtccWrOn	;wreg free
  3871  001730  D006               	goto	l1869
  3872  001732                     l1865:
  3873  001732  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3874  001734  A4D8               	btfss	status,2,c
  3875  001736  D003               	goto	l1869
  3876  001738  010F               	movlb	15	; () banked
  3877  00173A  9B3F               	bcf	63,5,b	;volatile
  3878                           
  3879                           ; BSR set to: 15
  3880  00173C  D000               	goto	l1869
  3881  00173E                     l1869:
  3882  00173E  5003               	movf	RtccWriteTime@di,w,c
  3883  001740  B4D8               	btfsc	status,2,c
  3884  001742  0012               	return	
  3885  001744  8CF2               	bsf	intcon,6,c	;volatile
  3886  001746  0012               	return	
  3887                           
  3888                           ;	Return value of _RtccWriteTime is never used
  3889  001748  0012               	return		;funcret
  3890  00174A                     __end_of_RtccWriteTime:
  3891                           	opt stack 0
  3892                           tblptru	equ	0xFF8
  3893                           tblptrh	equ	0xFF7
  3894                           tblptrl	equ	0xFF6
  3895                           tablat	equ	0xFF5
  3896                           prodh	equ	0xFF4
  3897                           prodl	equ	0xFF3
  3898                           intcon	equ	0xFF2
  3899                           indf0	equ	0xFEF
  3900                           postinc0	equ	0xFEE
  3901                           fsr0h	equ	0xFEA
  3902                           fsr0l	equ	0xFE9
  3903                           wreg	equ	0xFE8
  3904                           postdec1	equ	0xFE5
  3905                           fsr1l	equ	0xFE1
  3906                           indf2	equ	0xFDF
  3907                           postinc2	equ	0xFDE
  3908                           postdec2	equ	0xFDD
  3909                           fsr2h	equ	0xFDA
  3910                           fsr2l	equ	0xFD9
  3911                           status	equ	0xFD8
  3912                           
  3913 ;; *************** function _RtccWriteDate *****************
  3914 ;; Defined at:
  3915 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  pDt             2    0[COMRAM] PTR const struct .
  3918 ;;		 -> RtccDate(4), 
  3919 ;;  di              1    2[COMRAM] enum E7121
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  tempHourWDay    2   11[COMRAM] struct .
  3922 ;;  tempDayMonth    2    9[COMRAM] struct .
  3923 ;;  tempYear        2    6[COMRAM] struct .
  3924 ;;  wasWrEn         1    8[COMRAM] enum E7121
  3925 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3926 ;;  wasOn           1    4[COMRAM] enum E7121
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      enum E7337
  3929 ;; Registers used:
  3930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3936 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3937 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3939 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3940 ;;Total ram usage:       13 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    1
  3943 ;; This function calls:
  3944 ;;		_RtccWrOn
  3945 ;; This function is called by:
  3946 ;;		_Write_RTC
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text21
  3951  0014F8                     __ptext21:
  3952                           	opt stack 0
  3953  0014F8                     _RtccWriteDate:
  3954                           	opt stack 28
  3955                           
  3956                           ;incstack = 0
  3957  0014F8  0E00               	movlw	0
  3958  0014FA  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3959  0014FC  EE20 F002          	lfsr	2,2
  3960  001500  5001               	movf	RtccWriteDate@pDt,w,c
  3961  001502  26D9               	addwf	fsr2l,f,c
  3962  001504  5002               	movf	RtccWriteDate@pDt+1,w,c
  3963  001506  22DA               	addwfc	fsr2h,f,c
  3964  001508  0E13               	movlw	19
  3965  00150A  60DF               	cpfslt	indf2,c
  3966  00150C  0012               	return	
  3967  00150E  EE20 F002          	lfsr	2,2
  3968  001512  5001               	movf	RtccWriteDate@pDt,w,c
  3969  001514  26D9               	addwf	fsr2l,f,c
  3970  001516  5002               	movf	RtccWriteDate@pDt+1,w,c
  3971  001518  22DA               	addwfc	fsr2h,f,c
  3972  00151A  50DF               	movf	indf2,w,c
  3973  00151C  B4D8               	btfsc	status,2,c
  3974  00151E  0012               	return	
  3975  001520  EE20 F001          	lfsr	2,1
  3976  001524  5001               	movf	RtccWriteDate@pDt,w,c
  3977  001526  26D9               	addwf	fsr2l,f,c
  3978  001528  5002               	movf	RtccWriteDate@pDt+1,w,c
  3979  00152A  22DA               	addwfc	fsr2h,f,c
  3980  00152C  0E32               	movlw	50
  3981  00152E  60DF               	cpfslt	indf2,c
  3982  001530  0012               	return	
  3983  001532  EE20 F001          	lfsr	2,1
  3984  001536  5001               	movf	RtccWriteDate@pDt,w,c
  3985  001538  26D9               	addwf	fsr2l,f,c
  3986  00153A  5002               	movf	RtccWriteDate@pDt+1,w,c
  3987  00153C  22DA               	addwfc	fsr2h,f,c
  3988  00153E  50DF               	movf	indf2,w,c
  3989  001540  B4D8               	btfsc	status,2,c
  3990  001542  0012               	return	
  3991  001544  EE20 F003          	lfsr	2,3
  3992  001548  5001               	movf	RtccWriteDate@pDt,w,c
  3993  00154A  26D9               	addwf	fsr2l,f,c
  3994  00154C  5002               	movf	RtccWriteDate@pDt+1,w,c
  3995  00154E  22DA               	addwfc	fsr2h,f,c
  3996  001550  0E99               	movlw	153
  3997  001552  64DF               	cpfsgt	indf2,c
  3998  001554  D002               	goto	l1885
  3999  001556  0012               	return	
  4000                           
  4001                           ;	Return value of _RtccWriteDate is never used
  4002  001558  0012               	return	
  4003  00155A                     l1885:
  4004  00155A  EE20 F003          	lfsr	2,3
  4005  00155E  5001               	movf	RtccWriteDate@pDt,w,c
  4006  001560  26D9               	addwf	fsr2l,f,c
  4007  001562  5002               	movf	RtccWriteDate@pDt+1,w,c
  4008  001564  22DA               	addwfc	fsr2h,f,c
  4009  001566  50DF               	movf	indf2,w,c
  4010  001568  6E07               	movwf	RtccWriteDate@tempYear,c
  4011  00156A  EE20 F001          	lfsr	2,1
  4012  00156E  5001               	movf	RtccWriteDate@pDt,w,c
  4013  001570  26D9               	addwf	fsr2l,f,c
  4014  001572  5002               	movf	RtccWriteDate@pDt+1,w,c
  4015  001574  22DA               	addwfc	fsr2h,f,c
  4016  001576  50DF               	movf	indf2,w,c
  4017  001578  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  4018  00157A  EE20 F002          	lfsr	2,2
  4019  00157E  5001               	movf	RtccWriteDate@pDt,w,c
  4020  001580  26D9               	addwf	fsr2l,f,c
  4021  001582  5002               	movf	RtccWriteDate@pDt+1,w,c
  4022  001584  22DA               	addwfc	fsr2h,f,c
  4023  001586  50DF               	movf	indf2,w,c
  4024  001588  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  4025  00158A  5003               	movf	RtccWriteDate@di,w,c
  4026  00158C  B4D8               	btfsc	status,2,c
  4027  00158E  D002               	goto	l1891
  4028  001590  9CF2               	bcf	intcon,6,c	;volatile
  4029  001592  D000               	goto	l1891
  4030  001594                     l1891:
  4031  001594  0E00               	movlw	0
  4032  001596  BB3F               	btfsc	63,5,b	;volatile
  4033  001598  0E01               	movlw	1
  4034  00159A  6E09               	movwf	RtccWriteDate@wasWrEn,c
  4035  00159C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4036  00159E  A4D8               	btfss	status,2,c
  4037  0015A0  D003               	goto	l1895
  4038  0015A2  EC30  F00F         	call	_RtccWrOn	;wreg free
  4039  0015A6  D000               	goto	l1895
  4040  0015A8                     l1895:
  4041  0015A8  0E00               	movlw	0
  4042  0015AA  BF3F               	btfsc	63,7,b	;volatile
  4043  0015AC  0E01               	movlw	1
  4044  0015AE  6E05               	movwf	RtccWriteDate@wasOn,c
  4045  0015B0  5005               	movf	RtccWriteDate@wasOn,w,c
  4046  0015B2  B4D8               	btfsc	status,2,c
  4047  0015B4  D007               	goto	l1901
  4048  0015B6  0E00               	movlw	0
  4049  0015B8  BE91               	btfsc	3985,7,c	;volatile
  4050  0015BA  0E01               	movlw	1
  4051  0015BC  6E06               	movwf	RtccWriteDate@wasAlrm,c
  4052  0015BE  010F               	movlb	15	; () banked
  4053  0015C0  9F3F               	bcf	63,7,b	;volatile
  4054  0015C2  D000               	goto	l1901
  4055  0015C4                     l1901:
  4056  0015C4  0EFC               	movlw	252
  4057  0015C6  010F               	movlb	15	; () banked
  4058  0015C8  173F               	andwf	63,f,b	;volatile
  4059  0015CA  010F               	movlb	15	; () banked
  4060  0015CC  813F               	bsf	63,0,b	;volatile
  4061                           
  4062                           ; BSR set to: 15
  4063  0015CE  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  4064                           
  4065                           ; BSR set to: 15
  4066  0015D2  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  4067                           
  4068                           ; BSR set to: 15
  4069  0015D6  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  4070  0015DA  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  4071  0015DE  50DF               	movf	indf2,w,c
  4072  0015E0  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  4073                           
  4074                           ; BSR set to: 15
  4075  0015E2  0EFC               	movlw	252
  4076  0015E4  010F               	movlb	15	; () banked
  4077  0015E6  173F               	andwf	63,f,b	;volatile
  4078                           
  4079                           ; BSR set to: 15
  4080  0015E8  0E03               	movlw	3
  4081  0015EA  010F               	movlb	15	; () banked
  4082  0015EC  133F               	iorwf	63,f,b	;volatile
  4083                           
  4084                           ; BSR set to: 15
  4085  0015EE  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  4086                           
  4087                           ; BSR set to: 15
  4088  0015F2  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  4089                           
  4090                           ; BSR set to: 15
  4091  0015F6  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  4092                           
  4093                           ; BSR set to: 15
  4094  0015FA  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  4095                           
  4096                           ; BSR set to: 15
  4097  0015FE  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  4098                           
  4099                           ; BSR set to: 15
  4100  001602  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  4101                           
  4102                           ; BSR set to: 15
  4103  001606  5005               	movf	RtccWriteDate@wasOn,w,c
  4104  001608  B4D8               	btfsc	status,2,c
  4105  00160A  D00D               	goto	l1937
  4106                           
  4107                           ; BSR set to: 15
  4108  00160C  010F               	movlb	15	; () banked
  4109  00160E  8F3F               	bsf	63,7,b	;volatile
  4110                           
  4111                           ; BSR set to: 15
  4112  001610  5006               	movf	RtccWriteDate@wasAlrm,w,c
  4113  001612  B4D8               	btfsc	status,2,c
  4114  001614  D002               	goto	l1933
  4115                           
  4116                           ; BSR set to: 15
  4117  001616  8E91               	bsf	3985,7,c	;volatile
  4118  001618  D000               	goto	l1933
  4119  00161A                     l1933:
  4120                           
  4121                           ; BSR set to: 15
  4122  00161A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4123  00161C  B4D8               	btfsc	status,2,c
  4124  00161E  D009               	goto	l1941
  4125                           
  4126                           ; BSR set to: 15
  4127  001620  EC30  F00F         	call	_RtccWrOn	;wreg free
  4128  001624  D006               	goto	l1941
  4129  001626                     l1937:
  4130  001626  5009               	movf	RtccWriteDate@wasWrEn,w,c
  4131  001628  A4D8               	btfss	status,2,c
  4132  00162A  D003               	goto	l1941
  4133  00162C  010F               	movlb	15	; () banked
  4134  00162E  9B3F               	bcf	63,5,b	;volatile
  4135                           
  4136                           ; BSR set to: 15
  4137  001630  D000               	goto	l1941
  4138  001632                     l1941:
  4139  001632  5003               	movf	RtccWriteDate@di,w,c
  4140  001634  B4D8               	btfsc	status,2,c
  4141  001636  0012               	return	
  4142  001638  9CF2               	bcf	intcon,6,c	;volatile
  4143  00163A  0012               	return	
  4144                           
  4145                           ;	Return value of _RtccWriteDate is never used
  4146  00163C  0012               	return		;funcret
  4147  00163E                     __end_of_RtccWriteDate:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           indf0	equ	0xFEF
  4157                           postinc0	equ	0xFEE
  4158                           fsr0h	equ	0xFEA
  4159                           fsr0l	equ	0xFE9
  4160                           wreg	equ	0xFE8
  4161                           postdec1	equ	0xFE5
  4162                           fsr1l	equ	0xFE1
  4163                           indf2	equ	0xFDF
  4164                           postinc2	equ	0xFDE
  4165                           postdec2	equ	0xFDD
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _RtccWrOn *****************
  4171 ;; Defined at:
  4172 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;  data            2    0        unsigned int 
  4177 ;; Return value:  Size  Location     Type
  4178 ;;		None               void
  4179 ;; Registers used:
  4180 ;;		wreg, status,2
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4190 ;;Total ram usage:        0 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; This function calls:
  4193 ;;		Nothing
  4194 ;; This function is called by:
  4195 ;;		_Write_RTC
  4196 ;;		_RtccWriteDate
  4197 ;;		_RtccWriteTime
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           	psect	text22
  4202  001E60                     __ptext22:
  4203                           	opt stack 0
  4204  001E60                     _RtccWrOn:
  4205                           	opt stack 28
  4206                           
  4207                           ;incstack = 0
  4208  001E60  9CF2               	bcf	intcon,6,c	;volatile
  4209  001E62  0E55               	movlw	85
  4210  001E64  6EA7               	movwf	4007,c	;volatile
  4211  001E66  0EAA               	movlw	170
  4212  001E68  6EA7               	movwf	4007,c	;volatile
  4213  001E6A  010F               	movlb	15	; () banked
  4214  001E6C  8B3F               	bsf	63,5,b	;volatile
  4215                           
  4216                           ; BSR set to: 15
  4217  001E6E  8CF2               	bsf	intcon,6,c	;volatile
  4218                           
  4219                           ; BSR set to: 15
  4220  001E70  0012               	return		;funcret
  4221  001E72                     __end_of_RtccWrOn:
  4222                           	opt stack 0
  4223                           tblptru	equ	0xFF8
  4224                           tblptrh	equ	0xFF7
  4225                           tblptrl	equ	0xFF6
  4226                           tablat	equ	0xFF5
  4227                           prodh	equ	0xFF4
  4228                           prodl	equ	0xFF3
  4229                           intcon	equ	0xFF2
  4230                           indf0	equ	0xFEF
  4231                           postinc0	equ	0xFEE
  4232                           fsr0h	equ	0xFEA
  4233                           fsr0l	equ	0xFE9
  4234                           wreg	equ	0xFE8
  4235                           postdec1	equ	0xFE5
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           fsr2h	equ	0xFDA
  4241                           fsr2l	equ	0xFD9
  4242                           status	equ	0xFD8
  4243                           
  4244 ;; *************** function _Read_RTC *****************
  4245 ;; Defined at:
  4246 ;;		line 112 in file "C:/Archivos de programa/Unimic/unmc_01/headers\unmc_rtcc_01.h"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;		None               void
  4253 ;; Registers used:
  4254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4264 ;;Total ram usage:        0 bytes
  4265 ;; Hardware stack levels used:    1
  4266 ;; Hardware stack levels required when called:    1
  4267 ;; This function calls:
  4268 ;;		_RtccReadDate
  4269 ;;		_RtccReadTime
  4270 ;; This function is called by:
  4271 ;;		_main
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text23
  4276  001854                     __ptext23:
  4277                           	opt stack 0
  4278  001854                     _Read_RTC:
  4279                           	opt stack 29
  4280                           
  4281                           ;headers\unmc_rtcc_01.h: 116: RtccReadTime(&RtccTime);
  4282                           
  4283                           ; BSR set to: 15
  4284                           ;incstack = 0
  4285  001854  0E45               	movlw	low _RtccTime
  4286  001856  6E01               	movwf	RtccReadTime@pTm,c
  4287  001858  0E00               	movlw	high _RtccTime
  4288  00185A  6E02               	movwf	RtccReadTime@pTm+1,c
  4289  00185C  ECA3  F00D         	call	_RtccReadTime	;wreg free
  4290                           
  4291                           ;headers\unmc_rtcc_01.h: 117: segundo_u=(RtccTime.f.sec & 0x0F);
  4292  001860  5046               	movf	_RtccTime+1,w,c
  4293  001862  0B0F               	andlw	15
  4294  001864  6E55               	movwf	_segundo_u,c
  4295                           
  4296                           ;headers\unmc_rtcc_01.h: 118: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  4297  001866  3846               	swapf	_RtccTime+1,w,c
  4298  001868  0B0F               	andlw	15
  4299  00186A  0B0F               	andlw	15
  4300  00186C  6E54               	movwf	_segundo_d,c
  4301                           
  4302                           ;headers\unmc_rtcc_01.h: 119: minuto_u=(RtccTime.f.min & 0x0F);
  4303  00186E  5047               	movf	_RtccTime+2,w,c
  4304  001870  0B0F               	andlw	15
  4305  001872  6E53               	movwf	_minuto_u,c
  4306                           
  4307                           ;headers\unmc_rtcc_01.h: 120: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  4308  001874  3847               	swapf	_RtccTime+2,w,c
  4309  001876  0B0F               	andlw	15
  4310  001878  0B0F               	andlw	15
  4311  00187A  6E52               	movwf	_minuto_d,c
  4312                           
  4313                           ;headers\unmc_rtcc_01.h: 121: hora_u=(RtccTime.f.hour & 0x0F);
  4314  00187C  5048               	movf	_RtccTime+3,w,c
  4315  00187E  0B0F               	andlw	15
  4316  001880  6E4F               	movwf	_hora_u,c
  4317                           
  4318                           ;headers\unmc_rtcc_01.h: 122: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  4319  001882  3848               	swapf	_RtccTime+3,w,c
  4320  001884  0B0F               	andlw	15
  4321  001886  0B0F               	andlw	15
  4322  001888  6E4E               	movwf	_hora_d,c
  4323                           
  4324                           ;headers\unmc_rtcc_01.h: 123: RtccReadDate(&RtccDate);
  4325  00188A  0E41               	movlw	low _RtccDate
  4326  00188C  6E01               	movwf	RtccReadDate@pDt,c
  4327  00188E  0E00               	movlw	high _RtccDate
  4328  001890  6E02               	movwf	RtccReadDate@pDt+1,c
  4329  001892  ECE1  F00C         	call	_RtccReadDate	;wreg free
  4330                           
  4331                           ;headers\unmc_rtcc_01.h: 124: fecha_u=(RtccDate.f.mday & 0x0F);
  4332  001896  5042               	movf	_RtccDate+1,w,c
  4333  001898  0B0F               	andlw	15
  4334  00189A  6E4D               	movwf	_fecha_u,c
  4335                           
  4336                           ;headers\unmc_rtcc_01.h: 125: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  4337  00189C  3842               	swapf	_RtccDate+1,w,c
  4338  00189E  0B0F               	andlw	15
  4339  0018A0  0B0F               	andlw	15
  4340  0018A2  6E4C               	movwf	_fecha_d,c
  4341                           
  4342                           ;headers\unmc_rtcc_01.h: 126: mes_u=(RtccDate.f.mon & 0x0F);
  4343  0018A4  5043               	movf	_RtccDate+2,w,c
  4344  0018A6  0B0F               	andlw	15
  4345  0018A8  6E51               	movwf	_mes_u,c
  4346                           
  4347                           ;headers\unmc_rtcc_01.h: 127: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  4348  0018AA  3843               	swapf	_RtccDate+2,w,c
  4349  0018AC  0B0F               	andlw	15
  4350  0018AE  0B0F               	andlw	15
  4351  0018B0  6E50               	movwf	_mes_d,c
  4352                           
  4353                           ;headers\unmc_rtcc_01.h: 128: dia_semana=RtccDate.f.wday;
  4354  0018B2  C041  F04B         	movff	_RtccDate,_dia_semana
  4355                           
  4356                           ;headers\unmc_rtcc_01.h: 129: anio_u=(RtccDate.f.year & 0x0F);
  4357  0018B6  5044               	movf	_RtccDate+3,w,c
  4358  0018B8  0B0F               	andlw	15
  4359  0018BA  6E4A               	movwf	_anio_u,c
  4360                           
  4361                           ;headers\unmc_rtcc_01.h: 130: anio_d=((RtccDate.f.year & 0xF0)>>4);
  4362  0018BC  3844               	swapf	_RtccDate+3,w,c
  4363  0018BE  0B0F               	andlw	15
  4364  0018C0  0B0F               	andlw	15
  4365  0018C2  6E49               	movwf	_anio_d,c
  4366                           
  4367                           ;headers\unmc_rtcc_01.h: 132: segundo=segundo_d*10+segundo_u;
  4368  0018C4  5054               	movf	_segundo_d,w,c
  4369  0018C6  0D0A               	mullw	10
  4370  0018C8  5055               	movf	_segundo_u,w,c
  4371  0018CA  24F3               	addwf	prodl,w,c
  4372  0018CC  6E3F               	movwf	_segundo,c
  4373  0018CE  0E00               	movlw	0
  4374  0018D0  20F4               	addwfc	prodh,w,c
  4375  0018D2  6E40               	movwf	_segundo+1,c
  4376                           
  4377                           ;headers\unmc_rtcc_01.h: 133: minuto=minuto_d*10+minuto_u;
  4378  0018D4  5052               	movf	_minuto_d,w,c
  4379  0018D6  0D0A               	mullw	10
  4380  0018D8  5053               	movf	_minuto_u,w,c
  4381  0018DA  24F3               	addwf	prodl,w,c
  4382  0018DC  6E3D               	movwf	_minuto,c
  4383  0018DE  0E00               	movlw	0
  4384  0018E0  20F4               	addwfc	prodh,w,c
  4385  0018E2  6E3E               	movwf	_minuto+1,c
  4386                           
  4387                           ;headers\unmc_rtcc_01.h: 134: hora=hora_d*10+hora_u;
  4388  0018E4  504E               	movf	_hora_d,w,c
  4389  0018E6  0D0A               	mullw	10
  4390  0018E8  504F               	movf	_hora_u,w,c
  4391  0018EA  24F3               	addwf	prodl,w,c
  4392  0018EC  6E35               	movwf	_hora,c
  4393  0018EE  0E00               	movlw	0
  4394  0018F0  20F4               	addwfc	prodh,w,c
  4395  0018F2  6E36               	movwf	_hora+1,c
  4396                           
  4397                           ;headers\unmc_rtcc_01.h: 135: dia=fecha_d*10+fecha_u;
  4398  0018F4  504C               	movf	_fecha_d,w,c
  4399  0018F6  0D0A               	mullw	10
  4400  0018F8  504D               	movf	_fecha_u,w,c
  4401  0018FA  24F3               	addwf	prodl,w,c
  4402  0018FC  6E58               	movwf	_dia,c
  4403  0018FE  0E00               	movlw	0
  4404  001900  20F4               	addwfc	prodh,w,c
  4405  001902  6E59               	movwf	_dia+1,c
  4406                           
  4407                           ;headers\unmc_rtcc_01.h: 136: diasem=dia_semana;
  4408  001904  C04B  F033         	movff	_dia_semana,_diasem
  4409  001908  6A34               	clrf	_diasem+1,c
  4410                           
  4411                           ;headers\unmc_rtcc_01.h: 137: mes=mes_d*10+mes_u;
  4412  00190A  5050               	movf	_mes_d,w,c
  4413  00190C  0D0A               	mullw	10
  4414  00190E  5051               	movf	_mes_u,w,c
  4415  001910  24F3               	addwf	prodl,w,c
  4416  001912  6E5A               	movwf	_mes,c
  4417  001914  0E00               	movlw	0
  4418  001916  20F4               	addwfc	prodh,w,c
  4419  001918  6E5B               	movwf	_mes+1,c
  4420                           
  4421                           ;headers\unmc_rtcc_01.h: 138: anio=anio_d*10+anio_u;
  4422  00191A  5049               	movf	_anio_d,w,c
  4423  00191C  0D0A               	mullw	10
  4424  00191E  504A               	movf	_anio_u,w,c
  4425  001920  24F3               	addwf	prodl,w,c
  4426  001922  6E56               	movwf	_anio,c
  4427  001924  0E00               	movlw	0
  4428  001926  20F4               	addwfc	prodh,w,c
  4429  001928  6E57               	movwf	_anio+1,c
  4430  00192A  0012               	return		;funcret
  4431  00192C                     __end_of_Read_RTC:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           prodh	equ	0xFF4
  4438                           prodl	equ	0xFF3
  4439                           intcon	equ	0xFF2
  4440                           indf0	equ	0xFEF
  4441                           postinc0	equ	0xFEE
  4442                           fsr0h	equ	0xFEA
  4443                           fsr0l	equ	0xFE9
  4444                           wreg	equ	0xFE8
  4445                           postdec1	equ	0xFE5
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           postinc2	equ	0xFDE
  4449                           postdec2	equ	0xFDD
  4450                           fsr2h	equ	0xFDA
  4451                           fsr2l	equ	0xFD9
  4452                           status	equ	0xFD8
  4453                           
  4454 ;; *************** function _RtccReadTime *****************
  4455 ;; Defined at:
  4456 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  pTm             2    0[COMRAM] PTR struct .
  4459 ;;		 -> RtccTime(4), 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  rTD0            8   10[COMRAM] struct .
  4462 ;;  rTD1            8    2[COMRAM] struct .
  4463 ;; Return value:  Size  Location     Type
  4464 ;;		None               void
  4465 ;; Registers used:
  4466 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4472 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4473 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4475 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4476 ;;Total ram usage:       18 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_Read_RTC
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text24
  4486  001B46                     __ptext24:
  4487                           	opt stack 0
  4488  001B46                     _RtccReadTime:
  4489                           	opt stack 29
  4490  001B46  0EFC               	movlw	252
  4491  001B48  010F               	movlb	15	; () banked
  4492  001B4A  173F               	andwf	63,f,b	;volatile
  4493                           
  4494                           ; BSR set to: 15
  4495  001B4C  010F               	movlb	15	; () banked
  4496  001B4E  813F               	bsf	63,0,b	;volatile
  4497                           
  4498                           ; BSR set to: 15
  4499  001B50  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  4500                           
  4501                           ; BSR set to: 15
  4502  001B54  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  4503                           
  4504                           ; BSR set to: 15
  4505  001B58  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  4506                           
  4507                           ; BSR set to: 15
  4508  001B5C  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  4509                           
  4510                           ; BSR set to: 15
  4511  001B60  0EFC               	movlw	252
  4512  001B62  010F               	movlb	15	; () banked
  4513  001B64  173F               	andwf	63,f,b	;volatile
  4514  001B66  010F               	movlb	15	; () banked
  4515  001B68  813F               	bsf	63,0,b	;volatile
  4516                           
  4517                           ; BSR set to: 15
  4518  001B6A  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  4519                           
  4520                           ; BSR set to: 15
  4521  001B6E  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  4522                           
  4523                           ; BSR set to: 15
  4524  001B72  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  4525                           
  4526                           ; BSR set to: 15
  4527  001B76  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  4528                           
  4529                           ; BSR set to: 15
  4530  001B7A  5009               	movf	RtccReadTime@rTD1+6,w,c
  4531  001B7C  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  4532  001B7E  A4D8               	btfss	status,2,c
  4533  001B80  D7E2               	goto	l2109
  4534                           
  4535                           ; BSR set to: 15
  4536                           
  4537                           ; BSR set to: 15
  4538  001B82  EE20 F003          	lfsr	2,3
  4539  001B86  5001               	movf	RtccReadTime@pTm,w,c
  4540  001B88  26D9               	addwf	fsr2l,f,c
  4541  001B8A  5002               	movf	RtccReadTime@pTm+1,w,c
  4542  001B8C  22DA               	addwfc	fsr2h,f,c
  4543  001B8E  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  4544  001B92  EE20 F002          	lfsr	2,2
  4545  001B96  5001               	movf	RtccReadTime@pTm,w,c
  4546  001B98  26D9               	addwf	fsr2l,f,c
  4547  001B9A  5002               	movf	RtccReadTime@pTm+1,w,c
  4548  001B9C  22DA               	addwfc	fsr2h,f,c
  4549  001B9E  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  4550  001BA2  EE20 F001          	lfsr	2,1
  4551  001BA6  5001               	movf	RtccReadTime@pTm,w,c
  4552  001BA8  26D9               	addwf	fsr2l,f,c
  4553  001BAA  5002               	movf	RtccReadTime@pTm+1,w,c
  4554  001BAC  22DA               	addwfc	fsr2h,f,c
  4555  001BAE  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  4556                           
  4557                           ; BSR set to: 15
  4558  001BB2  0012               	return		;funcret
  4559  001BB4                     __end_of_RtccReadTime:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodh	equ	0xFF4
  4566                           prodl	equ	0xFF3
  4567                           intcon	equ	0xFF2
  4568                           indf0	equ	0xFEF
  4569                           postinc0	equ	0xFEE
  4570                           fsr0h	equ	0xFEA
  4571                           fsr0l	equ	0xFE9
  4572                           wreg	equ	0xFE8
  4573                           postdec1	equ	0xFE5
  4574                           fsr1l	equ	0xFE1
  4575                           indf2	equ	0xFDF
  4576                           postinc2	equ	0xFDE
  4577                           postdec2	equ	0xFDD
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582 ;; *************** function _RtccReadDate *****************
  4583 ;; Defined at:
  4584 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  pDt             2    0[COMRAM] PTR struct .
  4587 ;;		 -> RtccDate(4), 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;  rTD0            8   10[COMRAM] struct .
  4590 ;;  rTD1            8    2[COMRAM] struct .
  4591 ;; Return value:  Size  Location     Type
  4592 ;;		None               void
  4593 ;; Registers used:
  4594 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4601 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4603 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4604 ;;Total ram usage:       18 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_Read_RTC
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text25
  4614  0019C2                     __ptext25:
  4615                           	opt stack 0
  4616  0019C2                     _RtccReadDate:
  4617                           	opt stack 29
  4618  0019C2  0EFC               	movlw	252
  4619  0019C4  010F               	movlb	15	; () banked
  4620  0019C6  173F               	andwf	63,f,b	;volatile
  4621  0019C8  0E03               	movlw	3
  4622  0019CA  010F               	movlb	15	; () banked
  4623  0019CC  133F               	iorwf	63,f,b	;volatile
  4624                           
  4625                           ; BSR set to: 15
  4626  0019CE  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  4627                           
  4628                           ; BSR set to: 15
  4629  0019D2  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  4630                           
  4631                           ; BSR set to: 15
  4632  0019D6  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  4633                           
  4634                           ; BSR set to: 15
  4635  0019DA  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  4636                           
  4637                           ; BSR set to: 15
  4638  0019DE  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  4639                           
  4640                           ; BSR set to: 15
  4641  0019E2  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  4642  0019E6  0EFC               	movlw	252
  4643  0019E8  010F               	movlb	15	; () banked
  4644  0019EA  173F               	andwf	63,f,b	;volatile
  4645  0019EC  0E03               	movlw	3
  4646  0019EE  010F               	movlb	15	; () banked
  4647  0019F0  133F               	iorwf	63,f,b	;volatile
  4648                           
  4649                           ; BSR set to: 15
  4650  0019F2  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  4651                           
  4652                           ; BSR set to: 15
  4653  0019F6  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  4654                           
  4655                           ; BSR set to: 15
  4656  0019FA  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  4657                           
  4658                           ; BSR set to: 15
  4659  0019FE  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  4660                           
  4661                           ; BSR set to: 15
  4662  001A02  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  4663                           
  4664                           ; BSR set to: 15
  4665  001A06  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  4666  001A0A  5005               	movf	RtccReadDate@rTD1+2,w,c
  4667  001A0C  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  4668  001A0E  A4D8               	btfss	status,2,c
  4669  001A10  D7D8               	goto	l2135
  4670                           
  4671                           ; BSR set to: 15
  4672                           
  4673                           ; BSR set to: 15
  4674  001A12  EE20 F001          	lfsr	2,1
  4675  001A16  5001               	movf	RtccReadDate@pDt,w,c
  4676  001A18  26D9               	addwf	fsr2l,f,c
  4677  001A1A  5002               	movf	RtccReadDate@pDt+1,w,c
  4678  001A1C  22DA               	addwfc	fsr2h,f,c
  4679  001A1E  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  4680  001A22  EE20 F002          	lfsr	2,2
  4681  001A26  5001               	movf	RtccReadDate@pDt,w,c
  4682  001A28  26D9               	addwf	fsr2l,f,c
  4683  001A2A  5002               	movf	RtccReadDate@pDt+1,w,c
  4684  001A2C  22DA               	addwfc	fsr2h,f,c
  4685  001A2E  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  4686                           
  4687                           ; BSR set to: 15
  4688  001A32  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  4689  001A36  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  4690  001A3A  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  4691                           
  4692                           ; BSR set to: 15
  4693  001A3E  EE20 F003          	lfsr	2,3
  4694  001A42  5001               	movf	RtccReadDate@pDt,w,c
  4695  001A44  26D9               	addwf	fsr2l,f,c
  4696  001A46  5002               	movf	RtccReadDate@pDt+1,w,c
  4697  001A48  22DA               	addwfc	fsr2h,f,c
  4698  001A4A  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  4699                           
  4700                           ; BSR set to: 15
  4701  001A4E  0012               	return		;funcret
  4702  001A50                     __end_of_RtccReadDate:
  4703                           	opt stack 0
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           intcon	equ	0xFF2
  4711                           indf0	equ	0xFEF
  4712                           postinc0	equ	0xFEE
  4713                           fsr0h	equ	0xFEA
  4714                           fsr0l	equ	0xFE9
  4715                           wreg	equ	0xFE8
  4716                           postdec1	equ	0xFE5
  4717                           fsr1l	equ	0xFE1
  4718                           indf2	equ	0xFDF
  4719                           postinc2	equ	0xFDE
  4720                           postdec2	equ	0xFDD
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           prodh	equ	0xFF4
  4729                           prodl	equ	0xFF3
  4730                           intcon	equ	0xFF2
  4731                           indf0	equ	0xFEF
  4732                           postinc0	equ	0xFEE
  4733                           fsr0h	equ	0xFEA
  4734                           fsr0l	equ	0xFE9
  4735                           wreg	equ	0xFE8
  4736                           postdec1	equ	0xFE5
  4737                           fsr1l	equ	0xFE1
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           fsr2h	equ	0xFDA
  4742                           fsr2l	equ	0xFD9
  4743                           status	equ	0xFD8
  4744                           
  4745                           	psect	rparam
  4746  0000                     tblptru	equ	0xFF8
  4747                           tblptrh	equ	0xFF7
  4748                           tblptrl	equ	0xFF6
  4749                           tablat	equ	0xFF5
  4750                           prodh	equ	0xFF4
  4751                           prodl	equ	0xFF3
  4752                           intcon	equ	0xFF2
  4753                           indf0	equ	0xFEF
  4754                           postinc0	equ	0xFEE
  4755                           fsr0h	equ	0xFEA
  4756                           fsr0l	equ	0xFE9
  4757                           wreg	equ	0xFE8
  4758                           postdec1	equ	0xFE5
  4759                           fsr1l	equ	0xFE1
  4760                           indf2	equ	0xFDF
  4761                           postinc2	equ	0xFDE
  4762                           postdec2	equ	0xFDD
  4763                           fsr2h	equ	0xFDA
  4764                           fsr2l	equ	0xFD9
  4765                           status	equ	0xFD8


Data Sizes:
    Strings     44
    Constant    14
    Data        6
    BSS         76
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      92
    BANK0           160      0      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_3(CODE[15]), STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer2(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_5(CODE[7]), STR_4(CODE[7]), buffer2(BANK0[20]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _lcd_setcursor_vb->_lcd_send_byte
    _caratula->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_comand->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _Write_RTC->_RtccWriteDate
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   15426
                                             35 COMRAM     5     5      0
                           _Read_RTC
                              _Setup
                          _Write_RTC
                           _caratula
                         _lcd_gotoxy
                   _lcd_setcursor_vb
 ---------------------------------------------------------------------------------
 (1) _lcd_setcursor_vb                                     2     1      1     732
                                              4 COMRAM     2     1      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _caratula                                             0     0      0    5877
                         _lcd_comand
                         _lcd_gotoxy
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    22     10    1916
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    2174
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1809
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_gotoxy                                           3     2      1    1141
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _Setup                                                0     0      0    3764
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     841
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (2) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_RTC
     _RtccReadDate
     _RtccReadTime
   _Setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _caratula
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_gotoxy
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _lcd_gotoxy
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble
   _lcd_setcursor_vb
     _lcd_send_byte
       _Delay100TCYx
       _lcd_send_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      2C       5       27.5%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     28      5C       1       96.8%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      88       6        0.0%
DATA                 0      0      88       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Aug 16 21:23:21 2016

                        _a 002D                          _b 002F                          _c 0031  
                        _i 0037                          _j 0039                          _k 003B  
           ?_lcd_send_byte 0003               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
              lcd_comand@d 0005               __CFG_CP0$OFF 000000                        l151 1238  
                      l152 1396                        l147 1236                        l276 110E  
                      l197 1DA4                        l198 1DA6                        l920 1C06  
                      l930 1CA6                        _dia 0058                        _mes 005A  
                      wreg 000FE8            RtccReadDate@pDt 0001                lcd_gotoxy@x 0006  
              lcd_gotoxy@y 0005                       l2001 197C                       l2013 19A6  
                     l2031 1BDC                       l2017 19B6                       l2009 199A  
                     l1049 1E3E                       l2027 1BCA                       l2051 1C84  
                     l2211 1038                       l2109 1B46                       l2029 1BD4  
                     l2221 1060                       l2205 1010                       l2135 19C2  
                     l2039 1BFA                       l2055 1C9A                       l2047 1C72  
                     l2049 1C7C                       l2233 10AC                       l2225 1084  
                     l2217 1054                       l2209 1016                       l2401 11B6  
                     l2171 1C12                       l2235 10B6                       l2253 1114  
                     l2245 10E4                       l2229 1088                       l2261 1174  
                     l2501 137E                       l2175 1C3C                       l2247 10EC  
                     l2239 10C2                       l2263 1190                       l2191 0F78  
                     l2423 121E                       l2273 1A76                       l2193 0F8E  
                     l2185 0F60                       l2441 1270                       l2417 11F8  
                     l2291 1AA2                       l2283 1A8E                       l1803 1DEE  
                     l2259 1168                       l2187 0F6E                       l2179 0F46  
                     l2363 1816                       l2507 139A                       l2435 1258  
                     l1901 15C4                       l2277 1A7E                       l1805 1DF4  
                     l2197 0FAC                       l2453 12A4                       l1823 16A6  
                     l2359 17FE                       l2471 12F4                       l2447 128C  
                     l1833 16D6                       l1817 167C                       l2369 183A  
                     l2465 12D8                       l1827 16BA                       l2483 132C  
                     l2459 12C0                       l1941 1632                       l1933 161A  
                     l1861 1726                       l2477 130E                       l1951 1CCC  
                     l2495 1364                       l1937 1626                       l1865 1732  
                     l1777 1E50                       l1953 1CD8                       l2489 1346  
                     l1891 1594                       l1947 1CB4                       l1885 155A  
                     l1869 173E                       l1949 1CC0                       l1957 1CE4  
                     l1895 15A8                       l1991 1954                       l1967 1E1E  
                     l1985 1942                       l1997 196A                       l1999 1974  
                     STR_1 0F34                       STR_2 0F0F                       STR_3 0F1E  
                     STR_4 0F34                       STR_5 0F2D                       u1100 1B0E  
                     u1120 1B2A                       u1060 1ADC                       u1118 1B10  
                     u1080 1AF4                       u1138 1B2C                       u2117 1228  
                     u1078 1ADE                       u2127 1388                       u2137 13A0  
                     u1098 1AF6                       u2147 1E40                       u2157 1E52  
                     u1560 1C32                       u1570 1C5C                       u1567 1C28  
                     u1577 1C52                       u1780 1826           ?_lcd_send_nibble 0001  
                     _anio 0056                       _flag 02E0                       _main 11A0  
                     _hora 0035                       fsr0h 000FEA                       indf0 000FEF  
                     fsr0l 000FE9                       fsr2h 000FDA                       fsr1l 000FE1  
                     indf2 000FDF                       fsr2l 000FD9              __CFG_T1DIG$ON 000000  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000           RtccReadDate@rTD0 000B           RtccReadDate@rTD1 0003  
             ___param_bank 000010            RtccReadTime@pTm 0001                _Delay1KTCYx 1E3C  
            __CFG_PLLDIV$1 000000                      ?_main 0001            __end_of___awdiv 19C2  
    __size_of_Delay100TCYx 0012            ___awdiv@divisor 0003            __end_of___lwdiv 1C10  
          __end_of___lwmod 1CB0            ___awdiv@counter 0005                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94             __CFG_FCMEN$OFF 000000  
                    _Setup 1CFC            __end_of_dpowers 0F0B                      _mes_d 0050  
                    _mes_u 0051            __end_of_isdigit 1E28             __pbitbssCOMRAM 02E0  
                    tablat 000FF5               lcd_putrs@ptr 0009                      status 000FD8  
          __end_of_sprintf 11A0    __CFG_DSWDTOSC$INTOSCREF 000000            __initialization 1D44  
             _Delay100TCYx 1E4E               __end_of_main 13B0            ??_lcd_send_byte 0004  
         RtccReadTime@rTD0 000B           RtccReadTime@rTD1 0003           __end_of_Read_RTC 192C  
                   ??_main 0024              __activetblptr 000002           __end_of_RtccWrOn 1E72  
                   ?_Setup 0001                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _EECON2 000FA7                     _ANCON0 000F48           ___awdiv@dividend 0001  
           __CFG_WDTEN$OFF 000000           RtccWriteDate@pDt 0001                     _RTCCFG 000F3F  
           __CFG_WPCFG$OFF 000000           __end_of_caratula 1854             __CFG_WPDIS$OFF 000000  
           __CFG_XINST$OFF 000000           __end_of_lcd_init 1AD0           __end_of_lcd_putc 1CFC  
        ?_lcd_setcursor_vb 0005                     ___wmul 1DBA                  ??___awdiv 0005  
           __CFG_STVREN$ON 000000                     _diasem 0033                     _anio_d 0049  
                   _anio_u 004A                  ??___lwdiv 0005                  ??___lwmod 000C  
       ??_lcd_setcursor_vb 0006                     _hora_d 004E                     _hora_u 004F  
                   clear_0 1D4A                     clear_1 1D58           ___awdiv@quotient 0007  
                   _minuto 003D      __end_of_RtccWriteDate 163E      __end_of_RtccWriteTime 174A  
         RtccWriteTime@pTm 0001               __pdataCOMRAM 0056                  ??_isdigit 0001  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_sprintf 0017                 __accesstop 0060  
  __end_of__initialization 1D7E         __size_of_Write_RTC 0148              ___rparam_used 000001  
           __pcstackCOMRAM 0001              __end_of_Setup 1D44            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000                    ??_Setup 000E          lcd_gotoxy@address 0007  
       __size_of_lcd_putrs 0054               sprintf@width 0021                 __pbssBANK0 0060  
                ?_Read_RTC 0001                 _dia_semana 004B  RtccWriteTime@tempHourWDay 000A  
               __pnvCOMRAM 0049                  ?_RtccWrOn 0001             lcd_send_byte@n 0003  
                  ?___wmul 0001              ?_RtccReadDate 0001              ?_RtccReadTime 0001  
             ?_Delay1KTCYx 0001          __end_of_Write_RTC 14F8                 _lcd_comand 1E72  
                ?_caratula 0001                 _lcd_gotoxy 1DE2                    _RTCVALH 000F99  
                  _RTCVALL 000F98                  ?_lcd_init 0001                  ?_lcd_putc 0001  
               ??_Read_RTC 0013                    __Hparam 0000                    __Lparam 0000  
 __size_of_lcd_send_nibble 0076                 ??_RtccWrOn 0001             ??_RtccReadDate 0003  
           ??_RtccReadTime 0003                    ___awdiv 192C          __end_of_lcd_putrs 1C64  
          __size_of___wmul 0028                    ___lwdiv 1BB4                    ___lwmod 1C64  
             __psmallconst 0F00                _RtccTimeVal 0029                    __pcinit 1D44  
                  _fecha_d 004C                    _fecha_u 004D                    __ramtop 0F00  
                  __ptext0 11A0                    __ptext1 1E28                    __ptext2 174A  
                  __ptext3 0F3C                    __ptext4 1E06                    __ptext5 1DBA  
                  __ptext6 1C64                    __ptext7 1BB4                    __ptext8 1C10  
                  __ptext9 1CB0                    _buffer2 0078                  _T1CONbits 000FCD  
                  _dpowers 0F01                    _isdigit 1E06                 ??_caratula 0024  
                  _segundo 003F                    _sprintf 0F3C                 ??_lcd_init 0005  
               ??_lcd_putc 0008       end_of_initialization 1D7E       lcd_send_byte@address 0004  
            __Lmediumconst 0000                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE      __end_of_lcd_send_byte 1DBA  
                _PORTAbits 000F80           __CFG_DSBOREN$OFF 000000                ?_lcd_comand 0001  
         __CFG_CPUDIV$OSC1 000000                  _TRISBbits 000F93                ?_lcd_gotoxy 0005  
__size_of_lcd_setcursor_vb 0014            _LCD_INIT_STRING 0F0B           __CFG_IOL1WAY$OFF 000000  
RtccWriteDate@tempDayMonth 000A        __CFG_MSSP7B_EN$MSK7 000000           Delay100TCYx@unit 0001  
           __end_of___wmul 1DE2              __pidataCOMRAM 1E80  RtccWriteDate@tempHourWDay 000C  
        ??_lcd_send_nibble 0001       __size_of_Delay1KTCYx 0012           __CFG_DSWDTEN$OFF 000000  
      start_initialization 1D44       __end_of_RtccReadDate 1A50       __end_of_RtccReadTime 1BB4  
     RtccWriteTime@wasAlrm 0006       RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146  
          RtccWriteDate@di 0003     __size_of_RtccWriteTime 010C          __size_of_Read_RTC 00D8  
      __size_of_lcd_comand 000E        __size_of_lcd_gotoxy 0024                   ??___wmul 0005  
        __size_of_RtccWrOn 0012            RtccWriteTime@di 0003           __CFG_LPT1OSC$OFF 000000  
              _ALRMCFGbits 000F91    __end_of_LCD_INIT_STRING 0F0F                __pbssCOMRAM 0029  
                _Write_RTC 13B0               _isdigit$1822 0002          __size_of_caratula 010A  
          Delay1KTCYx@unit 0001          __size_of_lcd_init 0080                sprintf@flag 001D  
        __size_of_lcd_putc 004C                sprintf@prec 0020           ___lwdiv@dividend 0001  
            ?_Delay100TCYx 0001                   ?___awdiv 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008    RtccWriteTime@tempMinSec 0008                  _lcd_putrs 1C10  
  lcd_setcursor_vb@visible 0006              _RtccWriteDate 14F8                __smallconst 0F00  
            _RtccWriteTime 163E                   ?_isdigit 0001       __CFG_RTCOSC$T1OSCREF 000000  
         _lcd_setcursor_vb 1E28             __size_of_Setup 0048                 ?_Write_RTC 0001  
         ___lwdiv@quotient 0005                   ?_sprintf 000D           _RtccAlrmTimeDate 0060  
           ___wmul@product 0005                   _LATBbits 000F8A                   _PIE3bits 000FA3  
                _segundo_d 0054             ??_Delay100TCYx 0001                  _segundo_u 0055  
         __CFG_WDTPS$32768 000000         RtccWriteDate@wasOn 0005         _Rtcc_read_TimeDate 0070  
           ?_RtccWriteDate 0001                 ?_lcd_putrs 0009          ___wmul@multiplier 0001  
           ?_RtccWriteTime 0001                  lcd_init@i 0005      __size_of_RtccReadDate 008E  
             ??_lcd_comand 0005                  lcd_putc@c 0008      __size_of_RtccReadTime 006E  
             ??_lcd_gotoxy 0006                  copy_data0 1D72                   _Read_RTC 1854  
          _lcd_send_nibble 1AD0                   __Hrparam 0000                   _RtccDate 0041  
                 __Lrparam 0000                   _RtccTime 0045                   _RtccWrOn 1E60  
       __end_of_lcd_comand 1E80         __end_of_lcd_gotoxy 1E06               _RtccReadDate 19C2  
         __size_of___awdiv 0096               _RtccReadTime 1B46           __size_of___lwdiv 005C  
         __size_of___lwmod 004C               _RtccTimeDate 0068                 sprintf@val 001E  
                 _caratula 174A           __size_of_isdigit 0022            ___lwdiv@divisor 0003  
              ??_Write_RTC 000E            ___lwdiv@counter 0007                   __ptext10 1DE2  
                 __ptext11 1CFC                   __ptext20 163E                   __ptext12 1A50  
                 __ptext21 14F8                   __ptext13 1E3C                   __ptext22 1E60  
                 __ptext14 1E72                   __ptext23 1854                   __ptext15 1D88  
                 __ptext24 1B46                   __ptext16 1AD0                   __ptext25 19C2  
                 __ptext17 1E4E                   __ptext18 13B0                   __ptext19 192C  
                 _lcd_init 1A50                   _lcd_putc 1CB0           __size_of_sprintf 0264  
   __size_of_lcd_send_byte 0032              __size_of_main 0210                   _minuto_d 0052  
                 _minuto_u 0053              ??_Delay1KTCYx 0001            ??_RtccWriteDate 0004  
                 main@cr_x 0027                   main@cr_y 0025            ??_RtccWriteTime 0004  
              ??_lcd_putrs 000B                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
       RtccWriteTime@wasOn 0005       __end_of_Delay100TCYx 1E60                   isdigit@c 0003  
                sprintf@ap 001B    __end_of_lcd_send_nibble 1B46                  sprintf@sp 000D  
    lcd_setcursor_vb@blink 0005           ___lwmod@dividend 0008                 _OSCCONbits 000FD3  
 __end_of_lcd_setcursor_vb 1E3C      RtccWriteDate@tempYear 0007              _lcd_send_byte 1D88  
               _RTCCFGbits 000F3F                   sprintf@c 0023                   sprintf@f 000F  
          ___lwmod@divisor 000A        __end_of_Delay1KTCYx 1E4E            ___lwmod@counter 000C  
     RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009      lcd_send_nibble@nibble 0002  
