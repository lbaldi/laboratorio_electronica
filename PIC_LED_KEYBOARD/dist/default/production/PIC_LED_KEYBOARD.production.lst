

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 06 19:13:37 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           	psect	idataCOMRAM
    55  002224                     __pidataCOMRAM:
    56                           	opt stack 0
    57                           
    58                           ;initializer for _anio
    59  002224  0010               	dw	16
    60                           
    61                           ;initializer for _dia
    62  002226  0006               	dw	6
    63                           
    64                           ;initializer for _diasem
    65  002228  0002               	dw	2
    66                           
    67                           ;initializer for _hora
    68  00222A  0012               	dw	18
    69                           
    70                           ;initializer for _mes
    71  00222C  0009               	dw	9
    72                           
    73                           	psect	smallconst
    74  000F00                     __psmallconst:
    75                           	opt stack 0
    76  000F00  00                 	db	0
    77  000F01                     _dpowers:
    78                           	opt stack 0
    79  000F01  0001               	dw	1
    80  000F03  000A               	dw	10
    81  000F05  0064               	dw	100
    82  000F07  03E8               	dw	1000
    83  000F09  2710               	dw	10000
    84  000F0B                     __end_of_dpowers:
    85                           	opt stack 0
    86  000F0B                     _LCD_INIT_STRING:
    87                           	opt stack 0
    88  000F0B  28                 	db	40
    89  000F0C  0C                 	db	12
    90  000F0D  01                 	db	1
    91  000F0E  06                 	db	6
    92  000F0F                     __end_of_LCD_INIT_STRING:
    93                           	opt stack 0
    94  000F0F                     STR_2:
    95  000F0F  25                 	db	37
    96  000F10  30                 	db	48	;'0'
    97  000F11  32                 	db	50	;'2'
    98  000F12  75                 	db	117	;'u'
    99  000F13  2F                 	db	47
   100  000F14  25                 	db	37
   101  000F15  30                 	db	48	;'0'
   102  000F16  32                 	db	50	;'2'
   103  000F17  75                 	db	117	;'u'
   104  000F18  2F                 	db	47
   105  000F19  25                 	db	37
   106  000F1A  30                 	db	48	;'0'
   107  000F1B  32                 	db	50	;'2'
   108  000F1C  75                 	db	117	;'u'
   109  000F1D  00                 	db	0
   110  000F1E                     STR_3:
   111  000F1E  25                 	db	37
   112  000F1F  30                 	db	48	;'0'
   113  000F20  32                 	db	50	;'2'
   114  000F21  75                 	db	117	;'u'
   115  000F22  3A                 	db	58	;':'
   116  000F23  25                 	db	37
   117  000F24  30                 	db	48	;'0'
   118  000F25  32                 	db	50	;'2'
   119  000F26  75                 	db	117	;'u'
   120  000F27  00                 	db	0
   121  000F28                     STR_30:
   122  000F28  56                 	db	86	;'V'
   123  000F29  6F                 	db	111	;'o'
   124  000F2A  6C                 	db	108	;'l'
   125  000F2B  75                 	db	117	;'u'
   126  000F2C  6D                 	db	109	;'m'
   127  000F2D  65                 	db	101	;'e'
   128  000F2E  6E                 	db	110	;'n'
   129  000F2F  00                 	db	0
   130  000F30                     STR_27:
   131  000F30  43                 	db	67	;'C'
   132  000F31  61                 	db	97	;'a'
   133  000F32  6D                 	db	109	;'m'
   134  000F33  62                 	db	98	;'b'
   135  000F34  69                 	db	105	;'i'
   136  000F35  61                 	db	97	;'a'
   137  000F36  72                 	db	114	;'r'
   138  000F37  00                 	db	0
   139  000F38                     STR_4:
   140  000F38  41                 	db	65	;'A'
   141  000F39  63                 	db	99	;'c'
   142  000F3A  74                 	db	116	;'t'
   143  000F3B  69                 	db	105	;'i'
   144  000F3C  76                 	db	118	;'v'
   145  000F3D  61                 	db	97	;'a'
   146  000F3E  72                 	db	114	;'r'
   147  000F3F  00                 	db	0
   148  000F40                     STR_7:
   149  000F40  41                 	db	65	;'A'
   150  000F41  6C                 	db	108	;'l'
   151  000F42  61                 	db	97	;'a'
   152  000F43  72                 	db	114	;'r'
   153  000F44  6D                 	db	109	;'m'
   154  000F45  61                 	db	97	;'a'
   155  000F46  00                 	db	0
   156  000F47                     STR_24:
   157  000F47  46                 	db	70	;'F'
   158  000F48  65                 	db	101	;'e'
   159  000F49  63                 	db	99	;'c'
   160  000F4A  68                 	db	104	;'h'
   161  000F4B  61                 	db	97	;'a'
   162  000F4C  00                 	db	0
   163  000F4D                     STR_5:
   164  000F4D  52                 	db	82	;'R'
   165  000F4E  65                 	db	101	;'e'
   166  000F4F  6C                 	db	108	;'l'
   167  000F50  6F                 	db	111	;'o'
   168  000F51  6A                 	db	106	;'j'
   169  000F52  00                 	db	0
   170  000F53                     STR_28:
   171  000F53  52                 	db	82	;'R'
   172  000F54  65                 	db	101	;'e'
   173  000F55  73                 	db	115	;'s'
   174  000F56  65                 	db	101	;'e'
   175  000F57  74                 	db	116	;'t'
   176  000F58  00                 	db	0
   177  000F59                     STR_25:
   178  000F59  48                 	db	72	;'H'
   179  000F5A  6F                 	db	111	;'o'
   180  000F5B  72                 	db	114	;'r'
   181  000F5C  61                 	db	97	;'a'
   182  000F5D  00                 	db	0
   183  000F5E                     STR_31:
   184  000F5E  54                 	db	84	;'T'
   185  000F5F  6F                 	db	111	;'o'
   186  000F60  6E                 	db	110	;'n'
   187  000F61  6F                 	db	111	;'o'
   188  000F62  00                 	db	0
   189  000F63                     STR_34:
   190  000F63  25                 	db	37
   191  000F64  30                 	db	48	;'0'
   192  000F65  31                 	db	49	;'1'
   193  000F66  75                 	db	117	;'u'
   194  000F67  00                 	db	0
   195  000F68                     STR_1:
   196  000F68  58                 	db	88	;'X'
   197  000F69  32                 	db	50	;'2'
   198  000F6A  38                 	db	56	;'8'
   199  000F6B  00                 	db	0
   200  000F6C                     STR_6:
   201  000F6C  50                 	db	80	;'P'
   202  000F6D  69                 	db	105	;'i'
   203  000F6E  6E                 	db	110	;'n'
   204  000F6F  00                 	db	0
   205  000F70                     STR_21:
   206  000F70  53                 	db	83	;'S'
   207  000F71  49                 	db	73	;'I'
   208  000F72  00                 	db	0
   209  000F73                     STR_22:
   210  000F73  4E                 	db	78	;'N'
   211  000F74  4F                 	db	79	;'O'
   212  000F75  00                 	db	0
   213  000F76                     STR_9:
   214  000F76  20                 	db	32
   215  000F77  00                 	db	0
   216  000F78                     STR_33:
   217  000F78  23                 	db	35
   218  000F79  00                 	db	0
   219  000F7A                     STR_32:
   220  000F7A  2A                 	db	42
   221  000F7B  00                 	db	0
   222  000F7C                     STR_8:
   223  000F7C  3E                 	db	62	;'>'
   224  000F7D  00                 	db	0
   225  0000                     
   226                           ; #config settings
   227  000F7E  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           	psect	nvCOMRAM
   230  000048                     __pnvCOMRAM:
   231                           	opt stack 0
   232  000048                     _anio_d:
   233                           	opt stack 0
   234  000048                     	ds	1
   235  000049                     _anio_u:
   236                           	opt stack 0
   237  000049                     	ds	1
   238  00004A                     _dia_semana:
   239                           	opt stack 0
   240  00004A                     	ds	1
   241  00004B                     _fecha_d:
   242                           	opt stack 0
   243  00004B                     	ds	1
   244  00004C                     _fecha_u:
   245                           	opt stack 0
   246  00004C                     	ds	1
   247  00004D                     _hora_d:
   248                           	opt stack 0
   249  00004D                     	ds	1
   250  00004E                     _hora_u:
   251                           	opt stack 0
   252  00004E                     	ds	1
   253  00004F                     _mes_d:
   254                           	opt stack 0
   255  00004F                     	ds	1
   256  000050                     _mes_u:
   257                           	opt stack 0
   258  000050                     	ds	1
   259  000051                     _minuto_d:
   260                           	opt stack 0
   261  000051                     	ds	1
   262  000052                     _minuto_u:
   263                           	opt stack 0
   264  000052                     	ds	1
   265  000053                     _segundo_d:
   266                           	opt stack 0
   267  000053                     	ds	1
   268  000054                     _segundo_u:
   269                           	opt stack 0
   270  000054                     	ds	1
   271  0000                     _ANCON0	set	3912
   272  0000                     _ANCON1	set	3913
   273  0000                     _RTCCFG	set	3903
   274  0000                     _RTCCFGbits	set	3903
   275  0000                     _ADCON0	set	4034
   276  0000                     _ADCON1	set	4033
   277  0000                     _ALRMCFGbits	set	3985
   278  0000                     _EECON2	set	4007
   279  0000                     _INTCONbits	set	4082
   280  0000                     _LATAbits	set	3977
   281  0000                     _LATBbits	set	3978
   282  0000                     _OSCCONbits	set	4051
   283  0000                     _OSCTUNEbits	set	3995
   284  0000                     _PIE3bits	set	4003
   285  0000                     _PORTAbits	set	3968
   286  0000                     _PORTCbits	set	3970
   287  0000                     _RTCVALH	set	3993
   288  0000                     _RTCVALL	set	3992
   289  0000                     _T1CONbits	set	4045
   290  0000                     _TRISA	set	3986
   291  0000                     _TRISB	set	3987
   292  0000                     _TRISBbits	set	3987
   293  0000                     _TRISC	set	3988
   294                           
   295                           	psect	cinit
   296  00205C                     __pcinit:
   297                           	opt stack 0
   298  00205C                     start_initialization:
   299                           	opt stack 0
   300  00205C                     __initialization:
   301                           	opt stack 0
   302                           
   303                           ; Clear objects allocated to BANK0 (48 bytes)
   304  00205C  EE00  F060         	lfsr	0,__pbssBANK0
   305  002060  0E30               	movlw	48
   306  002062                     clear_0:
   307  002062  6AEE               	clrf	postinc0,c
   308  002064  06E8               	decf	wreg,f,c
   309  002066  E1FD               	bnz	clear_0
   310                           
   311                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   312  002068  6A5F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   313                           
   314                           ; Clear objects allocated to COMRAM (35 bytes)
   315  00206A  EE00  F025         	lfsr	0,__pbssCOMRAM
   316  00206E  0E23               	movlw	35
   317  002070                     clear_1:
   318  002070  6AEE               	clrf	postinc0,c
   319  002072  06E8               	decf	wreg,f,c
   320  002074  E1FD               	bnz	clear_1
   321                           
   322                           ; Initialize objects allocated to COMRAM (10 bytes)
   323                           ; load TBLPTR registers with __pidataCOMRAM
   324  002076  0E24               	movlw	low __pidataCOMRAM
   325  002078  6EF6               	movwf	tblptrl,c
   326  00207A  0E22               	movlw	high __pidataCOMRAM
   327  00207C  6EF7               	movwf	tblptrh,c
   328  00207E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   329  002080  6EF8               	movwf	tblptru,c
   330  002082  EE00  F055         	lfsr	0,__pdataCOMRAM
   331  002086  EE10 F00A          	lfsr	1,10
   332  00208A                     copy_data0:
   333  00208A  0009               	tblrd		*+
   334  00208C  CFF5 FFEE          	movff	tablat,postinc0
   335  002090  50E5               	movf	postdec1,w,c
   336  002092  50E1               	movf	fsr1l,w,c
   337  002094  E1FA               	bnz	copy_data0
   338  002096                     end_of_initialization:
   339                           	opt stack 0
   340  002096                     __end_of__initialization:
   341                           	opt stack 0
   342  002096  0E00               	movlw	low (__Lmediumconst shr (0+16))
   343  002098  6EF8               	movwf	tblptru,c
   344  00209A  0100               	movlb	0
   345  00209C  EFD1  F010         	goto	_main	;jump to C main() function
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	bitbssCOMRAM
   356  0002F8                     __pbitbssCOMRAM:
   357                           	opt stack 0
   358  0002F8                     _flag:
   359                           	opt stack 0
   360  0002F8                     	ds	1
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           postdec1	equ	0xFE5
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	bssCOMRAM
   371  000025                     __pbssCOMRAM:
   372                           	opt stack 0
   373  000025                     _a:
   374                           	opt stack 0
   375  000025                     	ds	2
   376  000027                     _b:
   377                           	opt stack 0
   378  000027                     	ds	2
   379  000029                     _c:
   380                           	opt stack 0
   381  000029                     	ds	2
   382  00002B                     _i:
   383                           	opt stack 0
   384  00002B                     	ds	2
   385  00002D                     _j:
   386                           	opt stack 0
   387  00002D                     	ds	2
   388  00002F                     _k:
   389                           	opt stack 0
   390  00002F                     	ds	2
   391  000031                     _menu:
   392                           	opt stack 0
   393  000031                     	ds	2
   394  000033                     _minuto:
   395                           	opt stack 0
   396  000033                     	ds	2
   397  000035                     _segundo:
   398                           	opt stack 0
   399  000035                     	ds	2
   400  000037                     _select:
   401                           	opt stack 0
   402  000037                     	ds	2
   403  000039                     _select_op:
   404                           	opt stack 0
   405  000039                     	ds	2
   406  00003B                     _selection:
   407                           	opt stack 0
   408  00003B                     	ds	2
   409  00003D                     _submenu:
   410                           	opt stack 0
   411  00003D                     	ds	2
   412  00003F                     _key:
   413                           	opt stack 0
   414  00003F                     	ds	1
   415  000040                     _RtccDate:
   416                           	opt stack 0
   417  000040                     	ds	4
   418  000044                     _RtccTime:
   419                           	opt stack 0
   420  000044                     	ds	4
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           postdec1	equ	0xFE5
   428                           fsr1l	equ	0xFE1
   429                           
   430                           	psect	dataCOMRAM
   431  000055                     __pdataCOMRAM:
   432                           	opt stack 0
   433  000055                     _anio:
   434                           	opt stack 0
   435  000055                     	ds	2
   436  000057                     _dia:
   437                           	opt stack 0
   438  000057                     	ds	2
   439  000059                     _diasem:
   440                           	opt stack 0
   441  000059                     	ds	2
   442  00005B                     _hora:
   443                           	opt stack 0
   444  00005B                     	ds	2
   445  00005D                     _mes:
   446                           	opt stack 0
   447  00005D                     	ds	2
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457                           	psect	bssBANK0
   458  000060                     __pbssBANK0:
   459                           	opt stack 0
   460  000060                     _RtccAlrmTimeDate:
   461                           	opt stack 0
   462  000060                     	ds	8
   463  000068                     _RtccTimeDate:
   464                           	opt stack 0
   465  000068                     	ds	8
   466  000070                     _Rtcc_read_TimeDate:
   467                           	opt stack 0
   468  000070                     	ds	8
   469  000078                     _RtccTimeVal:
   470                           	opt stack 0
   471  000078                     	ds	4
   472  00007C                     _buffer1:
   473                           	opt stack 0
   474  00007C                     	ds	20
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	cstackCOMRAM
   485  000001                     __pcstackCOMRAM:
   486                           	opt stack 0
   487  000001                     ??_isdigit:
   488  000001                     ??_lcd_send_nibble:
   489  000001                     ?___wmul:
   490                           	opt stack 0
   491  000001                     ?___awdiv:
   492                           	opt stack 0
   493  000001                     ?___lwdiv:
   494                           	opt stack 0
   495  000001                     Delay100TCYx@unit:
   496                           	opt stack 0
   497  000001                     Delay1KTCYx@unit:
   498                           	opt stack 0
   499  000001                     RtccWriteDate@pDt:
   500                           	opt stack 0
   501  000001                     RtccWriteTime@pTm:
   502                           	opt stack 0
   503  000001                     ___wmul@multiplier:
   504                           	opt stack 0
   505  000001                     ___awdiv@dividend:
   506                           	opt stack 0
   507  000001                     ___lwdiv@dividend:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x0
   511  000001                     	ds	1
   512  000002                     lcd_send_nibble@nibble:
   513                           	opt stack 0
   514  000002                     _isdigit$2103:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x1
   518  000002                     	ds	1
   519  000003                     lcd_send_byte@n:
   520                           	opt stack 0
   521  000003                     RtccWriteDate@di:
   522                           	opt stack 0
   523  000003                     RtccWriteTime@di:
   524                           	opt stack 0
   525  000003                     isdigit@c:
   526                           	opt stack 0
   527  000003                     ___wmul@multiplicand:
   528                           	opt stack 0
   529  000003                     ___awdiv@divisor:
   530                           	opt stack 0
   531  000003                     ___lwdiv@divisor:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x2
   535  000003                     	ds	1
   536  000004                     lcd_send_byte@address:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x3
   540  000004                     	ds	1
   541  000005                     lcd_init@i:
   542                           	opt stack 0
   543  000005                     lcd_gotoxy@y:
   544                           	opt stack 0
   545  000005                     lcd_comand@d:
   546                           	opt stack 0
   547  000005                     RtccWriteDate@wasOn:
   548                           	opt stack 0
   549  000005                     RtccWriteTime@wasOn:
   550                           	opt stack 0
   551  000005                     ___awdiv@counter:
   552                           	opt stack 0
   553  000005                     ___wmul@product:
   554                           	opt stack 0
   555  000005                     ___lwdiv@quotient:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x4
   559  000005                     	ds	1
   560  000006                     lcd_gotoxy@x:
   561                           	opt stack 0
   562  000006                     RtccWriteDate@wasAlrm:
   563                           	opt stack 0
   564  000006                     RtccWriteTime@wasAlrm:
   565                           	opt stack 0
   566  000006                     ___awdiv@sign:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x5
   570  000006                     	ds	1
   571  000007                     lcd_gotoxy@address:
   572                           	opt stack 0
   573  000007                     RtccWriteTime@wasWrEn:
   574                           	opt stack 0
   575  000007                     ___lwdiv@counter:
   576                           	opt stack 0
   577  000007                     RtccWriteDate@tempYear:
   578                           	opt stack 0
   579  000007                     ___awdiv@quotient:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x6
   583  000007                     	ds	1
   584  000008                     ?___lwmod:
   585                           	opt stack 0
   586  000008                     lcd_putc@c:
   587                           	opt stack 0
   588  000008                     RtccWriteTime@tempMinSec:
   589                           	opt stack 0
   590  000008                     ___lwmod@dividend:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x7
   594  000008                     	ds	1
   595  000009                     RtccWriteDate@wasWrEn:
   596                           	opt stack 0
   597  000009                     lcd_putrs@ptr:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x8
   601  000009                     	ds	1
   602  00000A                     RtccWriteDate@tempDayMonth:
   603                           	opt stack 0
   604  00000A                     RtccWriteTime@tempHourWDay:
   605                           	opt stack 0
   606  00000A                     ___lwmod@divisor:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x9
   610  00000A                     	ds	1
   611  00000B                     lcd_write@column:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0xA
   615  00000B                     	ds	1
   616  00000C                     ___lwmod@counter:
   617                           	opt stack 0
   618  00000C                     RtccWriteDate@tempHourWDay:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0xB
   622  00000C                     	ds	1
   623  00000D                     ?_sprintf:
   624                           	opt stack 0
   625  00000D                     lcd_write@row:
   626                           	opt stack 0
   627  00000D                     sprintf@sp:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0xC
   631  00000D                     	ds	1
   632  00000E                     
   633                           ; 0 bytes @ 0xD
   634  00000E                     	ds	1
   635  00000F                     lcd_write@string:
   636                           	opt stack 0
   637  00000F                     sprintf@f:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0xE
   641  00000F                     	ds	2
   642  000011                     ??_menu_iterator:
   643  000011                     ??_menu_submenu_iterator:
   644  000011                     ??_button_B:
   645  000011                     
   646                           ; 0 bytes @ 0x10
   647  000011                     	ds	2
   648  000013                     
   649                           ; 0 bytes @ 0x12
   650  000013                     	ds	4
   651  000017                     ??_sprintf:
   652                           
   653                           ; 0 bytes @ 0x16
   654  000017                     	ds	4
   655  00001B                     sprintf@ap:
   656                           	opt stack 0
   657                           
   658                           ; 2 bytes @ 0x1A
   659  00001B                     	ds	2
   660  00001D                     sprintf@flag:
   661                           	opt stack 0
   662                           
   663                           ; 1 bytes @ 0x1C
   664  00001D                     	ds	1
   665  00001E                     sprintf@val:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x1D
   669  00001E                     	ds	2
   670  000020                     sprintf@prec:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x1F
   674  000020                     	ds	1
   675  000021                     sprintf@width:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x20
   679  000021                     	ds	2
   680  000023                     sprintf@c:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x22
   684  000023                     	ds	1
   685  000024                     ??_keyboard_control:
   686                           
   687                           ; 0 bytes @ 0x23
   688  000024                     	ds	1
   689  000025                     tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1l	equ	0xFE1
   697                           
   698                           ; 0 bytes @ 0x24
   699 ;;
   700 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   701 ;;
   702 ;; *************** function _main *****************
   703 ;; Defined at:
   704 ;;		line 283 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;		None
   709 ;; Return value:  Size  Location     Type
   710 ;;                  2  287[None  ] int 
   711 ;; Registers used:
   712 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   722 ;;Total ram usage:        0 bytes
   723 ;; Hardware stack levels required when called:    9
   724 ;; This function calls:
   725 ;;		_home
   726 ;;		_keyboard_control
   727 ;;		_setup
   728 ;; This function is called by:
   729 ;;		Startup code after reset
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           	psect	text0
   734  0021A2                     __ptext0:
   735                           	opt stack 0
   736  0021A2                     _main:
   737                           	opt stack 22
   738                           
   739                           ;main.c: 284: setup();
   740                           
   741                           ;incstack = 0
   742  0021A2  EC6A  F00E         	call	_setup	;wreg free
   743                           
   744                           ;main.c: 285: home();
   745  0021A6  ECC0  F00C         	call	_home	;wreg free
   746  0021AA  D000               	goto	l2785
   747  0021AC                     l2785:
   748  0021AC  ECC0  F007         	call	_keyboard_control	;wreg free
   749  0021B0  D7FD               	goto	l2785
   750                           
   751                           ;main.c: 287: return 0;
   752                           ;	Return value of _main is never used
   753  0021B2  EF00  F000         	goto	start
   754  0021B6                     __end_of_main:
   755                           	opt stack 0
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           fsr1l	equ	0xFE1
   764                           
   765 ;; *************** function _setup *****************
   766 ;; Defined at:
   767 ;;		line 42 in file "main.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;		None
   770 ;; Auto vars:     Size  Location     Type
   771 ;;		None
   772 ;; Return value:  Size  Location     Type
   773 ;;		None               void
   774 ;; Registers used:
   775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   785 ;;Total ram usage:        0 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    3
   788 ;; This function calls:
   789 ;;		_Write_RTC
   790 ;;		_lcd_comand
   791 ;;		_lcd_init
   792 ;; This function is called by:
   793 ;;		_main
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text1
   798  001CD4                     __ptext1:
   799                           	opt stack 0
   800  001CD4                     _setup:
   801                           	opt stack 27
   802                           
   803                           ;main.c: 44: OSCTUNEbits.INTSRC=1;
   804                           
   805                           ;incstack = 0
   806  001CD4  8E9B               	bsf	3995,7,c	;volatile
   807                           
   808                           ;main.c: 45: OSCTUNEbits.PLLEN=0;
   809  001CD6  9C9B               	bcf	3995,6,c	;volatile
   810                           
   811                           ;main.c: 46: OSCCONbits.IRCF0=1;
   812  001CD8  88D3               	bsf	4051,4,c	;volatile
   813                           
   814                           ;main.c: 47: OSCCONbits.IRCF1=1;
   815  001CDA  8AD3               	bsf	4051,5,c	;volatile
   816                           
   817                           ;main.c: 48: OSCCONbits.IRCF2=1;
   818  001CDC  8CD3               	bsf	4051,6,c	;volatile
   819                           
   820                           ;main.c: 49: OSCCONbits.SCS0=0;
   821  001CDE  90D3               	bcf	4051,0,c	;volatile
   822                           
   823                           ;main.c: 50: OSCCONbits.SCS1=0;
   824  001CE0  92D3               	bcf	4051,1,c	;volatile
   825                           
   826                           ;main.c: 51: TRISA = 0b11110000;
   827  001CE2  0EF0               	movlw	240
   828  001CE4  6E92               	movwf	3986,c	;volatile
   829                           
   830                           ;main.c: 52: TRISB = 0;
   831  001CE6  0E00               	movlw	0
   832  001CE8  6E93               	movwf	3987,c	;volatile
   833                           
   834                           ;main.c: 53: TRISC = 0b00000111;
   835  001CEA  0E07               	movlw	7
   836  001CEC  6E94               	movwf	3988,c	;volatile
   837                           
   838                           ;main.c: 57: ANCON0=0b11111111;
   839  001CEE  010F               	movlb	15	; () banked
   840  001CF0  6948               	setf	72,b	;volatile
   841                           
   842                           ; BSR set to: 15
   843                           ;main.c: 59: ANCON1=0b11111111;
   844  001CF2  010F               	movlb	15	; () banked
   845  001CF4  6949               	setf	73,b	;volatile
   846                           
   847                           ;main.c: 60: ADCON0=0b00101101;
   848  001CF6  0E2D               	movlw	45
   849  001CF8  6EC2               	movwf	4034,c	;volatile
   850                           
   851                           ;main.c: 61: ADCON1=0b00010000;
   852  001CFA  0E10               	movlw	16
   853  001CFC  6EC1               	movwf	4033,c	;volatile
   854                           
   855                           ; BSR set to: 15
   856                           ;main.c: 62: RTCCFGbits.RTCEN=1;
   857  001CFE  010F               	movlb	15	; () banked
   858  001D00  8F3F               	bsf	63,7,b	;volatile
   859                           
   860                           ; BSR set to: 15
   861                           ;main.c: 63: RTCCFGbits.RTCWREN=1;
   862  001D02  010F               	movlb	15	; () banked
   863  001D04  8B3F               	bsf	63,5,b	;volatile
   864                           
   865                           ; BSR set to: 15
   866                           ;main.c: 64: T1CONbits.T1OSCEN=1;
   867  001D06  86CD               	bsf	4045,3,c	;volatile
   868                           
   869                           ; BSR set to: 15
   870                           ;main.c: 65: Write_RTC();
   871  001D08  ECF3  F00A         	call	_Write_RTC	;wreg free
   872                           
   873                           ;main.c: 66: lcd_init();
   874  001D0C  ECB4  F00D         	call	_lcd_init	;wreg free
   875                           
   876                           ;main.c: 67: lcd_comand(0b00001100);
   877  001D10  0E0C               	movlw	12
   878  001D12  ECF6  F010         	call	_lcd_comand
   879                           
   880                           ;main.c: 68: LATBbits.LATB1 = 1;;
   881  001D16  828A               	bsf	3978,1,c	;volatile
   882                           
   883                           ;main.c: 69: LATBbits.LATB0 = 1;;
   884  001D18  808A               	bsf	3978,0,c	;volatile
   885                           
   886                           ;main.c: 72: select = 1;
   887  001D1A  0E00               	movlw	0
   888  001D1C  6E38               	movwf	_select+1,c
   889  001D1E  0E01               	movlw	1
   890  001D20  6E37               	movwf	_select,c
   891                           
   892                           ;main.c: 73: selection = 1;
   893  001D22  0E00               	movlw	0
   894  001D24  6E3C               	movwf	_selection+1,c
   895  001D26  0E01               	movlw	1
   896  001D28  6E3B               	movwf	_selection,c
   897                           
   898                           ;main.c: 74: menu = 0;
   899  001D2A  0E00               	movlw	0
   900  001D2C  6E32               	movwf	_menu+1,c
   901  001D2E  0E00               	movlw	0
   902  001D30  6E31               	movwf	_menu,c
   903                           
   904                           ;main.c: 75: submenu = 0;
   905  001D32  0E00               	movlw	0
   906  001D34  6E3E               	movwf	_submenu+1,c
   907  001D36  0E00               	movlw	0
   908  001D38  6E3D               	movwf	_submenu,c
   909                           
   910                           ;main.c: 76: select_op = 1;
   911  001D3A  0E00               	movlw	0
   912  001D3C  6E3A               	movwf	_select_op+1,c
   913  001D3E  0E01               	movlw	1
   914  001D40  6E39               	movwf	_select_op,c
   915  001D42  0012               	return		;funcret
   916  001D44                     __end_of_setup:
   917                           	opt stack 0
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1l	equ	0xFE1
   926                           
   927 ;; *************** function _lcd_comand *****************
   928 ;; Defined at:
   929 ;;		line 189 in file "Unimic/unmc_01/sources/unmc_lcd_216.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;  d               1    wreg     unsigned char 
   932 ;; Auto vars:     Size  Location     Type
   933 ;;  d               1    4[COMRAM] unsigned char 
   934 ;; Return value:  Size  Location     Type
   935 ;;		None               void
   936 ;; Registers used:
   937 ;;		wreg, status,2, status,0, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   946 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   947 ;;Total ram usage:        1 bytes
   948 ;; Hardware stack levels used:    1
   949 ;; Hardware stack levels required when called:    2
   950 ;; This function calls:
   951 ;;		_lcd_send_byte
   952 ;; This function is called by:
   953 ;;		_setup
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           	psect	text2
   958  0021EC                     __ptext2:
   959                           	opt stack 0
   960  0021EC                     _lcd_comand:
   961                           	opt stack 27
   962                           
   963                           ;incstack = 0
   964                           ;lcd_comand@d stored from wreg
   965  0021EC  6E05               	movwf	lcd_comand@d,c
   966                           
   967                           ;unmc_lcd_216.c: 190: lcd_send_byte(0,d);
   968  0021EE  C005  F003         	movff	lcd_comand@d,lcd_send_byte@n
   969  0021F2  0E00               	movlw	0
   970  0021F4  EC6A  F010         	call	_lcd_send_byte
   971  0021F8  0012               	return		;funcret
   972  0021FA                     __end_of_lcd_comand:
   973                           	opt stack 0
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983 ;; *************** function _Write_RTC *****************
   984 ;; Defined at:
   985 ;;		line 74 in file "Unimic/unmc_01/headers\unmc_rtcc_01.h"
   986 ;; Parameters:    Size  Location     Type
   987 ;;		None
   988 ;; Auto vars:     Size  Location     Type
   989 ;;		None
   990 ;; Return value:  Size  Location     Type
   991 ;;		None               void
   992 ;; Registers used:
   993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1003 ;;Total ram usage:        0 bytes
  1004 ;; Hardware stack levels used:    1
  1005 ;; Hardware stack levels required when called:    2
  1006 ;; This function calls:
  1007 ;;		_RtccWrOn
  1008 ;;		_RtccWriteDate
  1009 ;;		_RtccWriteTime
  1010 ;;		___awdiv
  1011 ;; This function is called by:
  1012 ;;		_setup
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text3
  1017  0015E6                     __ptext3:
  1018                           	opt stack 0
  1019  0015E6                     _Write_RTC:
  1020                           	opt stack 27
  1021                           
  1022                           ;headers\unmc_rtcc_01.h: 76: RtccWrOn();
  1023                           
  1024                           ;incstack = 0
  1025  0015E6  ECDB  F010         	call	_RtccWrOn	;wreg free
  1026                           
  1027                           ;headers\unmc_rtcc_01.h: 78: PIE3bits.RTCCIE=1;
  1028  0015EA  80A3               	bsf	4003,0,c	;volatile
  1029                           
  1030                           ;headers\unmc_rtcc_01.h: 79: segundo_d=segundo/10;
  1031  0015EC  C035  F001         	movff	_segundo,___awdiv@dividend
  1032  0015F0  C036  F002         	movff	_segundo+1,___awdiv@dividend+1
  1033  0015F4  0E00               	movlw	0
  1034  0015F6  6E04               	movwf	___awdiv@divisor+1,c
  1035  0015F8  0E0A               	movlw	10
  1036  0015FA  6E03               	movwf	___awdiv@divisor,c
  1037  0015FC  EC69  F00D         	call	___awdiv	;wreg free
  1038  001600  5001               	movf	?___awdiv,w,c
  1039  001602  6E53               	movwf	_segundo_d,c
  1040                           
  1041                           ;headers\unmc_rtcc_01.h: 80: segundo_u=segundo-segundo_d*10;
  1042  001604  5053               	movf	_segundo_d,w,c
  1043  001606  0D0A               	mullw	10
  1044  001608  50F3               	movf	prodl,w,c
  1045  00160A  0800               	sublw	0
  1046  00160C  2435               	addwf	_segundo,w,c
  1047  00160E  6E54               	movwf	_segundo_u,c
  1048                           
  1049                           ;headers\unmc_rtcc_01.h: 81: RtccTime.f.sec =segundo_d*16+segundo_u;
  1050  001610  5053               	movf	_segundo_d,w,c
  1051  001612  0D10               	mullw	16
  1052  001614  50F3               	movf	prodl,w,c
  1053  001616  2454               	addwf	_segundo_u,w,c
  1054  001618  6E45               	movwf	_RtccTime+1,c
  1055                           
  1056                           ;headers\unmc_rtcc_01.h: 82: minuto_d=minuto/10;
  1057  00161A  C033  F001         	movff	_minuto,___awdiv@dividend
  1058  00161E  C034  F002         	movff	_minuto+1,___awdiv@dividend+1
  1059  001622  0E00               	movlw	0
  1060  001624  6E04               	movwf	___awdiv@divisor+1,c
  1061  001626  0E0A               	movlw	10
  1062  001628  6E03               	movwf	___awdiv@divisor,c
  1063  00162A  EC69  F00D         	call	___awdiv	;wreg free
  1064  00162E  5001               	movf	?___awdiv,w,c
  1065  001630  6E51               	movwf	_minuto_d,c
  1066                           
  1067                           ;headers\unmc_rtcc_01.h: 83: minuto_u=minuto-minuto_d*10;
  1068  001632  5051               	movf	_minuto_d,w,c
  1069  001634  0D0A               	mullw	10
  1070  001636  50F3               	movf	prodl,w,c
  1071  001638  0800               	sublw	0
  1072  00163A  2433               	addwf	_minuto,w,c
  1073  00163C  6E52               	movwf	_minuto_u,c
  1074                           
  1075                           ;headers\unmc_rtcc_01.h: 84: RtccTime.f.min =minuto_d*16+minuto_u;
  1076  00163E  5051               	movf	_minuto_d,w,c
  1077  001640  0D10               	mullw	16
  1078  001642  50F3               	movf	prodl,w,c
  1079  001644  2452               	addwf	_minuto_u,w,c
  1080  001646  6E46               	movwf	_RtccTime+2,c
  1081                           
  1082                           ;headers\unmc_rtcc_01.h: 85: hora_d=hora/10;
  1083  001648  C05B  F001         	movff	_hora,___awdiv@dividend
  1084  00164C  C05C  F002         	movff	_hora+1,___awdiv@dividend+1
  1085  001650  0E00               	movlw	0
  1086  001652  6E04               	movwf	___awdiv@divisor+1,c
  1087  001654  0E0A               	movlw	10
  1088  001656  6E03               	movwf	___awdiv@divisor,c
  1089  001658  EC69  F00D         	call	___awdiv	;wreg free
  1090  00165C  5001               	movf	?___awdiv,w,c
  1091  00165E  6E4D               	movwf	_hora_d,c
  1092                           
  1093                           ;headers\unmc_rtcc_01.h: 86: hora_u=hora-hora_d*10;
  1094  001660  504D               	movf	_hora_d,w,c
  1095  001662  0D0A               	mullw	10
  1096  001664  50F3               	movf	prodl,w,c
  1097  001666  0800               	sublw	0
  1098  001668  245B               	addwf	_hora,w,c
  1099  00166A  6E4E               	movwf	_hora_u,c
  1100                           
  1101                           ;headers\unmc_rtcc_01.h: 87: RtccTime.f.hour=hora_d*16+hora_u;
  1102  00166C  504D               	movf	_hora_d,w,c
  1103  00166E  0D10               	mullw	16
  1104  001670  50F3               	movf	prodl,w,c
  1105  001672  244E               	addwf	_hora_u,w,c
  1106  001674  6E47               	movwf	_RtccTime+3,c
  1107                           
  1108                           ;headers\unmc_rtcc_01.h: 88: anio_d=anio/10;
  1109  001676  C055  F001         	movff	_anio,___awdiv@dividend
  1110  00167A  C056  F002         	movff	_anio+1,___awdiv@dividend+1
  1111  00167E  0E00               	movlw	0
  1112  001680  6E04               	movwf	___awdiv@divisor+1,c
  1113  001682  0E0A               	movlw	10
  1114  001684  6E03               	movwf	___awdiv@divisor,c
  1115  001686  EC69  F00D         	call	___awdiv	;wreg free
  1116  00168A  5001               	movf	?___awdiv,w,c
  1117  00168C  6E48               	movwf	_anio_d,c
  1118                           
  1119                           ;headers\unmc_rtcc_01.h: 89: anio_u=anio-anio_d*10;
  1120  00168E  5048               	movf	_anio_d,w,c
  1121  001690  0D0A               	mullw	10
  1122  001692  50F3               	movf	prodl,w,c
  1123  001694  0800               	sublw	0
  1124  001696  2455               	addwf	_anio,w,c
  1125  001698  6E49               	movwf	_anio_u,c
  1126                           
  1127                           ;headers\unmc_rtcc_01.h: 90: RtccDate.f.year=anio_d*16+anio_u;
  1128  00169A  5048               	movf	_anio_d,w,c
  1129  00169C  0D10               	mullw	16
  1130  00169E  50F3               	movf	prodl,w,c
  1131  0016A0  2449               	addwf	_anio_u,w,c
  1132  0016A2  6E43               	movwf	_RtccDate+3,c
  1133                           
  1134                           ;headers\unmc_rtcc_01.h: 91: mes_d=mes/10;
  1135  0016A4  C05D  F001         	movff	_mes,___awdiv@dividend
  1136  0016A8  C05E  F002         	movff	_mes+1,___awdiv@dividend+1
  1137  0016AC  0E00               	movlw	0
  1138  0016AE  6E04               	movwf	___awdiv@divisor+1,c
  1139  0016B0  0E0A               	movlw	10
  1140  0016B2  6E03               	movwf	___awdiv@divisor,c
  1141  0016B4  EC69  F00D         	call	___awdiv	;wreg free
  1142  0016B8  5001               	movf	?___awdiv,w,c
  1143  0016BA  6E4F               	movwf	_mes_d,c
  1144                           
  1145                           ;headers\unmc_rtcc_01.h: 92: mes_u=mes-mes_d*10;
  1146  0016BC  504F               	movf	_mes_d,w,c
  1147  0016BE  0D0A               	mullw	10
  1148  0016C0  50F3               	movf	prodl,w,c
  1149  0016C2  0800               	sublw	0
  1150  0016C4  245D               	addwf	_mes,w,c
  1151  0016C6  6E50               	movwf	_mes_u,c
  1152                           
  1153                           ;headers\unmc_rtcc_01.h: 93: RtccDate.f.mon=mes_d*16+mes_u;
  1154  0016C8  504F               	movf	_mes_d,w,c
  1155  0016CA  0D10               	mullw	16
  1156  0016CC  50F3               	movf	prodl,w,c
  1157  0016CE  2450               	addwf	_mes_u,w,c
  1158  0016D0  6E42               	movwf	_RtccDate+2,c
  1159                           
  1160                           ;headers\unmc_rtcc_01.h: 94: fecha_d=dia/10;
  1161  0016D2  C057  F001         	movff	_dia,___awdiv@dividend
  1162  0016D6  C058  F002         	movff	_dia+1,___awdiv@dividend+1
  1163  0016DA  0E00               	movlw	0
  1164  0016DC  6E04               	movwf	___awdiv@divisor+1,c
  1165  0016DE  0E0A               	movlw	10
  1166  0016E0  6E03               	movwf	___awdiv@divisor,c
  1167  0016E2  EC69  F00D         	call	___awdiv	;wreg free
  1168  0016E6  5001               	movf	?___awdiv,w,c
  1169  0016E8  6E4B               	movwf	_fecha_d,c
  1170                           
  1171                           ;headers\unmc_rtcc_01.h: 95: fecha_u=dia-fecha_d*10;
  1172  0016EA  504B               	movf	_fecha_d,w,c
  1173  0016EC  0D0A               	mullw	10
  1174  0016EE  50F3               	movf	prodl,w,c
  1175  0016F0  0800               	sublw	0
  1176  0016F2  2457               	addwf	_dia,w,c
  1177  0016F4  6E4C               	movwf	_fecha_u,c
  1178                           
  1179                           ;headers\unmc_rtcc_01.h: 96: RtccDate.f.mday=fecha_d*16+fecha_u;
  1180  0016F6  504B               	movf	_fecha_d,w,c
  1181  0016F8  0D10               	mullw	16
  1182  0016FA  50F3               	movf	prodl,w,c
  1183  0016FC  244C               	addwf	_fecha_u,w,c
  1184  0016FE  6E41               	movwf	_RtccDate+1,c
  1185                           
  1186                           ;headers\unmc_rtcc_01.h: 97: dia_semana=diasem;
  1187  001700  C059  F04A         	movff	_diasem,_dia_semana
  1188                           
  1189                           ;headers\unmc_rtcc_01.h: 98: RtccDate.f.wday =diasem;
  1190  001704  C059  F040         	movff	_diasem,_RtccDate
  1191                           
  1192                           ;headers\unmc_rtcc_01.h: 99: RtccWriteTime(&RtccTime,1);
  1193  001708  0E44               	movlw	low _RtccTime
  1194  00170A  6E01               	movwf	RtccWriteTime@pTm,c
  1195  00170C  0E00               	movlw	high _RtccTime
  1196  00170E  6E02               	movwf	RtccWriteTime@pTm+1,c
  1197  001710  0E01               	movlw	1
  1198  001712  6E03               	movwf	RtccWriteTime@di,c
  1199  001714  EC3A  F00C         	call	_RtccWriteTime	;wreg free
  1200                           
  1201                           ;headers\unmc_rtcc_01.h: 100: RtccWriteDate(&RtccDate,1);
  1202  001718  0E40               	movlw	low _RtccDate
  1203  00171A  6E01               	movwf	RtccWriteDate@pDt,c
  1204  00171C  0E00               	movlw	high _RtccDate
  1205  00171E  6E02               	movwf	RtccWriteDate@pDt+1,c
  1206  001720  0E01               	movlw	1
  1207  001722  6E03               	movwf	RtccWriteDate@di,c
  1208  001724  EC97  F00B         	call	_RtccWriteDate	;wreg free
  1209                           
  1210                           ;headers\unmc_rtcc_01.h: 101: (RTCCFGbits.RTCEN=1);
  1211  001728  010F               	movlb	15	; () banked
  1212  00172A  8F3F               	bsf	63,7,b	;volatile
  1213                           
  1214                           ; BSR set to: 15
  1215  00172C  0012               	return		;funcret
  1216  00172E                     __end_of_Write_RTC:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           prodl	equ	0xFF3
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1l	equ	0xFE1
  1227                           
  1228 ;; *************** function ___awdiv *****************
  1229 ;; Defined at:
  1230 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  dividend        2    0[COMRAM] int 
  1233 ;;  divisor         2    2[COMRAM] int 
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;  quotient        2    6[COMRAM] int 
  1236 ;;  sign            1    5[COMRAM] unsigned char 
  1237 ;;  counter         1    4[COMRAM] unsigned char 
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  2    0[COMRAM] int 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1248 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1250 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1251 ;;Total ram usage:        8 bytes
  1252 ;; Hardware stack levels used:    1
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_Write_RTC
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text4
  1261  001AD2                     __ptext4:
  1262                           	opt stack 0
  1263  001AD2                     ___awdiv:
  1264                           	opt stack 28
  1265                           
  1266                           ; BSR set to: 15
  1267                           ;incstack = 0
  1268  001AD2  0E00               	movlw	0
  1269  001AD4  6E06               	movwf	___awdiv@sign,c
  1270  001AD6  AE04               	btfss	___awdiv@divisor+1,7,c
  1271  001AD8  D007               	goto	l2515
  1272  001ADA  6C03               	negf	___awdiv@divisor,c
  1273  001ADC  1E04               	comf	___awdiv@divisor+1,f,c
  1274  001ADE  B0D8               	btfsc	status,0,c
  1275  001AE0  2A04               	incf	___awdiv@divisor+1,f,c
  1276  001AE2  0E01               	movlw	1
  1277  001AE4  6E06               	movwf	___awdiv@sign,c
  1278  001AE6  D000               	goto	l2515
  1279  001AE8                     l2515:
  1280  001AE8  AE02               	btfss	___awdiv@dividend+1,7,c
  1281  001AEA  D007               	goto	l2521
  1282  001AEC  6C01               	negf	___awdiv@dividend,c
  1283  001AEE  1E02               	comf	___awdiv@dividend+1,f,c
  1284  001AF0  B0D8               	btfsc	status,0,c
  1285  001AF2  2A02               	incf	___awdiv@dividend+1,f,c
  1286  001AF4  0E01               	movlw	1
  1287  001AF6  1A06               	xorwf	___awdiv@sign,f,c
  1288  001AF8  D000               	goto	l2521
  1289  001AFA                     l2521:
  1290  001AFA  0E00               	movlw	0
  1291  001AFC  6E08               	movwf	___awdiv@quotient+1,c
  1292  001AFE  0E00               	movlw	0
  1293  001B00  6E07               	movwf	___awdiv@quotient,c
  1294  001B02  5003               	movf	___awdiv@divisor,w,c
  1295  001B04  1004               	iorwf	___awdiv@divisor+1,w,c
  1296  001B06  B4D8               	btfsc	status,2,c
  1297  001B08  D021               	goto	l2543
  1298  001B0A  0E01               	movlw	1
  1299  001B0C  6E05               	movwf	___awdiv@counter,c
  1300  001B0E  D005               	goto	l2529
  1301  001B10                     l2527:
  1302  001B10  90D8               	bcf	status,0,c
  1303  001B12  3603               	rlcf	___awdiv@divisor,f,c
  1304  001B14  3604               	rlcf	___awdiv@divisor+1,f,c
  1305  001B16  2A05               	incf	___awdiv@counter,f,c
  1306  001B18  D000               	goto	l2529
  1307  001B1A                     l2529:
  1308  001B1A  BE04               	btfsc	___awdiv@divisor+1,7,c
  1309  001B1C  D002               	goto	l2531
  1310  001B1E  D7F8               	goto	l2527
  1311  001B20  D000               	goto	l2531
  1312  001B22                     l2531:
  1313  001B22  90D8               	bcf	status,0,c
  1314  001B24  3607               	rlcf	___awdiv@quotient,f,c
  1315  001B26  3608               	rlcf	___awdiv@quotient+1,f,c
  1316  001B28  5003               	movf	___awdiv@divisor,w,c
  1317  001B2A  5C01               	subwf	___awdiv@dividend,w,c
  1318  001B2C  5004               	movf	___awdiv@divisor+1,w,c
  1319  001B2E  5802               	subwfb	___awdiv@dividend+1,w,c
  1320  001B30  A0D8               	btfss	status,0,c
  1321  001B32  D006               	goto	l2539
  1322  001B34  5003               	movf	___awdiv@divisor,w,c
  1323  001B36  5E01               	subwf	___awdiv@dividend,f,c
  1324  001B38  5004               	movf	___awdiv@divisor+1,w,c
  1325  001B3A  5A02               	subwfb	___awdiv@dividend+1,f,c
  1326  001B3C  8007               	bsf	___awdiv@quotient,0,c
  1327  001B3E  D000               	goto	l2539
  1328  001B40                     l2539:
  1329  001B40  90D8               	bcf	status,0,c
  1330  001B42  3204               	rrcf	___awdiv@divisor+1,f,c
  1331  001B44  3203               	rrcf	___awdiv@divisor,f,c
  1332  001B46  2E05               	decfsz	___awdiv@counter,f,c
  1333  001B48  D7EC               	goto	l2531
  1334  001B4A  D000               	goto	l2543
  1335  001B4C                     l2543:
  1336  001B4C  5006               	movf	___awdiv@sign,w,c
  1337  001B4E  B4D8               	btfsc	status,2,c
  1338  001B50  D005               	goto	l2547
  1339  001B52  6C07               	negf	___awdiv@quotient,c
  1340  001B54  1E08               	comf	___awdiv@quotient+1,f,c
  1341  001B56  B0D8               	btfsc	status,0,c
  1342  001B58  2A08               	incf	___awdiv@quotient+1,f,c
  1343  001B5A  D000               	goto	l2547
  1344  001B5C                     l2547:
  1345  001B5C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1346  001B60  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1347  001B64  0012               	return	
  1348  001B66  0012               	return		;funcret
  1349  001B68                     __end_of___awdiv:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           prodl	equ	0xFF3
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           postdec1	equ	0xFE5
  1359                           fsr1l	equ	0xFE1
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _RtccWriteTime *****************
  1363 ;; Defined at:
  1364 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  pTm             2    0[COMRAM] PTR const struct .
  1367 ;;		 -> RtccTime(4), 
  1368 ;;  di              1    2[COMRAM] enum E7121
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  tempHourWDay    2    9[COMRAM] struct .
  1371 ;;  tempMinSec      2    7[COMRAM] struct .
  1372 ;;  wasWrEn         1    6[COMRAM] enum E7121
  1373 ;;  wasAlrm         1    5[COMRAM] enum E7121
  1374 ;;  wasOn           1    4[COMRAM] enum E7121
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      enum E7337
  1377 ;; Registers used:
  1378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1384 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1385 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1386 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1387 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1388 ;;Total ram usage:       11 bytes
  1389 ;; Hardware stack levels used:    1
  1390 ;; Hardware stack levels required when called:    1
  1391 ;; This function calls:
  1392 ;;		_RtccWrOn
  1393 ;; This function is called by:
  1394 ;;		_Write_RTC
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text5
  1399  001874                     __ptext5:
  1400                           	opt stack 0
  1401  001874                     _RtccWriteTime:
  1402                           	opt stack 27
  1403                           
  1404                           ;incstack = 0
  1405  001874  0E00               	movlw	0
  1406  001876  6E06               	movwf	RtccWriteTime@wasAlrm,c
  1407  001878  EE20 F002          	lfsr	2,2
  1408  00187C  5001               	movf	RtccWriteTime@pTm,w,c
  1409  00187E  26D9               	addwf	fsr2l,f,c
  1410  001880  5002               	movf	RtccWriteTime@pTm+1,w,c
  1411  001882  22DA               	addwfc	fsr2h,f,c
  1412  001884  0E5A               	movlw	90
  1413  001886  60DF               	cpfslt	indf2,c
  1414  001888  0012               	return	
  1415  00188A  EE20 F001          	lfsr	2,1
  1416  00188E  5001               	movf	RtccWriteTime@pTm,w,c
  1417  001890  26D9               	addwf	fsr2l,f,c
  1418  001892  5002               	movf	RtccWriteTime@pTm+1,w,c
  1419  001894  22DA               	addwfc	fsr2h,f,c
  1420  001896  0E5A               	movlw	90
  1421  001898  60DF               	cpfslt	indf2,c
  1422  00189A  0012               	return	
  1423  00189C  EE20 F003          	lfsr	2,3
  1424  0018A0  5001               	movf	RtccWriteTime@pTm,w,c
  1425  0018A2  26D9               	addwf	fsr2l,f,c
  1426  0018A4  5002               	movf	RtccWriteTime@pTm+1,w,c
  1427  0018A6  22DA               	addwfc	fsr2h,f,c
  1428  0018A8  0E24               	movlw	36
  1429  0018AA  64DF               	cpfsgt	indf2,c
  1430  0018AC  D002               	goto	l2269
  1431  0018AE  0012               	return	
  1432                           
  1433                           ;	Return value of _RtccWriteTime is never used
  1434  0018B0  0012               	return	
  1435  0018B2                     l2269:
  1436  0018B2  EE20 F002          	lfsr	2,2
  1437  0018B6  5001               	movf	RtccWriteTime@pTm,w,c
  1438  0018B8  26D9               	addwf	fsr2l,f,c
  1439  0018BA  5002               	movf	RtccWriteTime@pTm+1,w,c
  1440  0018BC  22DA               	addwfc	fsr2h,f,c
  1441  0018BE  50DF               	movf	indf2,w,c
  1442  0018C0  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  1443  0018C2  EE20 F001          	lfsr	2,1
  1444  0018C6  5001               	movf	RtccWriteTime@pTm,w,c
  1445  0018C8  26D9               	addwf	fsr2l,f,c
  1446  0018CA  5002               	movf	RtccWriteTime@pTm+1,w,c
  1447  0018CC  22DA               	addwfc	fsr2h,f,c
  1448  0018CE  50DF               	movf	indf2,w,c
  1449  0018D0  6E08               	movwf	RtccWriteTime@tempMinSec,c
  1450  0018D2  5003               	movf	RtccWriteTime@di,w,c
  1451  0018D4  B4D8               	btfsc	status,2,c
  1452  0018D6  D002               	goto	l2275
  1453  0018D8  9CF2               	bcf	intcon,6,c	;volatile
  1454  0018DA  D000               	goto	l2275
  1455  0018DC                     l2275:
  1456  0018DC  0E00               	movlw	0
  1457  0018DE  BB3F               	btfsc	63,5,b	;volatile
  1458  0018E0  0E01               	movlw	1
  1459  0018E2  6E07               	movwf	RtccWriteTime@wasWrEn,c
  1460  0018E4  5007               	movf	RtccWriteTime@wasWrEn,w,c
  1461  0018E6  A4D8               	btfss	status,2,c
  1462  0018E8  D003               	goto	l2279
  1463  0018EA  ECDB  F010         	call	_RtccWrOn	;wreg free
  1464  0018EE  D000               	goto	l2279
  1465  0018F0                     l2279:
  1466  0018F0  0E00               	movlw	0
  1467  0018F2  BF3F               	btfsc	63,7,b	;volatile
  1468  0018F4  0E01               	movlw	1
  1469  0018F6  6E05               	movwf	RtccWriteTime@wasOn,c
  1470  0018F8  5005               	movf	RtccWriteTime@wasOn,w,c
  1471  0018FA  B4D8               	btfsc	status,2,c
  1472  0018FC  D007               	goto	l2285
  1473  0018FE  0E00               	movlw	0
  1474  001900  BE91               	btfsc	3985,7,c	;volatile
  1475  001902  0E01               	movlw	1
  1476  001904  6E06               	movwf	RtccWriteTime@wasAlrm,c
  1477  001906  010F               	movlb	15	; () banked
  1478  001908  9F3F               	bcf	63,7,b	;volatile
  1479  00190A  D000               	goto	l2285
  1480  00190C                     l2285:
  1481  00190C  0EFC               	movlw	252
  1482  00190E  010F               	movlb	15	; () banked
  1483  001910  173F               	andwf	63,f,b	;volatile
  1484  001912  010F               	movlb	15	; () banked
  1485  001914  813F               	bsf	63,0,b	;volatile
  1486                           
  1487                           ; BSR set to: 15
  1488  001916  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  1489                           
  1490                           ; BSR set to: 15
  1491  00191A  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  1492                           
  1493                           ; BSR set to: 15
  1494  00191E  EE20 F003          	lfsr	2,3
  1495  001922  5001               	movf	RtccWriteTime@pTm,w,c
  1496  001924  26D9               	addwf	fsr2l,f,c
  1497  001926  5002               	movf	RtccWriteTime@pTm+1,w,c
  1498  001928  22DA               	addwfc	fsr2h,f,c
  1499  00192A  50DF               	movf	indf2,w,c
  1500  00192C  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  1501                           
  1502                           ; BSR set to: 15
  1503  00192E  0EFC               	movlw	252
  1504  001930  010F               	movlb	15	; () banked
  1505  001932  173F               	andwf	63,f,b	;volatile
  1506                           
  1507                           ; BSR set to: 15
  1508  001934  010F               	movlb	15	; () banked
  1509  001936  813F               	bsf	63,0,b	;volatile
  1510                           
  1511                           ; BSR set to: 15
  1512  001938  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  1513                           
  1514                           ; BSR set to: 15
  1515  00193C  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  1516                           
  1517                           ; BSR set to: 15
  1518  001940  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  1519                           
  1520                           ; BSR set to: 15
  1521  001944  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  1522                           
  1523                           ; BSR set to: 15
  1524  001948  5005               	movf	RtccWriteTime@wasOn,w,c
  1525  00194A  B4D8               	btfsc	status,2,c
  1526  00194C  D00D               	goto	l2317
  1527                           
  1528                           ; BSR set to: 15
  1529  00194E  010F               	movlb	15	; () banked
  1530  001950  8F3F               	bsf	63,7,b	;volatile
  1531                           
  1532                           ; BSR set to: 15
  1533  001952  5006               	movf	RtccWriteTime@wasAlrm,w,c
  1534  001954  B4D8               	btfsc	status,2,c
  1535  001956  D002               	goto	l2313
  1536                           
  1537                           ; BSR set to: 15
  1538  001958  8E91               	bsf	3985,7,c	;volatile
  1539  00195A  D000               	goto	l2313
  1540  00195C                     l2313:
  1541                           
  1542                           ; BSR set to: 15
  1543  00195C  5007               	movf	RtccWriteTime@wasWrEn,w,c
  1544  00195E  B4D8               	btfsc	status,2,c
  1545  001960  D009               	goto	l2321
  1546                           
  1547                           ; BSR set to: 15
  1548  001962  ECDB  F010         	call	_RtccWrOn	;wreg free
  1549  001966  D006               	goto	l2321
  1550  001968                     l2317:
  1551  001968  5007               	movf	RtccWriteTime@wasWrEn,w,c
  1552  00196A  A4D8               	btfss	status,2,c
  1553  00196C  D003               	goto	l2321
  1554  00196E  010F               	movlb	15	; () banked
  1555  001970  9B3F               	bcf	63,5,b	;volatile
  1556                           
  1557                           ; BSR set to: 15
  1558  001972  D000               	goto	l2321
  1559  001974                     l2321:
  1560  001974  5003               	movf	RtccWriteTime@di,w,c
  1561  001976  B4D8               	btfsc	status,2,c
  1562  001978  0012               	return	
  1563  00197A  8CF2               	bsf	intcon,6,c	;volatile
  1564  00197C  0012               	return	
  1565                           
  1566                           ;	Return value of _RtccWriteTime is never used
  1567  00197E  0012               	return		;funcret
  1568  001980                     __end_of_RtccWriteTime:
  1569                           	opt stack 0
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           prodl	equ	0xFF3
  1575                           intcon	equ	0xFF2
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1l	equ	0xFE1
  1580                           indf2	equ	0xFDF
  1581                           fsr2h	equ	0xFDA
  1582                           fsr2l	equ	0xFD9
  1583                           status	equ	0xFD8
  1584                           
  1585 ;; *************** function _RtccWriteDate *****************
  1586 ;; Defined at:
  1587 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;  pDt             2    0[COMRAM] PTR const struct .
  1590 ;;		 -> RtccDate(4), 
  1591 ;;  di              1    2[COMRAM] enum E7121
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  tempHourWDay    2   11[COMRAM] struct .
  1594 ;;  tempDayMonth    2    9[COMRAM] struct .
  1595 ;;  tempYear        2    6[COMRAM] struct .
  1596 ;;  wasWrEn         1    8[COMRAM] enum E7121
  1597 ;;  wasAlrm         1    5[COMRAM] enum E7121
  1598 ;;  wasOn           1    4[COMRAM] enum E7121
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      enum E7337
  1601 ;; Registers used:
  1602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1608 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1609 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1611 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1612 ;;Total ram usage:       13 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    1
  1615 ;; This function calls:
  1616 ;;		_RtccWrOn
  1617 ;; This function is called by:
  1618 ;;		_Write_RTC
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text6
  1623  00172E                     __ptext6:
  1624                           	opt stack 0
  1625  00172E                     _RtccWriteDate:
  1626                           	opt stack 27
  1627                           
  1628                           ;incstack = 0
  1629  00172E  0E00               	movlw	0
  1630  001730  6E06               	movwf	RtccWriteDate@wasAlrm,c
  1631  001732  EE20 F002          	lfsr	2,2
  1632  001736  5001               	movf	RtccWriteDate@pDt,w,c
  1633  001738  26D9               	addwf	fsr2l,f,c
  1634  00173A  5002               	movf	RtccWriteDate@pDt+1,w,c
  1635  00173C  22DA               	addwfc	fsr2h,f,c
  1636  00173E  0E13               	movlw	19
  1637  001740  60DF               	cpfslt	indf2,c
  1638  001742  0012               	return	
  1639  001744  EE20 F002          	lfsr	2,2
  1640  001748  5001               	movf	RtccWriteDate@pDt,w,c
  1641  00174A  26D9               	addwf	fsr2l,f,c
  1642  00174C  5002               	movf	RtccWriteDate@pDt+1,w,c
  1643  00174E  22DA               	addwfc	fsr2h,f,c
  1644  001750  50DF               	movf	indf2,w,c
  1645  001752  B4D8               	btfsc	status,2,c
  1646  001754  0012               	return	
  1647  001756  EE20 F001          	lfsr	2,1
  1648  00175A  5001               	movf	RtccWriteDate@pDt,w,c
  1649  00175C  26D9               	addwf	fsr2l,f,c
  1650  00175E  5002               	movf	RtccWriteDate@pDt+1,w,c
  1651  001760  22DA               	addwfc	fsr2h,f,c
  1652  001762  0E32               	movlw	50
  1653  001764  60DF               	cpfslt	indf2,c
  1654  001766  0012               	return	
  1655  001768  EE20 F001          	lfsr	2,1
  1656  00176C  5001               	movf	RtccWriteDate@pDt,w,c
  1657  00176E  26D9               	addwf	fsr2l,f,c
  1658  001770  5002               	movf	RtccWriteDate@pDt+1,w,c
  1659  001772  22DA               	addwfc	fsr2h,f,c
  1660  001774  50DF               	movf	indf2,w,c
  1661  001776  B4D8               	btfsc	status,2,c
  1662  001778  0012               	return	
  1663  00177A  EE20 F003          	lfsr	2,3
  1664  00177E  5001               	movf	RtccWriteDate@pDt,w,c
  1665  001780  26D9               	addwf	fsr2l,f,c
  1666  001782  5002               	movf	RtccWriteDate@pDt+1,w,c
  1667  001784  22DA               	addwfc	fsr2h,f,c
  1668  001786  0E99               	movlw	153
  1669  001788  64DF               	cpfsgt	indf2,c
  1670  00178A  D002               	goto	l2337
  1671  00178C  0012               	return	
  1672                           
  1673                           ;	Return value of _RtccWriteDate is never used
  1674  00178E  0012               	return	
  1675  001790                     l2337:
  1676  001790  EE20 F003          	lfsr	2,3
  1677  001794  5001               	movf	RtccWriteDate@pDt,w,c
  1678  001796  26D9               	addwf	fsr2l,f,c
  1679  001798  5002               	movf	RtccWriteDate@pDt+1,w,c
  1680  00179A  22DA               	addwfc	fsr2h,f,c
  1681  00179C  50DF               	movf	indf2,w,c
  1682  00179E  6E07               	movwf	RtccWriteDate@tempYear,c
  1683  0017A0  EE20 F001          	lfsr	2,1
  1684  0017A4  5001               	movf	RtccWriteDate@pDt,w,c
  1685  0017A6  26D9               	addwf	fsr2l,f,c
  1686  0017A8  5002               	movf	RtccWriteDate@pDt+1,w,c
  1687  0017AA  22DA               	addwfc	fsr2h,f,c
  1688  0017AC  50DF               	movf	indf2,w,c
  1689  0017AE  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  1690  0017B0  EE20 F002          	lfsr	2,2
  1691  0017B4  5001               	movf	RtccWriteDate@pDt,w,c
  1692  0017B6  26D9               	addwf	fsr2l,f,c
  1693  0017B8  5002               	movf	RtccWriteDate@pDt+1,w,c
  1694  0017BA  22DA               	addwfc	fsr2h,f,c
  1695  0017BC  50DF               	movf	indf2,w,c
  1696  0017BE  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  1697  0017C0  5003               	movf	RtccWriteDate@di,w,c
  1698  0017C2  B4D8               	btfsc	status,2,c
  1699  0017C4  D002               	goto	l2343
  1700  0017C6  9CF2               	bcf	intcon,6,c	;volatile
  1701  0017C8  D000               	goto	l2343
  1702  0017CA                     l2343:
  1703  0017CA  0E00               	movlw	0
  1704  0017CC  BB3F               	btfsc	63,5,b	;volatile
  1705  0017CE  0E01               	movlw	1
  1706  0017D0  6E09               	movwf	RtccWriteDate@wasWrEn,c
  1707  0017D2  5009               	movf	RtccWriteDate@wasWrEn,w,c
  1708  0017D4  A4D8               	btfss	status,2,c
  1709  0017D6  D003               	goto	l2347
  1710  0017D8  ECDB  F010         	call	_RtccWrOn	;wreg free
  1711  0017DC  D000               	goto	l2347
  1712  0017DE                     l2347:
  1713  0017DE  0E00               	movlw	0
  1714  0017E0  BF3F               	btfsc	63,7,b	;volatile
  1715  0017E2  0E01               	movlw	1
  1716  0017E4  6E05               	movwf	RtccWriteDate@wasOn,c
  1717  0017E6  5005               	movf	RtccWriteDate@wasOn,w,c
  1718  0017E8  B4D8               	btfsc	status,2,c
  1719  0017EA  D007               	goto	l2353
  1720  0017EC  0E00               	movlw	0
  1721  0017EE  BE91               	btfsc	3985,7,c	;volatile
  1722  0017F0  0E01               	movlw	1
  1723  0017F2  6E06               	movwf	RtccWriteDate@wasAlrm,c
  1724  0017F4  010F               	movlb	15	; () banked
  1725  0017F6  9F3F               	bcf	63,7,b	;volatile
  1726  0017F8  D000               	goto	l2353
  1727  0017FA                     l2353:
  1728  0017FA  0EFC               	movlw	252
  1729  0017FC  010F               	movlb	15	; () banked
  1730  0017FE  173F               	andwf	63,f,b	;volatile
  1731  001800  010F               	movlb	15	; () banked
  1732  001802  813F               	bsf	63,0,b	;volatile
  1733                           
  1734                           ; BSR set to: 15
  1735  001804  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  1736                           
  1737                           ; BSR set to: 15
  1738  001808  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  1739                           
  1740                           ; BSR set to: 15
  1741  00180C  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  1742  001810  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  1743  001814  50DF               	movf	indf2,w,c
  1744  001816  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  1745                           
  1746                           ; BSR set to: 15
  1747  001818  0EFC               	movlw	252
  1748  00181A  010F               	movlb	15	; () banked
  1749  00181C  173F               	andwf	63,f,b	;volatile
  1750                           
  1751                           ; BSR set to: 15
  1752  00181E  0E03               	movlw	3
  1753  001820  010F               	movlb	15	; () banked
  1754  001822  133F               	iorwf	63,f,b	;volatile
  1755                           
  1756                           ; BSR set to: 15
  1757  001824  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  1758                           
  1759                           ; BSR set to: 15
  1760  001828  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  1761                           
  1762                           ; BSR set to: 15
  1763  00182C  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  1764                           
  1765                           ; BSR set to: 15
  1766  001830  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  1767                           
  1768                           ; BSR set to: 15
  1769  001834  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  1770                           
  1771                           ; BSR set to: 15
  1772  001838  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  1773                           
  1774                           ; BSR set to: 15
  1775  00183C  5005               	movf	RtccWriteDate@wasOn,w,c
  1776  00183E  B4D8               	btfsc	status,2,c
  1777  001840  D00D               	goto	l2389
  1778                           
  1779                           ; BSR set to: 15
  1780  001842  010F               	movlb	15	; () banked
  1781  001844  8F3F               	bsf	63,7,b	;volatile
  1782                           
  1783                           ; BSR set to: 15
  1784  001846  5006               	movf	RtccWriteDate@wasAlrm,w,c
  1785  001848  B4D8               	btfsc	status,2,c
  1786  00184A  D002               	goto	l2385
  1787                           
  1788                           ; BSR set to: 15
  1789  00184C  8E91               	bsf	3985,7,c	;volatile
  1790  00184E  D000               	goto	l2385
  1791  001850                     l2385:
  1792                           
  1793                           ; BSR set to: 15
  1794  001850  5009               	movf	RtccWriteDate@wasWrEn,w,c
  1795  001852  B4D8               	btfsc	status,2,c
  1796  001854  D009               	goto	l2393
  1797                           
  1798                           ; BSR set to: 15
  1799  001856  ECDB  F010         	call	_RtccWrOn	;wreg free
  1800  00185A  D006               	goto	l2393
  1801  00185C                     l2389:
  1802  00185C  5009               	movf	RtccWriteDate@wasWrEn,w,c
  1803  00185E  A4D8               	btfss	status,2,c
  1804  001860  D003               	goto	l2393
  1805  001862  010F               	movlb	15	; () banked
  1806  001864  9B3F               	bcf	63,5,b	;volatile
  1807                           
  1808                           ; BSR set to: 15
  1809  001866  D000               	goto	l2393
  1810  001868                     l2393:
  1811  001868  5003               	movf	RtccWriteDate@di,w,c
  1812  00186A  B4D8               	btfsc	status,2,c
  1813  00186C  0012               	return	
  1814  00186E  9CF2               	bcf	intcon,6,c	;volatile
  1815  001870  0012               	return	
  1816                           
  1817                           ;	Return value of _RtccWriteDate is never used
  1818  001872  0012               	return		;funcret
  1819  001874                     __end_of_RtccWriteDate:
  1820                           	opt stack 0
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodl	equ	0xFF3
  1826                           intcon	equ	0xFF2
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           postdec1	equ	0xFE5
  1830                           fsr1l	equ	0xFE1
  1831                           indf2	equ	0xFDF
  1832                           fsr2h	equ	0xFDA
  1833                           fsr2l	equ	0xFD9
  1834                           status	equ	0xFD8
  1835                           
  1836 ;; *************** function _RtccWrOn *****************
  1837 ;; Defined at:
  1838 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  data            2    0        unsigned int 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;		None               void
  1845 ;; Registers used:
  1846 ;;		wreg, status,2
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1856 ;;Total ram usage:        0 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_Write_RTC
  1862 ;;		_RtccWriteDate
  1863 ;;		_RtccWriteTime
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text7
  1868  0021B6                     __ptext7:
  1869                           	opt stack 0
  1870  0021B6                     _RtccWrOn:
  1871                           	opt stack 27
  1872                           
  1873                           ;incstack = 0
  1874  0021B6  9CF2               	bcf	intcon,6,c	;volatile
  1875  0021B8  0E55               	movlw	85
  1876  0021BA  6EA7               	movwf	4007,c	;volatile
  1877  0021BC  0EAA               	movlw	170
  1878  0021BE  6EA7               	movwf	4007,c	;volatile
  1879  0021C0  010F               	movlb	15	; () banked
  1880  0021C2  8B3F               	bsf	63,5,b	;volatile
  1881                           
  1882                           ; BSR set to: 15
  1883  0021C4  8CF2               	bsf	intcon,6,c	;volatile
  1884                           
  1885                           ; BSR set to: 15
  1886  0021C6  0012               	return		;funcret
  1887  0021C8                     __end_of_RtccWrOn:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           prodl	equ	0xFF3
  1894                           intcon	equ	0xFF2
  1895                           postinc0	equ	0xFEE
  1896                           wreg	equ	0xFE8
  1897                           postdec1	equ	0xFE5
  1898                           fsr1l	equ	0xFE1
  1899                           indf2	equ	0xFDF
  1900                           fsr2h	equ	0xFDA
  1901                           fsr2l	equ	0xFD9
  1902                           status	equ	0xFD8
  1903                           
  1904 ;; *************** function _keyboard_control *****************
  1905 ;; Defined at:
  1906 ;;		line 245 in file "main.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;		None
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;		None
  1911 ;; Return value:  Size  Location     Type
  1912 ;;		None               void
  1913 ;; Registers used:
  1914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1923 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1924 ;;Total ram usage:        1 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; Hardware stack levels required when called:    8
  1927 ;; This function calls:
  1928 ;;		_button_A
  1929 ;;		_button_B
  1930 ;;		_button_C
  1931 ;;		_button_D
  1932 ;;		_button_asterisk
  1933 ;;		_button_hash
  1934 ;;		_lcd_putrs
  1935 ;;		_sprintf
  1936 ;; This function is called by:
  1937 ;;		_main
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text8
  1942  000F80                     __ptext8:
  1943                           	opt stack 0
  1944  000F80                     _keyboard_control:
  1945                           	opt stack 22
  1946                           
  1947                           ;main.c: 247: LATAbits.LATA0=1;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=0;
  1948                           
  1949                           ; BSR set to: 15
  1950                           ;incstack = 0
  1951  000F80  8089               	bsf	3977,0,c	;volatile
  1952  000F82  9289               	bcf	3977,1,c	;volatile
  1953  000F84  9489               	bcf	3977,2,c	;volatile
  1954  000F86  9689               	bcf	3977,3,c	;volatile
  1955                           
  1956                           ;main.c: 248: {
  1957                           ;main.c: 249: if (PORTAbits.RA5==1){key=1;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA5==1){};}
  1958  000F88  AA80               	btfss	3968,5,c	;volatile
  1959  000F8A  D018               	goto	l221
  1960  000F8C  0E01               	movlw	1
  1961  000F8E  6E3F               	movwf	_key,c
  1962  000F90  0E7C               	movlw	low _buffer1
  1963  000F92  6E0D               	movwf	sprintf@sp,c
  1964  000F94  0E00               	movlw	high _buffer1
  1965  000F96  6E0E               	movwf	sprintf@sp+1,c
  1966  000F98  0E63               	movlw	low STR_34
  1967  000F9A  6E0F               	movwf	sprintf@f,c
  1968  000F9C  0E0F               	movlw	high STR_34
  1969  000F9E  6E10               	movwf	sprintf@f+1,c
  1970  000FA0  C03F  F011         	movff	_key,?_sprintf+4
  1971  000FA4  6A12               	clrf	?_sprintf+5,c
  1972  000FA6  EC15  F009         	call	_sprintf	;wreg free
  1973  000FAA  0E7C               	movlw	low _buffer1
  1974  000FAC  6E09               	movwf	lcd_putrs@ptr,c
  1975  000FAE  0E00               	movlw	high _buffer1
  1976  000FB0  6E0A               	movwf	lcd_putrs@ptr+1,c
  1977  000FB2  ECB8  F00F         	call	_lcd_putrs	;wreg free
  1978  000FB6  D000               	goto	l222
  1979  000FB8                     l222:
  1980  000FB8  BA80               	btfsc	3968,5,c	;volatile
  1981  000FBA  D7FE               	goto	l222
  1982  000FBC                     l221:
  1983                           
  1984                           ;main.c: 250: if (PORTAbits.RA7==1){key=2;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA7==1){};}
  1985  000FBC  AE80               	btfss	3968,7,c	;volatile
  1986  000FBE  D018               	goto	l225
  1987  000FC0  0E02               	movlw	2
  1988  000FC2  6E3F               	movwf	_key,c
  1989  000FC4  0E7C               	movlw	low _buffer1
  1990  000FC6  6E0D               	movwf	sprintf@sp,c
  1991  000FC8  0E00               	movlw	high _buffer1
  1992  000FCA  6E0E               	movwf	sprintf@sp+1,c
  1993  000FCC  0E63               	movlw	low STR_34
  1994  000FCE  6E0F               	movwf	sprintf@f,c
  1995  000FD0  0E0F               	movlw	high STR_34
  1996  000FD2  6E10               	movwf	sprintf@f+1,c
  1997  000FD4  C03F  F011         	movff	_key,?_sprintf+4
  1998  000FD8  6A12               	clrf	?_sprintf+5,c
  1999  000FDA  EC15  F009         	call	_sprintf	;wreg free
  2000  000FDE  0E7C               	movlw	low _buffer1
  2001  000FE0  6E09               	movwf	lcd_putrs@ptr,c
  2002  000FE2  0E00               	movlw	high _buffer1
  2003  000FE4  6E0A               	movwf	lcd_putrs@ptr+1,c
  2004  000FE6  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2005  000FEA  D000               	goto	l226
  2006  000FEC                     l226:
  2007  000FEC  BE80               	btfsc	3968,7,c	;volatile
  2008  000FEE  D7FE               	goto	l226
  2009  000FF0                     l225:
  2010                           
  2011                           ;main.c: 251: if (PORTAbits.RA6==1){key=3;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA6==1){};}
  2012  000FF0  AC80               	btfss	3968,6,c	;volatile
  2013  000FF2  D018               	goto	l229
  2014  000FF4  0E03               	movlw	3
  2015  000FF6  6E3F               	movwf	_key,c
  2016  000FF8  0E7C               	movlw	low _buffer1
  2017  000FFA  6E0D               	movwf	sprintf@sp,c
  2018  000FFC  0E00               	movlw	high _buffer1
  2019  000FFE  6E0E               	movwf	sprintf@sp+1,c
  2020  001000  0E63               	movlw	low STR_34
  2021  001002  6E0F               	movwf	sprintf@f,c
  2022  001004  0E0F               	movlw	high STR_34
  2023  001006  6E10               	movwf	sprintf@f+1,c
  2024  001008  C03F  F011         	movff	_key,?_sprintf+4
  2025  00100C  6A12               	clrf	?_sprintf+5,c
  2026  00100E  EC15  F009         	call	_sprintf	;wreg free
  2027  001012  0E7C               	movlw	low _buffer1
  2028  001014  6E09               	movwf	lcd_putrs@ptr,c
  2029  001016  0E00               	movlw	high _buffer1
  2030  001018  6E0A               	movwf	lcd_putrs@ptr+1,c
  2031  00101A  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2032  00101E  D000               	goto	l230
  2033  001020                     l230:
  2034  001020  BC80               	btfsc	3968,6,c	;volatile
  2035  001022  D7FE               	goto	l230
  2036  001024                     l229:
  2037                           
  2038                           ;main.c: 252: if (PORTCbits.RC2==1){key=11;button_A();while(PORTCbits.RC2==1){};}
  2039  001024  A482               	btfss	3970,2,c	;volatile
  2040  001026  D007               	goto	l233
  2041  001028  0E0B               	movlw	11
  2042  00102A  6E3F               	movwf	_key,c
  2043  00102C  EC50  F010         	call	_button_A	;wreg free
  2044  001030  D000               	goto	l234
  2045  001032                     l234:
  2046  001032  B482               	btfsc	3970,2,c	;volatile
  2047  001034  D7FE               	goto	l234
  2048  001036                     l233:
  2049                           
  2050                           ;main.c: 253: }
  2051                           ;main.c: 255: LATAbits.LATA0=0;LATAbits.LATA1=1;LATAbits.LATA2=0;LATAbits.LATA3=0;
  2052  001036  9089               	bcf	3977,0,c	;volatile
  2053  001038  8289               	bsf	3977,1,c	;volatile
  2054  00103A  9489               	bcf	3977,2,c	;volatile
  2055  00103C  9689               	bcf	3977,3,c	;volatile
  2056                           
  2057                           ;main.c: 256: {
  2058                           ;main.c: 257: if (PORTAbits.RA5==1){key=4;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA5==1){};}
  2059  00103E  AA80               	btfss	3968,5,c	;volatile
  2060  001040  D018               	goto	l237
  2061  001042  0E04               	movlw	4
  2062  001044  6E3F               	movwf	_key,c
  2063  001046  0E7C               	movlw	low _buffer1
  2064  001048  6E0D               	movwf	sprintf@sp,c
  2065  00104A  0E00               	movlw	high _buffer1
  2066  00104C  6E0E               	movwf	sprintf@sp+1,c
  2067  00104E  0E63               	movlw	low STR_34
  2068  001050  6E0F               	movwf	sprintf@f,c
  2069  001052  0E0F               	movlw	high STR_34
  2070  001054  6E10               	movwf	sprintf@f+1,c
  2071  001056  C03F  F011         	movff	_key,?_sprintf+4
  2072  00105A  6A12               	clrf	?_sprintf+5,c
  2073  00105C  EC15  F009         	call	_sprintf	;wreg free
  2074  001060  0E7C               	movlw	low _buffer1
  2075  001062  6E09               	movwf	lcd_putrs@ptr,c
  2076  001064  0E00               	movlw	high _buffer1
  2077  001066  6E0A               	movwf	lcd_putrs@ptr+1,c
  2078  001068  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2079  00106C  D000               	goto	l238
  2080  00106E                     l238:
  2081  00106E  BA80               	btfsc	3968,5,c	;volatile
  2082  001070  D7FE               	goto	l238
  2083  001072                     l237:
  2084                           
  2085                           ;main.c: 258: if (PORTAbits.RA7==1){key=5;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA7==1){};}
  2086  001072  AE80               	btfss	3968,7,c	;volatile
  2087  001074  D018               	goto	l241
  2088  001076  0E05               	movlw	5
  2089  001078  6E3F               	movwf	_key,c
  2090  00107A  0E7C               	movlw	low _buffer1
  2091  00107C  6E0D               	movwf	sprintf@sp,c
  2092  00107E  0E00               	movlw	high _buffer1
  2093  001080  6E0E               	movwf	sprintf@sp+1,c
  2094  001082  0E63               	movlw	low STR_34
  2095  001084  6E0F               	movwf	sprintf@f,c
  2096  001086  0E0F               	movlw	high STR_34
  2097  001088  6E10               	movwf	sprintf@f+1,c
  2098  00108A  C03F  F011         	movff	_key,?_sprintf+4
  2099  00108E  6A12               	clrf	?_sprintf+5,c
  2100  001090  EC15  F009         	call	_sprintf	;wreg free
  2101  001094  0E7C               	movlw	low _buffer1
  2102  001096  6E09               	movwf	lcd_putrs@ptr,c
  2103  001098  0E00               	movlw	high _buffer1
  2104  00109A  6E0A               	movwf	lcd_putrs@ptr+1,c
  2105  00109C  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2106  0010A0  D000               	goto	l242
  2107  0010A2                     l242:
  2108  0010A2  BE80               	btfsc	3968,7,c	;volatile
  2109  0010A4  D7FE               	goto	l242
  2110  0010A6                     l241:
  2111                           
  2112                           ;main.c: 259: if (PORTAbits.RA6==1){key=6;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA6==1){};}
  2113  0010A6  AC80               	btfss	3968,6,c	;volatile
  2114  0010A8  D018               	goto	l245
  2115  0010AA  0E06               	movlw	6
  2116  0010AC  6E3F               	movwf	_key,c
  2117  0010AE  0E7C               	movlw	low _buffer1
  2118  0010B0  6E0D               	movwf	sprintf@sp,c
  2119  0010B2  0E00               	movlw	high _buffer1
  2120  0010B4  6E0E               	movwf	sprintf@sp+1,c
  2121  0010B6  0E63               	movlw	low STR_34
  2122  0010B8  6E0F               	movwf	sprintf@f,c
  2123  0010BA  0E0F               	movlw	high STR_34
  2124  0010BC  6E10               	movwf	sprintf@f+1,c
  2125  0010BE  C03F  F011         	movff	_key,?_sprintf+4
  2126  0010C2  6A12               	clrf	?_sprintf+5,c
  2127  0010C4  EC15  F009         	call	_sprintf	;wreg free
  2128  0010C8  0E7C               	movlw	low _buffer1
  2129  0010CA  6E09               	movwf	lcd_putrs@ptr,c
  2130  0010CC  0E00               	movlw	high _buffer1
  2131  0010CE  6E0A               	movwf	lcd_putrs@ptr+1,c
  2132  0010D0  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2133  0010D4  D000               	goto	l246
  2134  0010D6                     l246:
  2135  0010D6  BC80               	btfsc	3968,6,c	;volatile
  2136  0010D8  D7FE               	goto	l246
  2137  0010DA                     l245:
  2138                           
  2139                           ;main.c: 260: if (PORTCbits.RC2==1){key=12;button_B();while(PORTCbits.RC2==1){};}
  2140  0010DA  A482               	btfss	3970,2,c	;volatile
  2141  0010DC  D007               	goto	l249
  2142  0010DE  0E0C               	movlw	12
  2143  0010E0  6E3F               	movwf	_key,c
  2144  0010E2  ECA2  F00E         	call	_button_B	;wreg free
  2145  0010E6  D000               	goto	l250
  2146  0010E8                     l250:
  2147  0010E8  B482               	btfsc	3970,2,c	;volatile
  2148  0010EA  D7FE               	goto	l250
  2149  0010EC                     l249:
  2150                           
  2151                           ;main.c: 261: }
  2152                           ;main.c: 263: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=1;LATAbits.LATA3=0;
  2153  0010EC  9089               	bcf	3977,0,c	;volatile
  2154  0010EE  9289               	bcf	3977,1,c	;volatile
  2155  0010F0  8489               	bsf	3977,2,c	;volatile
  2156  0010F2  9689               	bcf	3977,3,c	;volatile
  2157                           
  2158                           ;main.c: 264: {
  2159                           ;main.c: 265: if (PORTAbits.RA5==1){key=7;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA5==1){};}
  2160  0010F4  AA80               	btfss	3968,5,c	;volatile
  2161  0010F6  D018               	goto	l253
  2162  0010F8  0E07               	movlw	7
  2163  0010FA  6E3F               	movwf	_key,c
  2164  0010FC  0E7C               	movlw	low _buffer1
  2165  0010FE  6E0D               	movwf	sprintf@sp,c
  2166  001100  0E00               	movlw	high _buffer1
  2167  001102  6E0E               	movwf	sprintf@sp+1,c
  2168  001104  0E63               	movlw	low STR_34
  2169  001106  6E0F               	movwf	sprintf@f,c
  2170  001108  0E0F               	movlw	high STR_34
  2171  00110A  6E10               	movwf	sprintf@f+1,c
  2172  00110C  C03F  F011         	movff	_key,?_sprintf+4
  2173  001110  6A12               	clrf	?_sprintf+5,c
  2174  001112  EC15  F009         	call	_sprintf	;wreg free
  2175  001116  0E7C               	movlw	low _buffer1
  2176  001118  6E09               	movwf	lcd_putrs@ptr,c
  2177  00111A  0E00               	movlw	high _buffer1
  2178  00111C  6E0A               	movwf	lcd_putrs@ptr+1,c
  2179  00111E  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2180  001122  D000               	goto	l254
  2181  001124                     l254:
  2182  001124  BA80               	btfsc	3968,5,c	;volatile
  2183  001126  D7FE               	goto	l254
  2184  001128                     l253:
  2185                           
  2186                           ;main.c: 266: if (PORTAbits.RA7==1){key=8;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA7==1){};}
  2187  001128  AE80               	btfss	3968,7,c	;volatile
  2188  00112A  D018               	goto	l257
  2189  00112C  0E08               	movlw	8
  2190  00112E  6E3F               	movwf	_key,c
  2191  001130  0E7C               	movlw	low _buffer1
  2192  001132  6E0D               	movwf	sprintf@sp,c
  2193  001134  0E00               	movlw	high _buffer1
  2194  001136  6E0E               	movwf	sprintf@sp+1,c
  2195  001138  0E63               	movlw	low STR_34
  2196  00113A  6E0F               	movwf	sprintf@f,c
  2197  00113C  0E0F               	movlw	high STR_34
  2198  00113E  6E10               	movwf	sprintf@f+1,c
  2199  001140  C03F  F011         	movff	_key,?_sprintf+4
  2200  001144  6A12               	clrf	?_sprintf+5,c
  2201  001146  EC15  F009         	call	_sprintf	;wreg free
  2202  00114A  0E7C               	movlw	low _buffer1
  2203  00114C  6E09               	movwf	lcd_putrs@ptr,c
  2204  00114E  0E00               	movlw	high _buffer1
  2205  001150  6E0A               	movwf	lcd_putrs@ptr+1,c
  2206  001152  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2207  001156  D000               	goto	l258
  2208  001158                     l258:
  2209  001158  BE80               	btfsc	3968,7,c	;volatile
  2210  00115A  D7FE               	goto	l258
  2211  00115C                     l257:
  2212                           
  2213                           ;main.c: 267: if (PORTAbits.RA6==1){key=9;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA6==1){};}
  2214  00115C  AC80               	btfss	3968,6,c	;volatile
  2215  00115E  D018               	goto	l261
  2216  001160  0E09               	movlw	9
  2217  001162  6E3F               	movwf	_key,c
  2218  001164  0E7C               	movlw	low _buffer1
  2219  001166  6E0D               	movwf	sprintf@sp,c
  2220  001168  0E00               	movlw	high _buffer1
  2221  00116A  6E0E               	movwf	sprintf@sp+1,c
  2222  00116C  0E63               	movlw	low STR_34
  2223  00116E  6E0F               	movwf	sprintf@f,c
  2224  001170  0E0F               	movlw	high STR_34
  2225  001172  6E10               	movwf	sprintf@f+1,c
  2226  001174  C03F  F011         	movff	_key,?_sprintf+4
  2227  001178  6A12               	clrf	?_sprintf+5,c
  2228  00117A  EC15  F009         	call	_sprintf	;wreg free
  2229  00117E  0E7C               	movlw	low _buffer1
  2230  001180  6E09               	movwf	lcd_putrs@ptr,c
  2231  001182  0E00               	movlw	high _buffer1
  2232  001184  6E0A               	movwf	lcd_putrs@ptr+1,c
  2233  001186  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2234  00118A  D000               	goto	l262
  2235  00118C                     l262:
  2236  00118C  BC80               	btfsc	3968,6,c	;volatile
  2237  00118E  D7FE               	goto	l262
  2238  001190                     l261:
  2239                           
  2240                           ;main.c: 268: if (PORTCbits.RC2==1){key=13;button_C();while(PORTCbits.RC2==1){};}
  2241  001190  A482               	btfss	3970,2,c	;volatile
  2242  001192  D007               	goto	l265
  2243  001194  0E0D               	movlw	13
  2244  001196  6E3F               	movwf	_key,c
  2245  001198  EC0B  F011         	call	_button_C	;wreg free
  2246  00119C  D000               	goto	l266
  2247  00119E                     l266:
  2248  00119E  B482               	btfsc	3970,2,c	;volatile
  2249  0011A0  D7FE               	goto	l266
  2250  0011A2                     l265:
  2251                           
  2252                           ;main.c: 269: }
  2253                           ;main.c: 271: LATAbits.LATA0=0;LATAbits.LATA1=0;LATAbits.LATA2=0;LATAbits.LATA3=1;
  2254  0011A2  9089               	bcf	3977,0,c	;volatile
  2255  0011A4  9289               	bcf	3977,1,c	;volatile
  2256  0011A6  9489               	bcf	3977,2,c	;volatile
  2257  0011A8  8689               	bsf	3977,3,c	;volatile
  2258                           
  2259                           ;main.c: 272: {
  2260                           ;main.c: 273: if (PORTAbits.RA5==1){key=14;button_asterisk();while(PORTAbits.RA5==1){};}
  2261  0011AA  AA80               	btfss	3968,5,c	;volatile
  2262  0011AC  D007               	goto	l269
  2263  0011AE  0E0E               	movlw	14
  2264  0011B0  6E3F               	movwf	_key,c
  2265  0011B2  EC04  F011         	call	_button_asterisk	;wreg free
  2266  0011B6  D000               	goto	l270
  2267  0011B8                     l270:
  2268  0011B8  BA80               	btfsc	3968,5,c	;volatile
  2269  0011BA  D7FE               	goto	l270
  2270  0011BC                     l269:
  2271                           
  2272                           ;main.c: 274: if (PORTAbits.RA7==1){key=0;sprintf(buffer1,"%01u",key);lcd_putrs(buffer1)
      +                          ;while(PORTAbits.RA7==1){};}
  2273  0011BC  AE80               	btfss	3968,7,c	;volatile
  2274  0011BE  D018               	goto	l273
  2275  0011C0  0E00               	movlw	0
  2276  0011C2  6E3F               	movwf	_key,c
  2277  0011C4  0E7C               	movlw	low _buffer1
  2278  0011C6  6E0D               	movwf	sprintf@sp,c
  2279  0011C8  0E00               	movlw	high _buffer1
  2280  0011CA  6E0E               	movwf	sprintf@sp+1,c
  2281  0011CC  0E63               	movlw	low STR_34
  2282  0011CE  6E0F               	movwf	sprintf@f,c
  2283  0011D0  0E0F               	movlw	high STR_34
  2284  0011D2  6E10               	movwf	sprintf@f+1,c
  2285  0011D4  C03F  F011         	movff	_key,?_sprintf+4
  2286  0011D8  6A12               	clrf	?_sprintf+5,c
  2287  0011DA  EC15  F009         	call	_sprintf	;wreg free
  2288  0011DE  0E7C               	movlw	low _buffer1
  2289  0011E0  6E09               	movwf	lcd_putrs@ptr,c
  2290  0011E2  0E00               	movlw	high _buffer1
  2291  0011E4  6E0A               	movwf	lcd_putrs@ptr+1,c
  2292  0011E6  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2293  0011EA  D000               	goto	l274
  2294  0011EC                     l274:
  2295  0011EC  BE80               	btfsc	3968,7,c	;volatile
  2296  0011EE  D7FE               	goto	l274
  2297  0011F0                     l273:
  2298                           
  2299                           ;main.c: 275: if (PORTAbits.RA6==1){key=15;button_hash();while(PORTAbits.RA6==1){};}
  2300  0011F0  AC80               	btfss	3968,6,c	;volatile
  2301  0011F2  D007               	goto	l277
  2302  0011F4  0E0F               	movlw	15
  2303  0011F6  6E3F               	movwf	_key,c
  2304  0011F8  ECFD  F010         	call	_button_hash	;wreg free
  2305  0011FC  D000               	goto	l278
  2306  0011FE                     l278:
  2307  0011FE  BC80               	btfsc	3968,6,c	;volatile
  2308  001200  D7FE               	goto	l278
  2309  001202                     l277:
  2310                           
  2311                           ;main.c: 276: if (PORTCbits.RC2==1){key=16;button_D();while(PORTCbits.RC2==1){};}
  2312  001202  A482               	btfss	3970,2,c	;volatile
  2313  001204  D009               	goto	l2777
  2314  001206  0E10               	movlw	16
  2315  001208  6E3F               	movwf	_key,c
  2316  00120A  ECC6  F010         	call	_button_D	;wreg free
  2317  00120E  D000               	goto	l282
  2318  001210                     l282:
  2319  001210  A482               	btfss	3970,2,c	;volatile
  2320  001212  D002               	goto	l2777
  2321  001214  D7FD               	goto	l282
  2322  001216  D000               	goto	l2777
  2323  001218                     l2777:
  2324                           
  2325                           ;main.c: 277: }
  2326                           ;main.c: 279: _delay((unsigned long)((98)*(8000000/4000.0)));
  2327  001218  0EFF               	movlw	255
  2328  00121A  6E24               	movwf	??_keyboard_control& (0+255),c
  2329  00121C  0E8A               	movlw	138
  2330  00121E                     u2117:
  2331  00121E  2EE8               	decfsz	wreg,f,c
  2332  001220  D7FE               	goto	u2117
  2333  001222  2E24               	decfsz	??_keyboard_control& (0+255),f,c
  2334  001224  D7FC               	goto	u2117
  2335  001226  D000               	nop2	
  2336  001228  0012               	return		;funcret
  2337  00122A                     __end_of_keyboard_control:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           prodl	equ	0xFF3
  2344                           intcon	equ	0xFF2
  2345                           postinc0	equ	0xFEE
  2346                           wreg	equ	0xFE8
  2347                           postdec1	equ	0xFE5
  2348                           fsr1l	equ	0xFE1
  2349                           indf2	equ	0xFDF
  2350                           fsr2h	equ	0xFDA
  2351                           fsr2l	equ	0xFD9
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _button_hash *****************
  2355 ;; Defined at:
  2356 ;;		line 240 in file "main.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;		None
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;		None
  2361 ;; Return value:  Size  Location     Type
  2362 ;;		None               void
  2363 ;; Registers used:
  2364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;Total ram usage:        0 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    5
  2377 ;; This function calls:
  2378 ;;		_lcd_putrs
  2379 ;; This function is called by:
  2380 ;;		_keyboard_control
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           	psect	text9
  2385  0021FA                     __ptext9:
  2386                           	opt stack 0
  2387  0021FA                     _button_hash:
  2388                           	opt stack 24
  2389                           
  2390                           ;main.c: 241: lcd_putrs("#");
  2391                           
  2392                           ;incstack = 0
  2393  0021FA  0E78               	movlw	low STR_33
  2394  0021FC  6E09               	movwf	lcd_putrs@ptr,c
  2395  0021FE  0E0F               	movlw	high STR_33
  2396  002200  6E0A               	movwf	lcd_putrs@ptr+1,c
  2397  002202  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2398  002206  0012               	return		;funcret
  2399  002208                     __end_of_button_hash:
  2400                           	opt stack 0
  2401                           tblptru	equ	0xFF8
  2402                           tblptrh	equ	0xFF7
  2403                           tblptrl	equ	0xFF6
  2404                           tablat	equ	0xFF5
  2405                           prodl	equ	0xFF3
  2406                           intcon	equ	0xFF2
  2407                           postinc0	equ	0xFEE
  2408                           wreg	equ	0xFE8
  2409                           postdec1	equ	0xFE5
  2410                           fsr1l	equ	0xFE1
  2411                           indf2	equ	0xFDF
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function _button_asterisk *****************
  2417 ;; Defined at:
  2418 ;;		line 236 in file "main.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;		None               void
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2436 ;;Total ram usage:        0 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    5
  2439 ;; This function calls:
  2440 ;;		_lcd_putrs
  2441 ;; This function is called by:
  2442 ;;		_keyboard_control
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text10
  2447  002208                     __ptext10:
  2448                           	opt stack 0
  2449  002208                     _button_asterisk:
  2450                           	opt stack 24
  2451                           
  2452                           ;main.c: 237: lcd_putrs("*");
  2453                           
  2454                           ;incstack = 0
  2455  002208  0E7A               	movlw	low STR_32
  2456  00220A  6E09               	movwf	lcd_putrs@ptr,c
  2457  00220C  0E0F               	movlw	high STR_32
  2458  00220E  6E0A               	movwf	lcd_putrs@ptr+1,c
  2459  002210  ECB8  F00F         	call	_lcd_putrs	;wreg free
  2460  002214  0012               	return		;funcret
  2461  002216                     __end_of_button_asterisk:
  2462                           	opt stack 0
  2463                           tblptru	equ	0xFF8
  2464                           tblptrh	equ	0xFF7
  2465                           tblptrl	equ	0xFF6
  2466                           tablat	equ	0xFF5
  2467                           prodl	equ	0xFF3
  2468                           intcon	equ	0xFF2
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postdec1	equ	0xFE5
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           fsr2h	equ	0xFDA
  2475                           fsr2l	equ	0xFD9
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function _button_D *****************
  2479 ;; Defined at:
  2480 ;;		line 230 in file "main.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;		None
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;		None
  2485 ;; Return value:  Size  Location     Type
  2486 ;;		None               void
  2487 ;; Registers used:
  2488 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2498 ;;Total ram usage:        0 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    7
  2501 ;; This function calls:
  2502 ;;		_home
  2503 ;; This function is called by:
  2504 ;;		_keyboard_control
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text11
  2509  00218C                     __ptext11:
  2510                           	opt stack 0
  2511  00218C                     _button_D:
  2512                           	opt stack 22
  2513                           
  2514                           ;main.c: 231: home();
  2515                           
  2516                           ;incstack = 0
  2517  00218C  ECC0  F00C         	call	_home	;wreg free
  2518                           
  2519                           ;main.c: 232: menu = 0;
  2520  002190  0E00               	movlw	0
  2521  002192  6E32               	movwf	_menu+1,c
  2522  002194  0E00               	movlw	0
  2523  002196  6E31               	movwf	_menu,c
  2524                           
  2525                           ;main.c: 233: submenu = 0;
  2526  002198  0E00               	movlw	0
  2527  00219A  6E3E               	movwf	_submenu+1,c
  2528  00219C  0E00               	movlw	0
  2529  00219E  6E3D               	movwf	_submenu,c
  2530  0021A0  0012               	return		;funcret
  2531  0021A2                     __end_of_button_D:
  2532                           	opt stack 0
  2533                           tblptru	equ	0xFF8
  2534                           tblptrh	equ	0xFF7
  2535                           tblptrl	equ	0xFF6
  2536                           tablat	equ	0xFF5
  2537                           prodl	equ	0xFF3
  2538                           intcon	equ	0xFF2
  2539                           postinc0	equ	0xFEE
  2540                           wreg	equ	0xFE8
  2541                           postdec1	equ	0xFE5
  2542                           fsr1l	equ	0xFE1
  2543                           indf2	equ	0xFDF
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function _home *****************
  2549 ;; Defined at:
  2550 ;;		line 80 in file "main.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;		None
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;		None
  2555 ;; Return value:  Size  Location     Type
  2556 ;;		None               void
  2557 ;; Registers used:
  2558 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 0/0
  2561 ;;		On exit  : 0/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2568 ;;Total ram usage:        0 bytes
  2569 ;; Hardware stack levels used:    1
  2570 ;; Hardware stack levels required when called:    6
  2571 ;; This function calls:
  2572 ;;		_lcd_init
  2573 ;;		_lcd_write
  2574 ;;		_sprintf
  2575 ;; This function is called by:
  2576 ;;		_button_D
  2577 ;;		_main
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text12
  2582  001980                     __ptext12:
  2583                           	opt stack 0
  2584  001980                     _home:
  2585                           	opt stack 22
  2586                           
  2587                           ;main.c: 81: lcd_init();
  2588                           
  2589                           ;incstack = 0
  2590  001980  ECB4  F00D         	call	_lcd_init	;wreg free
  2591                           
  2592                           ;main.c: 82: lcd_write(1,1,"X28");
  2593  001984  0E00               	movlw	0
  2594  001986  6E0C               	movwf	lcd_write@column+1,c
  2595  001988  0E01               	movlw	1
  2596  00198A  6E0B               	movwf	lcd_write@column,c
  2597  00198C  0E00               	movlw	0
  2598  00198E  6E0E               	movwf	lcd_write@row+1,c
  2599  001990  0E01               	movlw	1
  2600  001992  6E0D               	movwf	lcd_write@row,c
  2601  001994  0E68               	movlw	low STR_1
  2602  001996  6E0F               	movwf	lcd_write@string,c
  2603  001998  0E0F               	movlw	high STR_1
  2604  00199A  6E10               	movwf	lcd_write@string+1,c
  2605  00199C  ECBA  F010         	call	_lcd_write	;wreg free
  2606                           
  2607                           ;main.c: 83: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  2608  0019A0  0E7C               	movlw	low _buffer1
  2609  0019A2  6E0D               	movwf	sprintf@sp,c
  2610  0019A4  0E00               	movlw	high _buffer1
  2611  0019A6  6E0E               	movwf	sprintf@sp+1,c
  2612  0019A8  0E0F               	movlw	low STR_2
  2613  0019AA  6E0F               	movwf	sprintf@f,c
  2614  0019AC  0E0F               	movlw	high STR_2
  2615  0019AE  6E10               	movwf	sprintf@f+1,c
  2616  0019B0  C057  F011         	movff	_dia,?_sprintf+4
  2617  0019B4  C058  F012         	movff	_dia+1,?_sprintf+5
  2618  0019B8  C05D  F013         	movff	_mes,?_sprintf+6
  2619  0019BC  C05E  F014         	movff	_mes+1,?_sprintf+7
  2620  0019C0  C055  F015         	movff	_anio,?_sprintf+8
  2621  0019C4  C056  F016         	movff	_anio+1,?_sprintf+9
  2622  0019C8  EC15  F009         	call	_sprintf	;wreg free
  2623                           
  2624                           ;main.c: 84: lcd_write(1,2,buffer1);
  2625  0019CC  0E00               	movlw	0
  2626  0019CE  6E0C               	movwf	lcd_write@column+1,c
  2627  0019D0  0E01               	movlw	1
  2628  0019D2  6E0B               	movwf	lcd_write@column,c
  2629  0019D4  0E00               	movlw	0
  2630  0019D6  6E0E               	movwf	lcd_write@row+1,c
  2631  0019D8  0E02               	movlw	2
  2632  0019DA  6E0D               	movwf	lcd_write@row,c
  2633  0019DC  0E7C               	movlw	low _buffer1
  2634  0019DE  6E0F               	movwf	lcd_write@string,c
  2635  0019E0  0E00               	movlw	high _buffer1
  2636  0019E2  6E10               	movwf	lcd_write@string+1,c
  2637  0019E4  ECBA  F010         	call	_lcd_write	;wreg free
  2638                           
  2639                           ;main.c: 85: sprintf(buffer1,"%02u:%02u",hora,minuto);
  2640  0019E8  0E7C               	movlw	low _buffer1
  2641  0019EA  6E0D               	movwf	sprintf@sp,c
  2642  0019EC  0E00               	movlw	high _buffer1
  2643  0019EE  6E0E               	movwf	sprintf@sp+1,c
  2644  0019F0  0E1E               	movlw	low STR_3
  2645  0019F2  6E0F               	movwf	sprintf@f,c
  2646  0019F4  0E0F               	movlw	high STR_3
  2647  0019F6  6E10               	movwf	sprintf@f+1,c
  2648  0019F8  C05B  F011         	movff	_hora,?_sprintf+4
  2649  0019FC  C05C  F012         	movff	_hora+1,?_sprintf+5
  2650  001A00  C033  F013         	movff	_minuto,?_sprintf+6
  2651  001A04  C034  F014         	movff	_minuto+1,?_sprintf+7
  2652  001A08  EC15  F009         	call	_sprintf	;wreg free
  2653                           
  2654                           ;main.c: 86: lcd_write(12,2,buffer1);
  2655  001A0C  0E00               	movlw	0
  2656  001A0E  6E0C               	movwf	lcd_write@column+1,c
  2657  001A10  0E0C               	movlw	12
  2658  001A12  6E0B               	movwf	lcd_write@column,c
  2659  001A14  0E00               	movlw	0
  2660  001A16  6E0E               	movwf	lcd_write@row+1,c
  2661  001A18  0E02               	movlw	2
  2662  001A1A  6E0D               	movwf	lcd_write@row,c
  2663  001A1C  0E7C               	movlw	low _buffer1
  2664  001A1E  6E0F               	movwf	lcd_write@string,c
  2665  001A20  0E00               	movlw	high _buffer1
  2666  001A22  6E10               	movwf	lcd_write@string+1,c
  2667  001A24  ECBA  F010         	call	_lcd_write	;wreg free
  2668  001A28  0012               	return		;funcret
  2669  001A2A                     __end_of_home:
  2670                           	opt stack 0
  2671                           tblptru	equ	0xFF8
  2672                           tblptrh	equ	0xFF7
  2673                           tblptrl	equ	0xFF6
  2674                           tablat	equ	0xFF5
  2675                           prodl	equ	0xFF3
  2676                           intcon	equ	0xFF2
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           postdec1	equ	0xFE5
  2680                           fsr1l	equ	0xFE1
  2681                           indf2	equ	0xFDF
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _sprintf *****************
  2687 ;; Defined at:
  2688 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  sp              2   12[COMRAM] PTR unsigned char 
  2691 ;;		 -> buffer1(20), 
  2692 ;;  f               2   14[COMRAM] PTR const unsigned char 
  2693 ;;		 -> STR_43(5), STR_42(5), STR_41(5), STR_40(5), 
  2694 ;;		 -> STR_39(5), STR_38(5), STR_37(5), STR_36(5), 
  2695 ;;		 -> STR_35(5), STR_34(5), STR_3(10), STR_2(15), 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  tmpval          4    0        struct .
  2698 ;;  cp              3    0        PTR const unsigned char 
  2699 ;;  width           2   32[COMRAM] int 
  2700 ;;  val             2   29[COMRAM] unsigned int 
  2701 ;;  ap              2   26[COMRAM] PTR void [1]
  2702 ;;		 -> ?_sprintf(2), 
  2703 ;;  len             2    0        unsigned int 
  2704 ;;  c               1   34[COMRAM] char 
  2705 ;;  prec            1   31[COMRAM] char 
  2706 ;;  flag            1   28[COMRAM] unsigned char 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  2   12[COMRAM] int 
  2709 ;; Registers used:
  2710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2716 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2717 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2718 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2719 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2720 ;;Total ram usage:       23 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    1
  2723 ;; This function calls:
  2724 ;;		___lwdiv
  2725 ;;		___lwmod
  2726 ;;		___wmul
  2727 ;;		_isdigit
  2728 ;; This function is called by:
  2729 ;;		_home
  2730 ;;		_keyboard_control
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text13
  2735  00122A                     __ptext13:
  2736                           	opt stack 0
  2737  00122A                     _sprintf:
  2738                           	opt stack 28
  2739                           
  2740                           ;doprnt.c: 494: va_list ap;
  2741                           ;doprnt.c: 499: signed char c;
  2742                           ;doprnt.c: 501: int width;
  2743                           ;doprnt.c: 506: signed char prec;
  2744                           ;doprnt.c: 508: unsigned char flag;
  2745                           ;doprnt.c: 523: union {
  2746                           ;doprnt.c: 524: unsigned long vd;
  2747                           ;doprnt.c: 525: double integ;
  2748                           ;doprnt.c: 526: } tmpval;
  2749                           ;doprnt.c: 528: unsigned int val;
  2750                           ;doprnt.c: 529: unsigned len;
  2751                           ;doprnt.c: 530: const char * cp;
  2752                           ;doprnt.c: 533: *ap = __va_start();
  2753                           
  2754                           ;incstack = 0
  2755  00122A  0E11               	movlw	low (?_sprintf+4)
  2756  00122C  6E1B               	movwf	sprintf@ap,c
  2757  00122E  0E00               	movlw	high (?_sprintf+4)
  2758  001230  6E1C               	movwf	sprintf@ap+1,c
  2759                           
  2760                           ;doprnt.c: 536: while(c = *f++) {
  2761  001232  D117               	goto	l2255
  2762  001234                     l2173:
  2763                           
  2764                           ;doprnt.c: 538: if(c != '%')
  2765  001234  0E25               	movlw	37
  2766  001236  1823               	xorwf	sprintf@c,w,c
  2767  001238  B4D8               	btfsc	status,2,c
  2768  00123A  D009               	goto	l2179
  2769                           
  2770                           ;doprnt.c: 540: {
  2771                           ;doprnt.c: 541: ((*sp++ = (c)));
  2772  00123C  C00D  FFD9         	movff	sprintf@sp,fsr2l
  2773  001240  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  2774  001244  C023  FFDF         	movff	sprintf@c,indf2
  2775  001248  4A0D               	infsnz	sprintf@sp,f,c
  2776  00124A  2A0E               	incf	sprintf@sp+1,f,c
  2777                           
  2778                           ;doprnt.c: 542: continue;
  2779  00124C  D10A               	goto	l2255
  2780  00124E                     l2179:
  2781                           
  2782                           ;doprnt.c: 543: }
  2783                           ;doprnt.c: 546: width = 0;
  2784  00124E  0E00               	movlw	0
  2785  001250  6E22               	movwf	sprintf@width+1,c
  2786  001252  0E00               	movlw	0
  2787  001254  6E21               	movwf	sprintf@width,c
  2788                           
  2789                           ;doprnt.c: 548: flag = 0;
  2790  001256  0E00               	movlw	0
  2791  001258  6E1D               	movwf	sprintf@flag,c
  2792                           
  2793                           ;doprnt.c: 551: switch(*f) {
  2794                           
  2795                           ;doprnt.c: 550: for(;;) {
  2796  00125A  D005               	goto	l2185
  2797  00125C                     l2181:
  2798                           
  2799                           ;doprnt.c: 580: flag |= 0x04;
  2800  00125C  841D               	bsf	sprintf@flag,2,c
  2801                           
  2802                           ;doprnt.c: 581: f++;
  2803  00125E  4A0F               	infsnz	sprintf@f,f,c
  2804  001260  2A10               	incf	sprintf@f+1,f,c
  2805                           
  2806                           ;doprnt.c: 582: continue;
  2807  001262  D001               	goto	l2185
  2808                           
  2809                           ;doprnt.c: 584: }
  2810  001264  D00B               	goto	l2187
  2811  001266                     l2185:
  2812  001266  C00F  FFF6         	movff	sprintf@f,tblptrl
  2813  00126A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2814  00126E                     	if	0	;tblptru may be non-zero
  2815  00126E                     	endif
  2816  00126E                     	if	0	;tblptru may be non-zero
  2817  00126E                     	endif
  2818  00126E  0008               	tblrd		*
  2819  001270  50F5               	movf	tablat,w,c
  2820                           
  2821                           ; Switch size 1, requested type "space"
  2822                           ; Number of cases is 1, Range of values is 48 to 48
  2823                           ; switch strategies available:
  2824                           ; Name         Instructions Cycles
  2825                           ; simple_byte            4     3 (average)
  2826                           ;	Chosen strategy is simple_byte
  2827  001272  0A30               	xorlw	48	; case 48
  2828  001274  B4D8               	btfsc	status,2,c
  2829  001276  D7F2               	goto	l2181
  2830                           
  2831                           ;doprnt.c: 585: break;
  2832  001278  D001               	goto	l2187
  2833                           
  2834                           ;doprnt.c: 586: }
  2835  00127A  D7F5               	goto	l2185
  2836  00127C                     l2187:
  2837                           
  2838                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2839  00127C  C00F  FFF6         	movff	sprintf@f,tblptrl
  2840  001280  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2841  001284                     	if	0	;tblptru may be non-zero
  2842  001284                     	endif
  2843  001284                     	if	0	;tblptru may be non-zero
  2844  001284                     	endif
  2845  001284  0008               	tblrd		*
  2846  001286  50F5               	movf	tablat,w,c
  2847  001288  ECA9  F010         	call	_isdigit
  2848  00128C  A0D8               	btfss	status,0,c
  2849  00128E  D03A               	goto	l2203
  2850                           
  2851                           ;doprnt.c: 598: width = 0;
  2852  001290  0E00               	movlw	0
  2853  001292  6E22               	movwf	sprintf@width+1,c
  2854  001294  0E00               	movlw	0
  2855  001296  6E21               	movwf	sprintf@width,c
  2856  001298  D000               	goto	l2191
  2857  00129A                     l2191:
  2858                           
  2859                           ;doprnt.c: 600: width *= 10;
  2860  00129A  C021  F001         	movff	sprintf@width,___wmul@multiplier
  2861  00129E  C022  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  2862  0012A2  0E00               	movlw	0
  2863  0012A4  6E04               	movwf	___wmul@multiplicand+1,c
  2864  0012A6  0E0A               	movlw	10
  2865  0012A8  6E03               	movwf	___wmul@multiplicand,c
  2866  0012AA  EC83  F010         	call	___wmul	;wreg free
  2867  0012AE  C001  F021         	movff	?___wmul,sprintf@width
  2868  0012B2  C002  F022         	movff	?___wmul+1,sprintf@width+1
  2869                           
  2870                           ;doprnt.c: 601: width += *f++ - '0';
  2871  0012B6  0ED0               	movlw	208
  2872  0012B8  6E17               	movwf	??_sprintf& (0+255),c
  2873  0012BA  0EFF               	movlw	255
  2874  0012BC  6E18               	movwf	(??_sprintf+1)& (0+255),c
  2875  0012BE  C00F  FFF6         	movff	sprintf@f,tblptrl
  2876  0012C2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2877  0012C6                     	if	0	;tblptru may be non-zero
  2878  0012C6                     	endif
  2879  0012C6                     	if	0	;tblptru may be non-zero
  2880  0012C6                     	endif
  2881  0012C6  0008               	tblrd		*
  2882  0012C8  50F5               	movf	tablat,w,c
  2883  0012CA  6E19               	movwf	(??_sprintf+2)& (0+255),c
  2884  0012CC  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  2885  0012CE  5017               	movf	??_sprintf,w,c
  2886  0012D0  2619               	addwf	??_sprintf+2,f,c
  2887  0012D2  5018               	movf	??_sprintf+1,w,c
  2888  0012D4  221A               	addwfc	??_sprintf+3,f,c
  2889  0012D6  5019               	movf	??_sprintf+2,w,c
  2890  0012D8  2621               	addwf	sprintf@width,f,c
  2891  0012DA  501A               	movf	??_sprintf+3,w,c
  2892  0012DC  2222               	addwfc	sprintf@width+1,f,c
  2893  0012DE  4A0F               	infsnz	sprintf@f,f,c
  2894  0012E0  2A10               	incf	sprintf@f+1,f,c
  2895                           
  2896                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2897  0012E2  C00F  FFF6         	movff	sprintf@f,tblptrl
  2898  0012E6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2899  0012EA                     	if	0	;tblptru may be non-zero
  2900  0012EA                     	endif
  2901  0012EA                     	if	0	;tblptru may be non-zero
  2902  0012EA                     	endif
  2903  0012EA  0008               	tblrd		*
  2904  0012EC  50F5               	movf	tablat,w,c
  2905  0012EE  ECA9  F010         	call	_isdigit
  2906  0012F2  A0D8               	btfss	status,0,c
  2907  0012F4  D007               	goto	l2203
  2908  0012F6  D7D1               	goto	l2191
  2909                           
  2910                           ;doprnt.c: 608: }
  2911                           ;doprnt.c: 635: switch(c = *f++) {
  2912  0012F8  D005               	goto	l2203
  2913                           
  2914                           ;doprnt.c: 638: goto alldone;
  2915                           
  2916                           ;doprnt.c: 637: case 0:
  2917  0012FA  D0C1               	goto	l2257
  2918                           
  2919                           ;doprnt.c: 813: continue;
  2920                           
  2921                           ;doprnt.c: 802: default:
  2922  0012FC  D0B2               	goto	l2255
  2923  0012FE                     l2199:
  2924                           
  2925                           ;doprnt.c: 818: flag |= 0xC0;
  2926  0012FE  0EC0               	movlw	192
  2927  001300  121D               	iorwf	sprintf@flag,f,c
  2928                           
  2929                           ;doprnt.c: 822: }
  2930                           
  2931                           ;doprnt.c: 819: break;
  2932  001302  D011               	goto	l2205
  2933  001304                     l2203:
  2934  001304  C00F  FFF6         	movff	sprintf@f,tblptrl
  2935  001308  C010  FFF7         	movff	sprintf@f+1,tblptrh
  2936  00130C  4A0F               	infsnz	sprintf@f,f,c
  2937  00130E  2A10               	incf	sprintf@f+1,f,c
  2938  001310                     	if	0	;tblptru may be non-zero
  2939  001310                     	endif
  2940  001310                     	if	0	;tblptru may be non-zero
  2941  001310                     	endif
  2942  001310  0008               	tblrd		*
  2943  001312  CFF5 F023          	movff	tablat,sprintf@c
  2944  001316  5023               	movf	sprintf@c,w,c
  2945                           
  2946                           ; Switch size 1, requested type "space"
  2947                           ; Number of cases is 2, Range of values is 0 to 117
  2948                           ; switch strategies available:
  2949                           ; Name         Instructions Cycles
  2950                           ; simple_byte            7     4 (average)
  2951                           ;	Chosen strategy is simple_byte
  2952  001318  0A00               	xorlw	0	; case 0
  2953  00131A  B4D8               	btfsc	status,2,c
  2954  00131C  D0B0               	goto	l2257
  2955  00131E  0A75               	xorlw	117	; case 117
  2956  001320  B4D8               	btfsc	status,2,c
  2957  001322  D7ED               	goto	l2199
  2958  001324  D09E               	goto	l2255
  2959  001326                     l2205:
  2960                           
  2961                           ;doprnt.c: 1273: {
  2962                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2963  001326  C01B  FFD9         	movff	sprintf@ap,fsr2l
  2964  00132A  C01C  FFDA         	movff	sprintf@ap+1,fsr2h
  2965  00132E  CFDE F01E          	movff	postinc2,sprintf@val
  2966  001332  CFDD F01F          	movff	postdec2,sprintf@val+1
  2967  001336  0E02               	movlw	2
  2968  001338  261B               	addwf	sprintf@ap,f,c
  2969  00133A  0E00               	movlw	0
  2970  00133C  221C               	addwfc	sprintf@ap+1,f,c
  2971                           
  2972                           ;doprnt.c: 1287: }
  2973                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2974  00133E  0E01               	movlw	1
  2975  001340  6E23               	movwf	sprintf@c,c
  2976  001342                     l2211:
  2977  001342  0E05               	movlw	5
  2978  001344  1823               	xorwf	sprintf@c,w,c
  2979  001346  B4D8               	btfsc	status,2,c
  2980  001348  D016               	goto	l2223
  2981  00134A  D001               	goto	l2215
  2982  00134C  D014               	goto	l2223
  2983  00134E                     l2215:
  2984                           
  2985                           ;doprnt.c: 1306: if(val < dpowers[c])
  2986  00134E  5023               	movf	sprintf@c,w,c
  2987  001350  0D02               	mullw	2
  2988  001352  0E01               	movlw	low _dpowers
  2989  001354  24F3               	addwf	prodl,w,c
  2990  001356  6EF6               	movwf	tblptrl,c
  2991  001358  0E0F               	movlw	high _dpowers
  2992  00135A  20F4               	addwfc	prodh,w,c
  2993  00135C  6EF7               	movwf	tblptrh,c
  2994  00135E                     	if	0	;There are less than 3 active tblptr bytes
  2995  00135E                     	endif
  2996  00135E  0009               	tblrd		*+
  2997  001360  50F5               	movf	tablat,w,c
  2998  001362  5C1E               	subwf	sprintf@val,w,c
  2999  001364  0009               	tblrd		*+
  3000  001366  50F5               	movf	tablat,w,c
  3001  001368  581F               	subwfb	sprintf@val+1,w,c
  3002  00136A  A0D8               	btfss	status,0,c
  3003  00136C  D004               	goto	l2223
  3004  00136E  D001               	goto	l2219
  3005                           
  3006                           ;doprnt.c: 1307: break;
  3007  001370  D002               	goto	l2223
  3008  001372                     l2219:
  3009  001372  2A23               	incf	sprintf@c,f,c
  3010  001374  D7E6               	goto	l2211
  3011  001376                     l2223:
  3012                           
  3013                           ;doprnt.c: 1381: if(width > c)
  3014  001376  0E80               	movlw	128
  3015  001378  BE23               	btfsc	sprintf@c,7,c
  3016  00137A  0E7F               	movlw	127
  3017  00137C  6E17               	movwf	??_sprintf& (0+255),c
  3018  00137E  5021               	movf	sprintf@width,w,c
  3019  001380  5C23               	subwf	sprintf@c,w,c
  3020  001382  5022               	movf	sprintf@width+1,w,c
  3021  001384  0A80               	xorlw	128
  3022  001386  5817               	subwfb	??_sprintf& (0+255),w,c
  3023  001388  B0D8               	btfsc	status,0,c
  3024  00138A  D007               	goto	l2227
  3025                           
  3026                           ;doprnt.c: 1382: width -= c;
  3027  00138C  5023               	movf	sprintf@c,w,c
  3028  00138E  5E21               	subwf	sprintf@width,f,c
  3029  001390  0E00               	movlw	0
  3030  001392  BE23               	btfsc	sprintf@c,7,c
  3031  001394  0EFF               	movlw	255
  3032  001396  5A22               	subwfb	sprintf@width+1,f,c
  3033  001398  D005               	goto	l2229
  3034  00139A                     l2227:
  3035                           
  3036                           ;doprnt.c: 1383: else
  3037                           ;doprnt.c: 1384: width = 0;
  3038  00139A  0E00               	movlw	0
  3039  00139C  6E22               	movwf	sprintf@width+1,c
  3040  00139E  0E00               	movlw	0
  3041  0013A0  6E21               	movwf	sprintf@width,c
  3042  0013A2  D000               	goto	l2229
  3043  0013A4                     l2229:
  3044                           
  3045                           ;doprnt.c: 1387: if(flag & 0x04) {
  3046  0013A4  A41D               	btfss	sprintf@flag,2,c
  3047  0013A6  D015               	goto	l2239
  3048                           
  3049                           ;doprnt.c: 1415: if(width)
  3050  0013A8  5021               	movf	sprintf@width,w,c
  3051  0013AA  1022               	iorwf	sprintf@width+1,w,c
  3052  0013AC  B4D8               	btfsc	status,2,c
  3053  0013AE  D026               	goto	l388
  3054  0013B0                     l2233:
  3055                           
  3056                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3057  0013B0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3058  0013B4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3059  0013B8  0E30               	movlw	48
  3060  0013BA  6EDF               	movwf	indf2,c
  3061  0013BC  4A0D               	infsnz	sprintf@sp,f,c
  3062  0013BE  2A0E               	incf	sprintf@sp+1,f,c
  3063                           
  3064                           ;doprnt.c: 1418: while(--width);
  3065  0013C0  0621               	decf	sprintf@width,f,c
  3066  0013C2  A0D8               	btfss	status,0,c
  3067  0013C4  0622               	decf	sprintf@width+1,f,c
  3068  0013C6  5021               	movf	sprintf@width,w,c
  3069  0013C8  1022               	iorwf	sprintf@width+1,w,c
  3070  0013CA  B4D8               	btfsc	status,2,c
  3071  0013CC  D017               	goto	l388
  3072  0013CE  D7F0               	goto	l2233
  3073                           
  3074                           ;doprnt.c: 1420: } else
  3075  0013D0  D015               	goto	l388
  3076  0013D2                     l2239:
  3077                           
  3078                           ;doprnt.c: 1422: {
  3079                           ;doprnt.c: 1424: if(width
  3080                           ;doprnt.c: 1428: )
  3081  0013D2  5021               	movf	sprintf@width,w,c
  3082  0013D4  1022               	iorwf	sprintf@width+1,w,c
  3083  0013D6  B4D8               	btfsc	status,2,c
  3084  0013D8  D011               	goto	l388
  3085  0013DA                     l2241:
  3086                           
  3087                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3088  0013DA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3089  0013DE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3090  0013E2  0E20               	movlw	32
  3091  0013E4  6EDF               	movwf	indf2,c
  3092  0013E6  4A0D               	infsnz	sprintf@sp,f,c
  3093  0013E8  2A0E               	incf	sprintf@sp+1,f,c
  3094                           
  3095                           ;doprnt.c: 1431: while(--width);
  3096  0013EA  0621               	decf	sprintf@width,f,c
  3097  0013EC  A0D8               	btfss	status,0,c
  3098  0013EE  0622               	decf	sprintf@width+1,f,c
  3099  0013F0  5021               	movf	sprintf@width,w,c
  3100  0013F2  1022               	iorwf	sprintf@width+1,w,c
  3101  0013F4  B4D8               	btfsc	status,2,c
  3102  0013F6  D002               	goto	l388
  3103  0013F8  D7F0               	goto	l2241
  3104  0013FA  D000               	goto	l388
  3105  0013FC                     l388:
  3106                           
  3107                           ;doprnt.c: 1469: }
  3108                           ;doprnt.c: 1472: prec = c;
  3109  0013FC  C023  F020         	movff	sprintf@c,sprintf@prec
  3110                           
  3111                           ;doprnt.c: 1474: while(prec--) {
  3112  001400  D02A               	goto	l2253
  3113  001402                     l2247:
  3114                           
  3115                           ;doprnt.c: 1478: {
  3116                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3117  001402  5020               	movf	sprintf@prec,w,c
  3118  001404  0D02               	mullw	2
  3119  001406  0E01               	movlw	low _dpowers
  3120  001408  24F3               	addwf	prodl,w,c
  3121  00140A  6EF6               	movwf	tblptrl,c
  3122  00140C  0E0F               	movlw	high _dpowers
  3123  00140E  20F4               	addwfc	prodh,w,c
  3124  001410  6EF7               	movwf	tblptrh,c
  3125  001412                     	if	0	;There are less than 3 active tblptr bytes
  3126  001412                     	endif
  3127  001412  0009               	tblrd		*+
  3128  001414  CFF5 F003          	movff	tablat,___lwdiv@divisor
  3129  001418  000A               	tblrd		*-
  3130  00141A  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  3131  00141E  C01E  F001         	movff	sprintf@val,___lwdiv@dividend
  3132  001422  C01F  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  3133  001426  ECD6  F00E         	call	___lwdiv	;wreg free
  3134  00142A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  3135  00142E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  3136  001432  0E00               	movlw	0
  3137  001434  6E0B               	movwf	___lwmod@divisor+1,c
  3138  001436  0E0A               	movlw	10
  3139  001438  6E0A               	movwf	___lwmod@divisor,c
  3140  00143A  ECE2  F00F         	call	___lwmod	;wreg free
  3141  00143E  5008               	movf	?___lwmod,w,c
  3142  001440  0F30               	addlw	48
  3143  001442  6E23               	movwf	sprintf@c,c
  3144                           
  3145                           ;doprnt.c: 1523: }
  3146                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3147  001444  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3148  001448  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3149  00144C  C023  FFDF         	movff	sprintf@c,indf2
  3150  001450  4A0D               	infsnz	sprintf@sp,f,c
  3151  001452  2A0E               	incf	sprintf@sp+1,f,c
  3152  001454  D000               	goto	l2253
  3153  001456                     l2253:
  3154  001456  0620               	decf	sprintf@prec,f,c
  3155  001458  2820               	incf	sprintf@prec,w,c
  3156  00145A  B4D8               	btfsc	status,2,c
  3157  00145C  D002               	goto	l2255
  3158  00145E  D7D1               	goto	l2247
  3159  001460  D000               	goto	l2255
  3160  001462                     l2255:
  3161  001462  C00F  FFF6         	movff	sprintf@f,tblptrl
  3162  001466  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3163  00146A  4A0F               	infsnz	sprintf@f,f,c
  3164  00146C  2A10               	incf	sprintf@f+1,f,c
  3165  00146E                     	if	0	;tblptru may be non-zero
  3166  00146E                     	endif
  3167  00146E                     	if	0	;tblptru may be non-zero
  3168  00146E                     	endif
  3169  00146E  0008               	tblrd		*
  3170  001470  CFF5 F023          	movff	tablat,sprintf@c
  3171  001474  5023               	movf	sprintf@c,w,c
  3172  001476  B4D8               	btfsc	status,2,c
  3173  001478  D002               	goto	l2257
  3174  00147A  D6DC               	goto	l2173
  3175  00147C  D000               	goto	l2257
  3176  00147E                     l2257:
  3177                           
  3178                           ;doprnt.c: 1538: *sp = 0;
  3179  00147E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3180  001482  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3181  001486  0E00               	movlw	0
  3182  001488  6EDF               	movwf	indf2,c
  3183  00148A  0012               	return	
  3184                           
  3185                           ;doprnt.c: 1540: return 0;
  3186                           ;	Return value of _sprintf is never used
  3187  00148C  0012               	return		;funcret
  3188  00148E                     __end_of_sprintf:
  3189                           	opt stack 0
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           prodh	equ	0xFF4
  3195                           prodl	equ	0xFF3
  3196                           intcon	equ	0xFF2
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           postdec1	equ	0xFE5
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           postdec2	equ	0xFDD
  3204                           fsr2h	equ	0xFDA
  3205                           fsr2l	equ	0xFD9
  3206                           status	equ	0xFD8
  3207                           
  3208 ;; *************** function _isdigit *****************
  3209 ;; Defined at:
  3210 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;  c               1    wreg     unsigned char 
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  c               1    2[COMRAM] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;		None               void
  3217 ;; Registers used:
  3218 ;;		wreg, status,2, status,0
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3226 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3227 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3228 ;;Total ram usage:        3 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; This function calls:
  3231 ;;		Nothing
  3232 ;; This function is called by:
  3233 ;;		_sprintf
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	text14
  3238  002152                     __ptext14:
  3239                           	opt stack 0
  3240  002152                     _isdigit:
  3241                           	opt stack 28
  3242                           
  3243                           ;incstack = 0
  3244                           ;isdigit@c stored from wreg
  3245  002152  6E03               	movwf	isdigit@c,c
  3246  002154  0E00               	movlw	0
  3247  002156  6E02               	movwf	_isdigit$2103,c
  3248  002158  0E3A               	movlw	58
  3249  00215A  6003               	cpfslt	isdigit@c,c
  3250  00215C  D006               	goto	l2087
  3251  00215E  0E2F               	movlw	47
  3252  002160  6403               	cpfsgt	isdigit@c,c
  3253  002162  D003               	goto	l2087
  3254  002164  0E01               	movlw	1
  3255  002166  6E02               	movwf	_isdigit$2103,c
  3256  002168  D000               	goto	l2087
  3257  00216A                     l2087:
  3258  00216A  C002  F001         	movff	_isdigit$2103,??_isdigit
  3259  00216E  3001               	rrcf	??_isdigit,w,c
  3260  002170  0012               	return	
  3261  002172  0012               	return		;funcret
  3262  002174                     __end_of_isdigit:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           postdec1	equ	0xFE5
  3274                           fsr1l	equ	0xFE1
  3275                           indf2	equ	0xFDF
  3276                           postinc2	equ	0xFDE
  3277                           postdec2	equ	0xFDD
  3278                           fsr2h	equ	0xFDA
  3279                           fsr2l	equ	0xFD9
  3280                           status	equ	0xFD8
  3281                           
  3282 ;; *************** function ___wmul *****************
  3283 ;; Defined at:
  3284 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;  multiplier      2    0[COMRAM] unsigned int 
  3287 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  product         2    4[COMRAM] unsigned int 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  2    0[COMRAM] unsigned int 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0, prodl, prodh
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3303 ;;Total ram usage:        6 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; This function calls:
  3306 ;;		Nothing
  3307 ;; This function is called by:
  3308 ;;		_sprintf
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text15
  3313  002106                     __ptext15:
  3314                           	opt stack 0
  3315  002106                     ___wmul:
  3316                           	opt stack 28
  3317                           
  3318                           ;incstack = 0
  3319  002106  5001               	movf	___wmul@multiplier,w,c
  3320  002108  0203               	mulwf	___wmul@multiplicand,c
  3321  00210A  CFF3 F005          	movff	prodl,___wmul@product
  3322  00210E  CFF4 F006          	movff	prodh,___wmul@product+1
  3323  002112  5001               	movf	___wmul@multiplier,w,c
  3324  002114  0204               	mulwf	___wmul@multiplicand+1,c
  3325  002116  50F3               	movf	prodl,w,c
  3326  002118  2606               	addwf	___wmul@product+1,f,c
  3327  00211A  5002               	movf	___wmul@multiplier+1,w,c
  3328  00211C  0203               	mulwf	___wmul@multiplicand,c
  3329  00211E  50F3               	movf	prodl,w,c
  3330  002120  2606               	addwf	___wmul@product+1,f,c
  3331  002122  C005  F001         	movff	___wmul@product,?___wmul
  3332  002126  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3333  00212A  0012               	return	
  3334  00212C  0012               	return		;funcret
  3335  00212E                     __end_of___wmul:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           postinc0	equ	0xFEE
  3345                           wreg	equ	0xFE8
  3346                           postdec1	equ	0xFE5
  3347                           fsr1l	equ	0xFE1
  3348                           indf2	equ	0xFDF
  3349                           postinc2	equ	0xFDE
  3350                           postdec2	equ	0xFDD
  3351                           fsr2h	equ	0xFDA
  3352                           fsr2l	equ	0xFD9
  3353                           status	equ	0xFD8
  3354                           
  3355 ;; *************** function ___lwmod *****************
  3356 ;; Defined at:
  3357 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  dividend        2    7[COMRAM] unsigned int 
  3360 ;;  divisor         2    9[COMRAM] unsigned int 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  counter         1   11[COMRAM] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  2    7[COMRAM] unsigned int 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3372 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3373 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3375 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3376 ;;Total ram usage:        5 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_sprintf
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text16
  3386  001FC4                     __ptext16:
  3387                           	opt stack 0
  3388  001FC4                     ___lwmod:
  3389                           	opt stack 28
  3390                           
  3391                           ;incstack = 0
  3392  001FC4  500A               	movf	___lwmod@divisor,w,c
  3393  001FC6  100B               	iorwf	___lwmod@divisor+1,w,c
  3394  001FC8  B4D8               	btfsc	status,2,c
  3395  001FCA  D01D               	goto	l1042
  3396  001FCC  0E01               	movlw	1
  3397  001FCE  6E0C               	movwf	___lwmod@counter,c
  3398  001FD0  D005               	goto	l2125
  3399  001FD2                     l2123:
  3400  001FD2  90D8               	bcf	status,0,c
  3401  001FD4  360A               	rlcf	___lwmod@divisor,f,c
  3402  001FD6  360B               	rlcf	___lwmod@divisor+1,f,c
  3403  001FD8  2A0C               	incf	___lwmod@counter,f,c
  3404  001FDA  D000               	goto	l2125
  3405  001FDC                     l2125:
  3406  001FDC  BE0B               	btfsc	___lwmod@divisor+1,7,c
  3407  001FDE  D002               	goto	l2127
  3408  001FE0  D7F8               	goto	l2123
  3409  001FE2  D000               	goto	l2127
  3410  001FE4                     l2127:
  3411  001FE4  500A               	movf	___lwmod@divisor,w,c
  3412  001FE6  5C08               	subwf	___lwmod@dividend,w,c
  3413  001FE8  500B               	movf	___lwmod@divisor+1,w,c
  3414  001FEA  5809               	subwfb	___lwmod@dividend+1,w,c
  3415  001FEC  A0D8               	btfss	status,0,c
  3416  001FEE  D005               	goto	l2131
  3417  001FF0  500A               	movf	___lwmod@divisor,w,c
  3418  001FF2  5E08               	subwf	___lwmod@dividend,f,c
  3419  001FF4  500B               	movf	___lwmod@divisor+1,w,c
  3420  001FF6  5A09               	subwfb	___lwmod@dividend+1,f,c
  3421  001FF8  D000               	goto	l2131
  3422  001FFA                     l2131:
  3423  001FFA  90D8               	bcf	status,0,c
  3424  001FFC  320B               	rrcf	___lwmod@divisor+1,f,c
  3425  001FFE  320A               	rrcf	___lwmod@divisor,f,c
  3426  002000  2E0C               	decfsz	___lwmod@counter,f,c
  3427  002002  D7F0               	goto	l2127
  3428  002004  D000               	goto	l1042
  3429  002006                     l1042:
  3430  002006  C008  F008         	movff	___lwmod@dividend,?___lwmod
  3431  00200A  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  3432  00200E  0012               	return		;funcret
  3433  002010                     __end_of___lwmod:
  3434                           	opt stack 0
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           prodh	equ	0xFF4
  3440                           prodl	equ	0xFF3
  3441                           intcon	equ	0xFF2
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           postdec1	equ	0xFE5
  3445                           fsr1l	equ	0xFE1
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           postdec2	equ	0xFDD
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8
  3452                           
  3453 ;; *************** function ___lwdiv *****************
  3454 ;; Defined at:
  3455 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  dividend        2    0[COMRAM] unsigned int 
  3458 ;;  divisor         2    2[COMRAM] unsigned int 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  quotient        2    4[COMRAM] unsigned int 
  3461 ;;  counter         1    6[COMRAM] unsigned char 
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  2    0[COMRAM] unsigned int 
  3464 ;; Registers used:
  3465 ;;		wreg, status,2, status,0
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3471 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3472 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3474 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3475 ;;Total ram usage:        7 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_sprintf
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text17
  3485  001DAC                     __ptext17:
  3486                           	opt stack 0
  3487  001DAC                     ___lwdiv:
  3488                           	opt stack 28
  3489                           
  3490                           ;incstack = 0
  3491  001DAC  0E00               	movlw	0
  3492  001DAE  6E06               	movwf	___lwdiv@quotient+1,c
  3493  001DB0  0E00               	movlw	0
  3494  001DB2  6E05               	movwf	___lwdiv@quotient,c
  3495  001DB4  5003               	movf	___lwdiv@divisor,w,c
  3496  001DB6  1004               	iorwf	___lwdiv@divisor+1,w,c
  3497  001DB8  B4D8               	btfsc	status,2,c
  3498  001DBA  D021               	goto	l1032
  3499  001DBC  0E01               	movlw	1
  3500  001DBE  6E07               	movwf	___lwdiv@counter,c
  3501  001DC0  D005               	goto	l2105
  3502  001DC2                     l2103:
  3503  001DC2  90D8               	bcf	status,0,c
  3504  001DC4  3603               	rlcf	___lwdiv@divisor,f,c
  3505  001DC6  3604               	rlcf	___lwdiv@divisor+1,f,c
  3506  001DC8  2A07               	incf	___lwdiv@counter,f,c
  3507  001DCA  D000               	goto	l2105
  3508  001DCC                     l2105:
  3509  001DCC  BE04               	btfsc	___lwdiv@divisor+1,7,c
  3510  001DCE  D002               	goto	l2107
  3511  001DD0  D7F8               	goto	l2103
  3512  001DD2  D000               	goto	l2107
  3513  001DD4                     l2107:
  3514  001DD4  90D8               	bcf	status,0,c
  3515  001DD6  3605               	rlcf	___lwdiv@quotient,f,c
  3516  001DD8  3606               	rlcf	___lwdiv@quotient+1,f,c
  3517  001DDA  5003               	movf	___lwdiv@divisor,w,c
  3518  001DDC  5C01               	subwf	___lwdiv@dividend,w,c
  3519  001DDE  5004               	movf	___lwdiv@divisor+1,w,c
  3520  001DE0  5802               	subwfb	___lwdiv@dividend+1,w,c
  3521  001DE2  A0D8               	btfss	status,0,c
  3522  001DE4  D006               	goto	l2115
  3523  001DE6  5003               	movf	___lwdiv@divisor,w,c
  3524  001DE8  5E01               	subwf	___lwdiv@dividend,f,c
  3525  001DEA  5004               	movf	___lwdiv@divisor+1,w,c
  3526  001DEC  5A02               	subwfb	___lwdiv@dividend+1,f,c
  3527  001DEE  8005               	bsf	___lwdiv@quotient,0,c
  3528  001DF0  D000               	goto	l2115
  3529  001DF2                     l2115:
  3530  001DF2  90D8               	bcf	status,0,c
  3531  001DF4  3204               	rrcf	___lwdiv@divisor+1,f,c
  3532  001DF6  3203               	rrcf	___lwdiv@divisor,f,c
  3533  001DF8  2E07               	decfsz	___lwdiv@counter,f,c
  3534  001DFA  D7EC               	goto	l2107
  3535  001DFC  D000               	goto	l1032
  3536  001DFE                     l1032:
  3537  001DFE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3538  001E02  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3539  001E06  0012               	return		;funcret
  3540  001E08                     __end_of___lwdiv:
  3541                           	opt stack 0
  3542                           tblptru	equ	0xFF8
  3543                           tblptrh	equ	0xFF7
  3544                           tblptrl	equ	0xFF6
  3545                           tablat	equ	0xFF5
  3546                           prodh	equ	0xFF4
  3547                           prodl	equ	0xFF3
  3548                           intcon	equ	0xFF2
  3549                           postinc0	equ	0xFEE
  3550                           wreg	equ	0xFE8
  3551                           postdec1	equ	0xFE5
  3552                           fsr1l	equ	0xFE1
  3553                           indf2	equ	0xFDF
  3554                           postinc2	equ	0xFDE
  3555                           postdec2	equ	0xFDD
  3556                           fsr2h	equ	0xFDA
  3557                           fsr2l	equ	0xFD9
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function _button_C *****************
  3561 ;; Defined at:
  3562 ;;		line 225 in file "main.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;		None
  3565 ;; Auto vars:     Size  Location     Type
  3566 ;;		None
  3567 ;; Return value:  Size  Location     Type
  3568 ;;		None               void
  3569 ;; Registers used:
  3570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3571 ;; Tracked objects:
  3572 ;;		On entry : 0/0
  3573 ;;		On exit  : 0/0
  3574 ;;		Unchanged: 0/0
  3575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3580 ;;Total ram usage:        0 bytes
  3581 ;; Hardware stack levels used:    1
  3582 ;; Hardware stack levels required when called:    7
  3583 ;; This function calls:
  3584 ;;		_menu_home
  3585 ;; This function is called by:
  3586 ;;		_keyboard_control
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text18
  3591  002216                     __ptext18:
  3592                           	opt stack 0
  3593  002216                     _button_C:
  3594                           	opt stack 22
  3595                           
  3596                           ;main.c: 226: menu_home();
  3597                           
  3598                           ;incstack = 0
  3599  002216  ECF4  F00D         	call	_menu_home	;wreg free
  3600                           
  3601                           ;main.c: 227: submenu = 0;
  3602  00221A  0E00               	movlw	0
  3603  00221C  6E3E               	movwf	_submenu+1,c
  3604  00221E  0E00               	movlw	0
  3605  002220  6E3D               	movwf	_submenu,c
  3606  002222  0012               	return		;funcret
  3607  002224                     __end_of_button_C:
  3608                           	opt stack 0
  3609                           tblptru	equ	0xFF8
  3610                           tblptrh	equ	0xFF7
  3611                           tblptrl	equ	0xFF6
  3612                           tablat	equ	0xFF5
  3613                           prodh	equ	0xFF4
  3614                           prodl	equ	0xFF3
  3615                           intcon	equ	0xFF2
  3616                           postinc0	equ	0xFEE
  3617                           wreg	equ	0xFE8
  3618                           postdec1	equ	0xFE5
  3619                           fsr1l	equ	0xFE1
  3620                           indf2	equ	0xFDF
  3621                           postinc2	equ	0xFDE
  3622                           postdec2	equ	0xFDD
  3623                           fsr2h	equ	0xFDA
  3624                           fsr2l	equ	0xFD9
  3625                           status	equ	0xFD8
  3626                           
  3627 ;; *************** function _button_B *****************
  3628 ;; Defined at:
  3629 ;;		line 198 in file "main.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;		None
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;		None
  3634 ;; Return value:  Size  Location     Type
  3635 ;;		None               void
  3636 ;; Registers used:
  3637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3645 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3646 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3647 ;;Total ram usage:        2 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; Hardware stack levels required when called:    7
  3650 ;; This function calls:
  3651 ;;		_menu_submenu_activate
  3652 ;;		_menu_submenu_alarm
  3653 ;;		_menu_submenu_clock
  3654 ;;		_menu_submenu_pin
  3655 ;; This function is called by:
  3656 ;;		_keyboard_control
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text19
  3661  001D44                     __ptext19:
  3662                           	opt stack 0
  3663  001D44                     _button_B:
  3664                           	opt stack 22
  3665                           
  3666                           ;main.c: 200: switch(select)
  3667                           
  3668                           ;incstack = 0
  3669  001D44  D01C               	goto	l2637
  3670  001D46                     l2619:
  3671                           
  3672                           ;main.c: 203: menu_submenu_activate();
  3673  001D46  EC8B  F00F         	call	_menu_submenu_activate	;wreg free
  3674                           
  3675                           ;main.c: 204: submenu = 1;
  3676  001D4A  0E00               	movlw	0
  3677  001D4C  6E3E               	movwf	_submenu+1,c
  3678  001D4E  0E01               	movlw	1
  3679  001D50  6E3D               	movwf	_submenu,c
  3680                           
  3681                           ;main.c: 205: break;
  3682  001D52  0012               	return	
  3683  001D54                     l2623:
  3684                           
  3685                           ;main.c: 208: menu_submenu_clock();
  3686  001D54  EC31  F00F         	call	_menu_submenu_clock	;wreg free
  3687                           
  3688                           ;main.c: 209: submenu = 1;
  3689  001D58  0E00               	movlw	0
  3690  001D5A  6E3E               	movwf	_submenu+1,c
  3691  001D5C  0E01               	movlw	1
  3692  001D5E  6E3D               	movwf	_submenu,c
  3693                           
  3694                           ;main.c: 210: break;
  3695  001D60  0012               	return	
  3696  001D62                     l2627:
  3697                           
  3698                           ;main.c: 213: menu_submenu_pin();
  3699  001D62  EC04  F00F         	call	_menu_submenu_pin	;wreg free
  3700                           
  3701                           ;main.c: 214: submenu = 1;
  3702  001D66  0E00               	movlw	0
  3703  001D68  6E3E               	movwf	_submenu+1,c
  3704  001D6A  0E01               	movlw	1
  3705  001D6C  6E3D               	movwf	_submenu,c
  3706                           
  3707                           ;main.c: 215: break;
  3708  001D6E  0012               	return	
  3709  001D70                     l2631:
  3710                           
  3711                           ;main.c: 218: menu_submenu_alarm();
  3712  001D70  EC5E  F00F         	call	_menu_submenu_alarm	;wreg free
  3713                           
  3714                           ;main.c: 219: submenu = 1;
  3715  001D74  0E00               	movlw	0
  3716  001D76  6E3E               	movwf	_submenu+1,c
  3717  001D78  0E01               	movlw	1
  3718  001D7A  6E3D               	movwf	_submenu,c
  3719                           
  3720                           ;main.c: 221: }
  3721                           
  3722                           ;main.c: 220: break;
  3723  001D7C  0012               	return	
  3724  001D7E                     l2637:
  3725  001D7E  C037  F011         	movff	_select,??_button_B
  3726  001D82  C038  F012         	movff	_select+1,??_button_B+1
  3727                           
  3728                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3729                           ; Switch size 1, requested type "space"
  3730                           ; Number of cases is 1, Range of values is 0 to 0
  3731                           ; switch strategies available:
  3732                           ; Name         Instructions Cycles
  3733                           ; simple_byte            4     3 (average)
  3734                           ;	Chosen strategy is simple_byte
  3735  001D86  5012               	movf	??_button_B+1,w,c
  3736  001D88  0A00               	xorlw	0	; case 0
  3737  001D8A  A4D8               	btfss	status,2,c
  3738  001D8C  0012               	return	
  3739                           
  3740                           ; Switch size 1, requested type "space"
  3741                           ; Number of cases is 4, Range of values is 1 to 4
  3742                           ; switch strategies available:
  3743                           ; Name         Instructions Cycles
  3744                           ; simple_byte           13     7 (average)
  3745                           ;	Chosen strategy is simple_byte
  3746  001D8E  5011               	movf	??_button_B,w,c
  3747  001D90  0A01               	xorlw	1	; case 1
  3748  001D92  B4D8               	btfsc	status,2,c
  3749  001D94  D7D8               	goto	l2619
  3750  001D96  0A03               	xorlw	3	; case 2
  3751  001D98  B4D8               	btfsc	status,2,c
  3752  001D9A  D7DC               	goto	l2623
  3753  001D9C  0A01               	xorlw	1	; case 3
  3754  001D9E  B4D8               	btfsc	status,2,c
  3755  001DA0  D7E0               	goto	l2627
  3756  001DA2  0A07               	xorlw	7	; case 4
  3757  001DA4  A4D8               	btfss	status,2,c
  3758  001DA6  0012               	return	
  3759  001DA8  D7E3               	goto	l2631
  3760  001DAA  0012               	return		;funcret
  3761  001DAC                     __end_of_button_B:
  3762                           	opt stack 0
  3763                           tblptru	equ	0xFF8
  3764                           tblptrh	equ	0xFF7
  3765                           tblptrl	equ	0xFF6
  3766                           tablat	equ	0xFF5
  3767                           prodh	equ	0xFF4
  3768                           prodl	equ	0xFF3
  3769                           intcon	equ	0xFF2
  3770                           postinc0	equ	0xFEE
  3771                           wreg	equ	0xFE8
  3772                           postdec1	equ	0xFE5
  3773                           fsr1l	equ	0xFE1
  3774                           indf2	equ	0xFDF
  3775                           postinc2	equ	0xFDE
  3776                           postdec2	equ	0xFDD
  3777                           fsr2h	equ	0xFDA
  3778                           fsr2l	equ	0xFD9
  3779                           status	equ	0xFD8
  3780                           
  3781 ;; *************** function _menu_submenu_pin *****************
  3782 ;; Defined at:
  3783 ;;		line 180 in file "main.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;		None
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;		None
  3788 ;; Return value:  Size  Location     Type
  3789 ;;		None               void
  3790 ;; Registers used:
  3791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3801 ;;Total ram usage:        0 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; Hardware stack levels required when called:    6
  3804 ;; This function calls:
  3805 ;;		_lcd_init
  3806 ;;		_lcd_write
  3807 ;; This function is called by:
  3808 ;;		_button_B
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	text20
  3813  001E08                     __ptext20:
  3814                           	opt stack 0
  3815  001E08                     _menu_submenu_pin:
  3816                           	opt stack 22
  3817                           
  3818                           ;main.c: 182: lcd_init();
  3819                           
  3820                           ;incstack = 0
  3821  001E08  ECB4  F00D         	call	_lcd_init	;wreg free
  3822                           
  3823                           ;main.c: 183: lcd_write(1,1,"Pin");
  3824  001E0C  0E00               	movlw	0
  3825  001E0E  6E0C               	movwf	lcd_write@column+1,c
  3826  001E10  0E01               	movlw	1
  3827  001E12  6E0B               	movwf	lcd_write@column,c
  3828  001E14  0E00               	movlw	0
  3829  001E16  6E0E               	movwf	lcd_write@row+1,c
  3830  001E18  0E01               	movlw	1
  3831  001E1A  6E0D               	movwf	lcd_write@row,c
  3832  001E1C  0E6C               	movlw	low STR_6
  3833  001E1E  6E0F               	movwf	lcd_write@string,c
  3834  001E20  0E0F               	movlw	high STR_6
  3835  001E22  6E10               	movwf	lcd_write@string+1,c
  3836  001E24  ECBA  F010         	call	_lcd_write	;wreg free
  3837                           
  3838                           ;main.c: 184: lcd_write(10,1,"Cambiar");
  3839  001E28  0E00               	movlw	0
  3840  001E2A  6E0C               	movwf	lcd_write@column+1,c
  3841  001E2C  0E0A               	movlw	10
  3842  001E2E  6E0B               	movwf	lcd_write@column,c
  3843  001E30  0E00               	movlw	0
  3844  001E32  6E0E               	movwf	lcd_write@row+1,c
  3845  001E34  0E01               	movlw	1
  3846  001E36  6E0D               	movwf	lcd_write@row,c
  3847  001E38  0E30               	movlw	low STR_27
  3848  001E3A  6E0F               	movwf	lcd_write@string,c
  3849  001E3C  0E0F               	movlw	high STR_27
  3850  001E3E  6E10               	movwf	lcd_write@string+1,c
  3851  001E40  ECBA  F010         	call	_lcd_write	;wreg free
  3852                           
  3853                           ;main.c: 185: lcd_write(10,2,"Reset");
  3854  001E44  0E00               	movlw	0
  3855  001E46  6E0C               	movwf	lcd_write@column+1,c
  3856  001E48  0E0A               	movlw	10
  3857  001E4A  6E0B               	movwf	lcd_write@column,c
  3858  001E4C  0E00               	movlw	0
  3859  001E4E  6E0E               	movwf	lcd_write@row+1,c
  3860  001E50  0E02               	movlw	2
  3861  001E52  6E0D               	movwf	lcd_write@row,c
  3862  001E54  0E53               	movlw	low STR_28
  3863  001E56  6E0F               	movwf	lcd_write@string,c
  3864  001E58  0E0F               	movlw	high STR_28
  3865  001E5A  6E10               	movwf	lcd_write@string+1,c
  3866  001E5C  ECBA  F010         	call	_lcd_write	;wreg free
  3867  001E60  0012               	return		;funcret
  3868  001E62                     __end_of_menu_submenu_pin:
  3869                           	opt stack 0
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           prodh	equ	0xFF4
  3875                           prodl	equ	0xFF3
  3876                           intcon	equ	0xFF2
  3877                           postinc0	equ	0xFEE
  3878                           wreg	equ	0xFE8
  3879                           postdec1	equ	0xFE5
  3880                           fsr1l	equ	0xFE1
  3881                           indf2	equ	0xFDF
  3882                           postinc2	equ	0xFDE
  3883                           postdec2	equ	0xFDD
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _menu_submenu_clock *****************
  3889 ;; Defined at:
  3890 ;;		line 171 in file "main.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;		None               void
  3897 ;; Registers used:
  3898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    6
  3911 ;; This function calls:
  3912 ;;		_lcd_init
  3913 ;;		_lcd_write
  3914 ;; This function is called by:
  3915 ;;		_button_B
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text21
  3920  001E62                     __ptext21:
  3921                           	opt stack 0
  3922  001E62                     _menu_submenu_clock:
  3923                           	opt stack 22
  3924                           
  3925                           ;main.c: 173: lcd_init();
  3926                           
  3927                           ;incstack = 0
  3928  001E62  ECB4  F00D         	call	_lcd_init	;wreg free
  3929                           
  3930                           ;main.c: 174: lcd_write(1,1,"Reloj");
  3931  001E66  0E00               	movlw	0
  3932  001E68  6E0C               	movwf	lcd_write@column+1,c
  3933  001E6A  0E01               	movlw	1
  3934  001E6C  6E0B               	movwf	lcd_write@column,c
  3935  001E6E  0E00               	movlw	0
  3936  001E70  6E0E               	movwf	lcd_write@row+1,c
  3937  001E72  0E01               	movlw	1
  3938  001E74  6E0D               	movwf	lcd_write@row,c
  3939  001E76  0E4D               	movlw	low STR_5
  3940  001E78  6E0F               	movwf	lcd_write@string,c
  3941  001E7A  0E0F               	movlw	high STR_5
  3942  001E7C  6E10               	movwf	lcd_write@string+1,c
  3943  001E7E  ECBA  F010         	call	_lcd_write	;wreg free
  3944                           
  3945                           ;main.c: 175: lcd_write(10,1,"Fecha");
  3946  001E82  0E00               	movlw	0
  3947  001E84  6E0C               	movwf	lcd_write@column+1,c
  3948  001E86  0E0A               	movlw	10
  3949  001E88  6E0B               	movwf	lcd_write@column,c
  3950  001E8A  0E00               	movlw	0
  3951  001E8C  6E0E               	movwf	lcd_write@row+1,c
  3952  001E8E  0E01               	movlw	1
  3953  001E90  6E0D               	movwf	lcd_write@row,c
  3954  001E92  0E47               	movlw	low STR_24
  3955  001E94  6E0F               	movwf	lcd_write@string,c
  3956  001E96  0E0F               	movlw	high STR_24
  3957  001E98  6E10               	movwf	lcd_write@string+1,c
  3958  001E9A  ECBA  F010         	call	_lcd_write	;wreg free
  3959                           
  3960                           ;main.c: 176: lcd_write(10,2,"Hora");
  3961  001E9E  0E00               	movlw	0
  3962  001EA0  6E0C               	movwf	lcd_write@column+1,c
  3963  001EA2  0E0A               	movlw	10
  3964  001EA4  6E0B               	movwf	lcd_write@column,c
  3965  001EA6  0E00               	movlw	0
  3966  001EA8  6E0E               	movwf	lcd_write@row+1,c
  3967  001EAA  0E02               	movlw	2
  3968  001EAC  6E0D               	movwf	lcd_write@row,c
  3969  001EAE  0E59               	movlw	low STR_25
  3970  001EB0  6E0F               	movwf	lcd_write@string,c
  3971  001EB2  0E0F               	movlw	high STR_25
  3972  001EB4  6E10               	movwf	lcd_write@string+1,c
  3973  001EB6  ECBA  F010         	call	_lcd_write	;wreg free
  3974  001EBA  0012               	return		;funcret
  3975  001EBC                     __end_of_menu_submenu_clock:
  3976                           	opt stack 0
  3977                           tblptru	equ	0xFF8
  3978                           tblptrh	equ	0xFF7
  3979                           tblptrl	equ	0xFF6
  3980                           tablat	equ	0xFF5
  3981                           prodh	equ	0xFF4
  3982                           prodl	equ	0xFF3
  3983                           intcon	equ	0xFF2
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           postdec1	equ	0xFE5
  3987                           fsr1l	equ	0xFE1
  3988                           indf2	equ	0xFDF
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function _menu_submenu_alarm *****************
  3996 ;; Defined at:
  3997 ;;		line 189 in file "main.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;		None
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;		None
  4002 ;; Return value:  Size  Location     Type
  4003 ;;		None               void
  4004 ;; Registers used:
  4005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4015 ;;Total ram usage:        0 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    6
  4018 ;; This function calls:
  4019 ;;		_lcd_init
  4020 ;;		_lcd_write
  4021 ;; This function is called by:
  4022 ;;		_button_B
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text22
  4027  001EBC                     __ptext22:
  4028                           	opt stack 0
  4029  001EBC                     _menu_submenu_alarm:
  4030                           	opt stack 22
  4031                           
  4032                           ;main.c: 191: lcd_init();
  4033                           
  4034                           ;incstack = 0
  4035  001EBC  ECB4  F00D         	call	_lcd_init	;wreg free
  4036                           
  4037                           ;main.c: 192: lcd_write(1,1,"Alarma");
  4038  001EC0  0E00               	movlw	0
  4039  001EC2  6E0C               	movwf	lcd_write@column+1,c
  4040  001EC4  0E01               	movlw	1
  4041  001EC6  6E0B               	movwf	lcd_write@column,c
  4042  001EC8  0E00               	movlw	0
  4043  001ECA  6E0E               	movwf	lcd_write@row+1,c
  4044  001ECC  0E01               	movlw	1
  4045  001ECE  6E0D               	movwf	lcd_write@row,c
  4046  001ED0  0E40               	movlw	low STR_7
  4047  001ED2  6E0F               	movwf	lcd_write@string,c
  4048  001ED4  0E0F               	movlw	high STR_7
  4049  001ED6  6E10               	movwf	lcd_write@string+1,c
  4050  001ED8  ECBA  F010         	call	_lcd_write	;wreg free
  4051                           
  4052                           ;main.c: 193: lcd_write(10,1,"Volumen");
  4053  001EDC  0E00               	movlw	0
  4054  001EDE  6E0C               	movwf	lcd_write@column+1,c
  4055  001EE0  0E0A               	movlw	10
  4056  001EE2  6E0B               	movwf	lcd_write@column,c
  4057  001EE4  0E00               	movlw	0
  4058  001EE6  6E0E               	movwf	lcd_write@row+1,c
  4059  001EE8  0E01               	movlw	1
  4060  001EEA  6E0D               	movwf	lcd_write@row,c
  4061  001EEC  0E28               	movlw	low STR_30
  4062  001EEE  6E0F               	movwf	lcd_write@string,c
  4063  001EF0  0E0F               	movlw	high STR_30
  4064  001EF2  6E10               	movwf	lcd_write@string+1,c
  4065  001EF4  ECBA  F010         	call	_lcd_write	;wreg free
  4066                           
  4067                           ;main.c: 194: lcd_write(10,2,"Tono");
  4068  001EF8  0E00               	movlw	0
  4069  001EFA  6E0C               	movwf	lcd_write@column+1,c
  4070  001EFC  0E0A               	movlw	10
  4071  001EFE  6E0B               	movwf	lcd_write@column,c
  4072  001F00  0E00               	movlw	0
  4073  001F02  6E0E               	movwf	lcd_write@row+1,c
  4074  001F04  0E02               	movlw	2
  4075  001F06  6E0D               	movwf	lcd_write@row,c
  4076  001F08  0E5E               	movlw	low STR_31
  4077  001F0A  6E0F               	movwf	lcd_write@string,c
  4078  001F0C  0E0F               	movlw	high STR_31
  4079  001F0E  6E10               	movwf	lcd_write@string+1,c
  4080  001F10  ECBA  F010         	call	_lcd_write	;wreg free
  4081  001F14  0012               	return		;funcret
  4082  001F16                     __end_of_menu_submenu_alarm:
  4083                           	opt stack 0
  4084                           tblptru	equ	0xFF8
  4085                           tblptrh	equ	0xFF7
  4086                           tblptrl	equ	0xFF6
  4087                           tablat	equ	0xFF5
  4088                           prodh	equ	0xFF4
  4089                           prodl	equ	0xFF3
  4090                           intcon	equ	0xFF2
  4091                           postinc0	equ	0xFEE
  4092                           wreg	equ	0xFE8
  4093                           postdec1	equ	0xFE5
  4094                           fsr1l	equ	0xFE1
  4095                           indf2	equ	0xFDF
  4096                           postinc2	equ	0xFDE
  4097                           postdec2	equ	0xFDD
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function _menu_submenu_activate *****************
  4103 ;; Defined at:
  4104 ;;		line 162 in file "main.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;		None
  4107 ;; Auto vars:     Size  Location     Type
  4108 ;;		None
  4109 ;; Return value:  Size  Location     Type
  4110 ;;		None               void
  4111 ;; Registers used:
  4112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4113 ;; Tracked objects:
  4114 ;;		On entry : 0/0
  4115 ;;		On exit  : 0/0
  4116 ;;		Unchanged: 0/0
  4117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4122 ;;Total ram usage:        0 bytes
  4123 ;; Hardware stack levels used:    1
  4124 ;; Hardware stack levels required when called:    6
  4125 ;; This function calls:
  4126 ;;		_lcd_init
  4127 ;;		_lcd_write
  4128 ;; This function is called by:
  4129 ;;		_button_B
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text23
  4134  001F16                     __ptext23:
  4135                           	opt stack 0
  4136  001F16                     _menu_submenu_activate:
  4137                           	opt stack 22
  4138                           
  4139                           ;main.c: 164: lcd_init();
  4140                           
  4141                           ;incstack = 0
  4142  001F16  ECB4  F00D         	call	_lcd_init	;wreg free
  4143                           
  4144                           ;main.c: 165: lcd_write(1,1,"Activar");
  4145  001F1A  0E00               	movlw	0
  4146  001F1C  6E0C               	movwf	lcd_write@column+1,c
  4147  001F1E  0E01               	movlw	1
  4148  001F20  6E0B               	movwf	lcd_write@column,c
  4149  001F22  0E00               	movlw	0
  4150  001F24  6E0E               	movwf	lcd_write@row+1,c
  4151  001F26  0E01               	movlw	1
  4152  001F28  6E0D               	movwf	lcd_write@row,c
  4153  001F2A  0E38               	movlw	low STR_4
  4154  001F2C  6E0F               	movwf	lcd_write@string,c
  4155  001F2E  0E0F               	movlw	high STR_4
  4156  001F30  6E10               	movwf	lcd_write@string+1,c
  4157  001F32  ECBA  F010         	call	_lcd_write	;wreg free
  4158                           
  4159                           ;main.c: 166: lcd_write(10,1,"SI");
  4160  001F36  0E00               	movlw	0
  4161  001F38  6E0C               	movwf	lcd_write@column+1,c
  4162  001F3A  0E0A               	movlw	10
  4163  001F3C  6E0B               	movwf	lcd_write@column,c
  4164  001F3E  0E00               	movlw	0
  4165  001F40  6E0E               	movwf	lcd_write@row+1,c
  4166  001F42  0E01               	movlw	1
  4167  001F44  6E0D               	movwf	lcd_write@row,c
  4168  001F46  0E70               	movlw	low STR_21
  4169  001F48  6E0F               	movwf	lcd_write@string,c
  4170  001F4A  0E0F               	movlw	high STR_21
  4171  001F4C  6E10               	movwf	lcd_write@string+1,c
  4172  001F4E  ECBA  F010         	call	_lcd_write	;wreg free
  4173                           
  4174                           ;main.c: 167: lcd_write(10,2,"NO");
  4175  001F52  0E00               	movlw	0
  4176  001F54  6E0C               	movwf	lcd_write@column+1,c
  4177  001F56  0E0A               	movlw	10
  4178  001F58  6E0B               	movwf	lcd_write@column,c
  4179  001F5A  0E00               	movlw	0
  4180  001F5C  6E0E               	movwf	lcd_write@row+1,c
  4181  001F5E  0E02               	movlw	2
  4182  001F60  6E0D               	movwf	lcd_write@row,c
  4183  001F62  0E73               	movlw	low STR_22
  4184  001F64  6E0F               	movwf	lcd_write@string,c
  4185  001F66  0E0F               	movlw	high STR_22
  4186  001F68  6E10               	movwf	lcd_write@string+1,c
  4187  001F6A  ECBA  F010         	call	_lcd_write	;wreg free
  4188  001F6E  0012               	return		;funcret
  4189  001F70                     __end_of_menu_submenu_activate:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           intcon	equ	0xFF2
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           postdec1	equ	0xFE5
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function _button_A *****************
  4210 ;; Defined at:
  4211 ;;		line 145 in file "main.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;		None               void
  4218 ;; Registers used:
  4219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4229 ;;Total ram usage:        0 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    7
  4232 ;; This function calls:
  4233 ;;		_menu_home
  4234 ;;		_menu_iterator
  4235 ;;		_menu_submenu_iterator
  4236 ;; This function is called by:
  4237 ;;		_keyboard_control
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text24
  4242  0020A0                     __ptext24:
  4243                           	opt stack 0
  4244  0020A0                     _button_A:
  4245                           	opt stack 22
  4246                           
  4247                           ;main.c: 147: if(menu == 0){
  4248                           
  4249                           ;incstack = 0
  4250  0020A0  5031               	movf	_menu,w,c
  4251  0020A2  1032               	iorwf	_menu+1,w,c
  4252  0020A4  A4D8               	btfss	status,2,c
  4253  0020A6  D007               	goto	l2609
  4254                           
  4255                           ;main.c: 148: menu_home();
  4256  0020A8  ECF4  F00D         	call	_menu_home	;wreg free
  4257                           
  4258                           ;main.c: 149: menu = 1;
  4259  0020AC  0E00               	movlw	0
  4260  0020AE  6E32               	movwf	_menu+1,c
  4261  0020B0  0E01               	movlw	1
  4262  0020B2  6E31               	movwf	_menu,c
  4263                           
  4264                           ;main.c: 150: } else {
  4265  0020B4  0012               	return	
  4266  0020B6                     l2609:
  4267                           
  4268                           ;main.c: 152: if (submenu == 0){
  4269  0020B6  503D               	movf	_submenu,w,c
  4270  0020B8  103E               	iorwf	_submenu+1,w,c
  4271  0020BA  A4D8               	btfss	status,2,c
  4272  0020BC  D003               	goto	l2613
  4273                           
  4274                           ;main.c: 153: menu_iterator();
  4275  0020BE  EC47  F00A         	call	_menu_iterator	;wreg free
  4276  0020C2  D000               	goto	l2613
  4277  0020C4                     l2613:
  4278                           
  4279                           ;main.c: 154: }
  4280                           ;main.c: 156: if (submenu == 1){
  4281  0020C4  043D               	decf	_submenu,w,c
  4282  0020C6  103E               	iorwf	_submenu+1,w,c
  4283  0020C8  A4D8               	btfss	status,2,c
  4284  0020CA  0012               	return	
  4285                           
  4286                           ;main.c: 157: menu_submenu_iterator();
  4287  0020CC  EC15  F00D         	call	_menu_submenu_iterator	;wreg free
  4288  0020D0  0012               	return	
  4289  0020D2  0012               	return		;funcret
  4290  0020D4                     __end_of_button_A:
  4291                           	opt stack 0
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           prodh	equ	0xFF4
  4297                           prodl	equ	0xFF3
  4298                           intcon	equ	0xFF2
  4299                           postinc0	equ	0xFEE
  4300                           wreg	equ	0xFE8
  4301                           postdec1	equ	0xFE5
  4302                           fsr1l	equ	0xFE1
  4303                           indf2	equ	0xFDF
  4304                           postinc2	equ	0xFDE
  4305                           postdec2	equ	0xFDD
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _menu_submenu_iterator *****************
  4311 ;; Defined at:
  4312 ;;		line 128 in file "main.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;		None               void
  4319 ;; Registers used:
  4320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4328 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4329 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4330 ;;Total ram usage:        2 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    6
  4333 ;; This function calls:
  4334 ;;		_lcd_write
  4335 ;; This function is called by:
  4336 ;;		_button_A
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text25
  4341  001A2A                     __ptext25:
  4342                           	opt stack 0
  4343  001A2A                     _menu_submenu_iterator:
  4344                           	opt stack 22
  4345                           
  4346                           ;main.c: 130: switch(select_op){
  4347                           
  4348                           ;incstack = 0
  4349  001A2A  D042               	goto	l2469
  4350  001A2C                     l2455:
  4351                           
  4352                           ;main.c: 132: lcd_write(9,1,">");
  4353  001A2C  0E00               	movlw	0
  4354  001A2E  6E0C               	movwf	lcd_write@column+1,c
  4355  001A30  0E09               	movlw	9
  4356  001A32  6E0B               	movwf	lcd_write@column,c
  4357  001A34  0E00               	movlw	0
  4358  001A36  6E0E               	movwf	lcd_write@row+1,c
  4359  001A38  0E01               	movlw	1
  4360  001A3A  6E0D               	movwf	lcd_write@row,c
  4361  001A3C  0E7C               	movlw	low STR_8
  4362  001A3E  6E0F               	movwf	lcd_write@string,c
  4363  001A40  0E0F               	movlw	high STR_8
  4364  001A42  6E10               	movwf	lcd_write@string+1,c
  4365  001A44  ECBA  F010         	call	_lcd_write	;wreg free
  4366                           
  4367                           ;main.c: 133: select_op = 2;
  4368  001A48  0E00               	movlw	0
  4369  001A4A  6E3A               	movwf	_select_op+1,c
  4370  001A4C  0E02               	movlw	2
  4371  001A4E  6E39               	movwf	_select_op,c
  4372                           
  4373                           ;main.c: 134: lcd_write(9,2," ");
  4374  001A50  0E00               	movlw	0
  4375  001A52  6E0C               	movwf	lcd_write@column+1,c
  4376  001A54  0E09               	movlw	9
  4377  001A56  6E0B               	movwf	lcd_write@column,c
  4378  001A58  0E00               	movlw	0
  4379  001A5A  6E0E               	movwf	lcd_write@row+1,c
  4380  001A5C  0E02               	movlw	2
  4381  001A5E  6E0D               	movwf	lcd_write@row,c
  4382  001A60  0E76               	movlw	low STR_9
  4383  001A62  6E0F               	movwf	lcd_write@string,c
  4384  001A64  0E0F               	movlw	high STR_9
  4385  001A66  6E10               	movwf	lcd_write@string+1,c
  4386  001A68  ECBA  F010         	call	_lcd_write	;wreg free
  4387                           
  4388                           ;main.c: 135: break;
  4389  001A6C  0012               	return	
  4390  001A6E                     l2461:
  4391                           
  4392                           ;main.c: 137: lcd_write(9,2,">");
  4393  001A6E  0E00               	movlw	0
  4394  001A70  6E0C               	movwf	lcd_write@column+1,c
  4395  001A72  0E09               	movlw	9
  4396  001A74  6E0B               	movwf	lcd_write@column,c
  4397  001A76  0E00               	movlw	0
  4398  001A78  6E0E               	movwf	lcd_write@row+1,c
  4399  001A7A  0E02               	movlw	2
  4400  001A7C  6E0D               	movwf	lcd_write@row,c
  4401  001A7E  0E7C               	movlw	low STR_8
  4402  001A80  6E0F               	movwf	lcd_write@string,c
  4403  001A82  0E0F               	movlw	high STR_8
  4404  001A84  6E10               	movwf	lcd_write@string+1,c
  4405  001A86  ECBA  F010         	call	_lcd_write	;wreg free
  4406                           
  4407                           ;main.c: 138: select_op = 1;
  4408  001A8A  0E00               	movlw	0
  4409  001A8C  6E3A               	movwf	_select_op+1,c
  4410  001A8E  0E01               	movlw	1
  4411  001A90  6E39               	movwf	_select_op,c
  4412                           
  4413                           ;main.c: 139: lcd_write(9,1," ");
  4414  001A92  0E00               	movlw	0
  4415  001A94  6E0C               	movwf	lcd_write@column+1,c
  4416  001A96  0E09               	movlw	9
  4417  001A98  6E0B               	movwf	lcd_write@column,c
  4418  001A9A  0E00               	movlw	0
  4419  001A9C  6E0E               	movwf	lcd_write@row+1,c
  4420  001A9E  0E01               	movlw	1
  4421  001AA0  6E0D               	movwf	lcd_write@row,c
  4422  001AA2  0E76               	movlw	low STR_9
  4423  001AA4  6E0F               	movwf	lcd_write@string,c
  4424  001AA6  0E0F               	movlw	high STR_9
  4425  001AA8  6E10               	movwf	lcd_write@string+1,c
  4426  001AAA  ECBA  F010         	call	_lcd_write	;wreg free
  4427                           
  4428                           ;main.c: 141: }
  4429                           
  4430                           ;main.c: 140: break;
  4431  001AAE  0012               	return	
  4432  001AB0                     l2469:
  4433  001AB0  C039  F011         	movff	_select_op,??_menu_submenu_iterator
  4434  001AB4  C03A  F012         	movff	_select_op+1,??_menu_submenu_iterator+1
  4435                           
  4436                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4437                           ; Switch size 1, requested type "space"
  4438                           ; Number of cases is 1, Range of values is 0 to 0
  4439                           ; switch strategies available:
  4440                           ; Name         Instructions Cycles
  4441                           ; simple_byte            4     3 (average)
  4442                           ;	Chosen strategy is simple_byte
  4443  001AB8  5012               	movf	??_menu_submenu_iterator+1,w,c
  4444  001ABA  0A00               	xorlw	0	; case 0
  4445  001ABC  A4D8               	btfss	status,2,c
  4446  001ABE  0012               	return	
  4447                           
  4448                           ; Switch size 1, requested type "space"
  4449                           ; Number of cases is 2, Range of values is 1 to 2
  4450                           ; switch strategies available:
  4451                           ; Name         Instructions Cycles
  4452                           ; simple_byte            7     4 (average)
  4453                           ;	Chosen strategy is simple_byte
  4454  001AC0  5011               	movf	??_menu_submenu_iterator,w,c
  4455  001AC2  0A01               	xorlw	1	; case 1
  4456  001AC4  B4D8               	btfsc	status,2,c
  4457  001AC6  D7B2               	goto	l2455
  4458  001AC8  0A03               	xorlw	3	; case 2
  4459  001ACA  A4D8               	btfss	status,2,c
  4460  001ACC  0012               	return	
  4461  001ACE  D7CF               	goto	l2461
  4462  001AD0  0012               	return		;funcret
  4463  001AD2                     __end_of_menu_submenu_iterator:
  4464                           	opt stack 0
  4465                           tblptru	equ	0xFF8
  4466                           tblptrh	equ	0xFF7
  4467                           tblptrl	equ	0xFF6
  4468                           tablat	equ	0xFF5
  4469                           prodh	equ	0xFF4
  4470                           prodl	equ	0xFF3
  4471                           intcon	equ	0xFF2
  4472                           postinc0	equ	0xFEE
  4473                           wreg	equ	0xFE8
  4474                           postdec1	equ	0xFE5
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _menu_iterator *****************
  4484 ;; Defined at:
  4485 ;;		line 97 in file "main.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;		None               void
  4492 ;; Registers used:
  4493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4502 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4503 ;;Total ram usage:        2 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    6
  4506 ;; This function calls:
  4507 ;;		_lcd_write
  4508 ;; This function is called by:
  4509 ;;		_button_A
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text26
  4514  00148E                     __ptext26:
  4515                           	opt stack 0
  4516  00148E                     _menu_iterator:
  4517                           	opt stack 22
  4518                           
  4519                           ;main.c: 99: switch(selection){
  4520                           
  4521                           ;incstack = 0
  4522  00148E  D094               	goto	l2447
  4523  001490                     l2421:
  4524                           
  4525                           ;main.c: 101: lcd_write(1,1,">");
  4526  001490  0E00               	movlw	0
  4527  001492  6E0C               	movwf	lcd_write@column+1,c
  4528  001494  0E01               	movlw	1
  4529  001496  6E0B               	movwf	lcd_write@column,c
  4530  001498  0E00               	movlw	0
  4531  00149A  6E0E               	movwf	lcd_write@row+1,c
  4532  00149C  0E01               	movlw	1
  4533  00149E  6E0D               	movwf	lcd_write@row,c
  4534  0014A0  0E7C               	movlw	low STR_8
  4535  0014A2  6E0F               	movwf	lcd_write@string,c
  4536  0014A4  0E0F               	movlw	high STR_8
  4537  0014A6  6E10               	movwf	lcd_write@string+1,c
  4538  0014A8  ECBA  F010         	call	_lcd_write	;wreg free
  4539                           
  4540                           ;main.c: 102: selection = 2;
  4541  0014AC  0E00               	movlw	0
  4542  0014AE  6E3C               	movwf	_selection+1,c
  4543  0014B0  0E02               	movlw	2
  4544  0014B2  6E3B               	movwf	_selection,c
  4545                           
  4546                           ;main.c: 103: select = 1;
  4547  0014B4  0E00               	movlw	0
  4548  0014B6  6E38               	movwf	_select+1,c
  4549  0014B8  0E01               	movlw	1
  4550  0014BA  6E37               	movwf	_select,c
  4551                           
  4552                           ;main.c: 104: lcd_write(9,2," ");
  4553  0014BC  0E00               	movlw	0
  4554  0014BE  6E0C               	movwf	lcd_write@column+1,c
  4555  0014C0  0E09               	movlw	9
  4556  0014C2  6E0B               	movwf	lcd_write@column,c
  4557  0014C4  0E00               	movlw	0
  4558  0014C6  6E0E               	movwf	lcd_write@row+1,c
  4559  0014C8  0E02               	movlw	2
  4560  0014CA  6E0D               	movwf	lcd_write@row,c
  4561  0014CC  0E76               	movlw	low STR_9
  4562  0014CE  6E0F               	movwf	lcd_write@string,c
  4563  0014D0  0E0F               	movlw	high STR_9
  4564  0014D2  6E10               	movwf	lcd_write@string+1,c
  4565  0014D4  ECBA  F010         	call	_lcd_write	;wreg free
  4566                           
  4567                           ;main.c: 105: break;
  4568  0014D8  0012               	return	
  4569  0014DA                     l2427:
  4570                           
  4571                           ;main.c: 107: lcd_write(1,2,">");
  4572  0014DA  0E00               	movlw	0
  4573  0014DC  6E0C               	movwf	lcd_write@column+1,c
  4574  0014DE  0E01               	movlw	1
  4575  0014E0  6E0B               	movwf	lcd_write@column,c
  4576  0014E2  0E00               	movlw	0
  4577  0014E4  6E0E               	movwf	lcd_write@row+1,c
  4578  0014E6  0E02               	movlw	2
  4579  0014E8  6E0D               	movwf	lcd_write@row,c
  4580  0014EA  0E7C               	movlw	low STR_8
  4581  0014EC  6E0F               	movwf	lcd_write@string,c
  4582  0014EE  0E0F               	movlw	high STR_8
  4583  0014F0  6E10               	movwf	lcd_write@string+1,c
  4584  0014F2  ECBA  F010         	call	_lcd_write	;wreg free
  4585                           
  4586                           ;main.c: 108: selection = 3;
  4587  0014F6  0E00               	movlw	0
  4588  0014F8  6E3C               	movwf	_selection+1,c
  4589  0014FA  0E03               	movlw	3
  4590  0014FC  6E3B               	movwf	_selection,c
  4591                           
  4592                           ;main.c: 109: select = 2;
  4593  0014FE  0E00               	movlw	0
  4594  001500  6E38               	movwf	_select+1,c
  4595  001502  0E02               	movlw	2
  4596  001504  6E37               	movwf	_select,c
  4597                           
  4598                           ;main.c: 110: lcd_write(1,1," ");
  4599  001506  0E00               	movlw	0
  4600  001508  6E0C               	movwf	lcd_write@column+1,c
  4601  00150A  0E01               	movlw	1
  4602  00150C  6E0B               	movwf	lcd_write@column,c
  4603  00150E  0E00               	movlw	0
  4604  001510  6E0E               	movwf	lcd_write@row+1,c
  4605  001512  0E01               	movlw	1
  4606  001514  6E0D               	movwf	lcd_write@row,c
  4607  001516  0E76               	movlw	low STR_9
  4608  001518  6E0F               	movwf	lcd_write@string,c
  4609  00151A  0E0F               	movlw	high STR_9
  4610  00151C  6E10               	movwf	lcd_write@string+1,c
  4611  00151E  ECBA  F010         	call	_lcd_write	;wreg free
  4612                           
  4613                           ;main.c: 111: break;
  4614  001522  0012               	return	
  4615  001524                     l2433:
  4616                           
  4617                           ;main.c: 113: lcd_write(9,1,">");
  4618  001524  0E00               	movlw	0
  4619  001526  6E0C               	movwf	lcd_write@column+1,c
  4620  001528  0E09               	movlw	9
  4621  00152A  6E0B               	movwf	lcd_write@column,c
  4622  00152C  0E00               	movlw	0
  4623  00152E  6E0E               	movwf	lcd_write@row+1,c
  4624  001530  0E01               	movlw	1
  4625  001532  6E0D               	movwf	lcd_write@row,c
  4626  001534  0E7C               	movlw	low STR_8
  4627  001536  6E0F               	movwf	lcd_write@string,c
  4628  001538  0E0F               	movlw	high STR_8
  4629  00153A  6E10               	movwf	lcd_write@string+1,c
  4630  00153C  ECBA  F010         	call	_lcd_write	;wreg free
  4631                           
  4632                           ;main.c: 114: selection = 4;
  4633  001540  0E00               	movlw	0
  4634  001542  6E3C               	movwf	_selection+1,c
  4635  001544  0E04               	movlw	4
  4636  001546  6E3B               	movwf	_selection,c
  4637                           
  4638                           ;main.c: 115: select = 3;
  4639  001548  0E00               	movlw	0
  4640  00154A  6E38               	movwf	_select+1,c
  4641  00154C  0E03               	movlw	3
  4642  00154E  6E37               	movwf	_select,c
  4643                           
  4644                           ;main.c: 116: lcd_write(1,2," ");
  4645  001550  0E00               	movlw	0
  4646  001552  6E0C               	movwf	lcd_write@column+1,c
  4647  001554  0E01               	movlw	1
  4648  001556  6E0B               	movwf	lcd_write@column,c
  4649  001558  0E00               	movlw	0
  4650  00155A  6E0E               	movwf	lcd_write@row+1,c
  4651  00155C  0E02               	movlw	2
  4652  00155E  6E0D               	movwf	lcd_write@row,c
  4653  001560  0E76               	movlw	low STR_9
  4654  001562  6E0F               	movwf	lcd_write@string,c
  4655  001564  0E0F               	movlw	high STR_9
  4656  001566  6E10               	movwf	lcd_write@string+1,c
  4657  001568  ECBA  F010         	call	_lcd_write	;wreg free
  4658                           
  4659                           ;main.c: 117: break;
  4660  00156C  0012               	return	
  4661  00156E                     l2439:
  4662                           
  4663                           ;main.c: 119: lcd_write(9,2,">");
  4664  00156E  0E00               	movlw	0
  4665  001570  6E0C               	movwf	lcd_write@column+1,c
  4666  001572  0E09               	movlw	9
  4667  001574  6E0B               	movwf	lcd_write@column,c
  4668  001576  0E00               	movlw	0
  4669  001578  6E0E               	movwf	lcd_write@row+1,c
  4670  00157A  0E02               	movlw	2
  4671  00157C  6E0D               	movwf	lcd_write@row,c
  4672  00157E  0E7C               	movlw	low STR_8
  4673  001580  6E0F               	movwf	lcd_write@string,c
  4674  001582  0E0F               	movlw	high STR_8
  4675  001584  6E10               	movwf	lcd_write@string+1,c
  4676  001586  ECBA  F010         	call	_lcd_write	;wreg free
  4677                           
  4678                           ;main.c: 120: selection = 1;
  4679  00158A  0E00               	movlw	0
  4680  00158C  6E3C               	movwf	_selection+1,c
  4681  00158E  0E01               	movlw	1
  4682  001590  6E3B               	movwf	_selection,c
  4683                           
  4684                           ;main.c: 121: select = 4;
  4685  001592  0E00               	movlw	0
  4686  001594  6E38               	movwf	_select+1,c
  4687  001596  0E04               	movlw	4
  4688  001598  6E37               	movwf	_select,c
  4689                           
  4690                           ;main.c: 122: lcd_write(9,1," ");
  4691  00159A  0E00               	movlw	0
  4692  00159C  6E0C               	movwf	lcd_write@column+1,c
  4693  00159E  0E09               	movlw	9
  4694  0015A0  6E0B               	movwf	lcd_write@column,c
  4695  0015A2  0E00               	movlw	0
  4696  0015A4  6E0E               	movwf	lcd_write@row+1,c
  4697  0015A6  0E01               	movlw	1
  4698  0015A8  6E0D               	movwf	lcd_write@row,c
  4699  0015AA  0E76               	movlw	low STR_9
  4700  0015AC  6E0F               	movwf	lcd_write@string,c
  4701  0015AE  0E0F               	movlw	high STR_9
  4702  0015B0  6E10               	movwf	lcd_write@string+1,c
  4703  0015B2  ECBA  F010         	call	_lcd_write	;wreg free
  4704                           
  4705                           ;main.c: 124: }
  4706                           
  4707                           ;main.c: 123: break;
  4708  0015B6  0012               	return	
  4709  0015B8                     l2447:
  4710  0015B8  C03B  F011         	movff	_selection,??_menu_iterator
  4711  0015BC  C03C  F012         	movff	_selection+1,??_menu_iterator+1
  4712                           
  4713                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4714                           ; Switch size 1, requested type "space"
  4715                           ; Number of cases is 1, Range of values is 0 to 0
  4716                           ; switch strategies available:
  4717                           ; Name         Instructions Cycles
  4718                           ; simple_byte            4     3 (average)
  4719                           ;	Chosen strategy is simple_byte
  4720  0015C0  5012               	movf	??_menu_iterator+1,w,c
  4721  0015C2  0A00               	xorlw	0	; case 0
  4722  0015C4  A4D8               	btfss	status,2,c
  4723  0015C6  0012               	return	
  4724                           
  4725                           ; Switch size 1, requested type "space"
  4726                           ; Number of cases is 4, Range of values is 1 to 4
  4727                           ; switch strategies available:
  4728                           ; Name         Instructions Cycles
  4729                           ; simple_byte           13     7 (average)
  4730                           ;	Chosen strategy is simple_byte
  4731  0015C8  5011               	movf	??_menu_iterator,w,c
  4732  0015CA  0A01               	xorlw	1	; case 1
  4733  0015CC  B4D8               	btfsc	status,2,c
  4734  0015CE  D760               	goto	l2421
  4735  0015D0  0A03               	xorlw	3	; case 2
  4736  0015D2  B4D8               	btfsc	status,2,c
  4737  0015D4  D782               	goto	l2427
  4738  0015D6  0A01               	xorlw	1	; case 3
  4739  0015D8  B4D8               	btfsc	status,2,c
  4740  0015DA  D7A4               	goto	l2433
  4741  0015DC  0A07               	xorlw	7	; case 4
  4742  0015DE  A4D8               	btfss	status,2,c
  4743  0015E0  0012               	return	
  4744  0015E2  D7C5               	goto	l2439
  4745  0015E4  0012               	return		;funcret
  4746  0015E6                     __end_of_menu_iterator:
  4747                           	opt stack 0
  4748                           tblptru	equ	0xFF8
  4749                           tblptrh	equ	0xFF7
  4750                           tblptrl	equ	0xFF6
  4751                           tablat	equ	0xFF5
  4752                           prodh	equ	0xFF4
  4753                           prodl	equ	0xFF3
  4754                           intcon	equ	0xFF2
  4755                           postinc0	equ	0xFEE
  4756                           wreg	equ	0xFE8
  4757                           postdec1	equ	0xFE5
  4758                           fsr1l	equ	0xFE1
  4759                           indf2	equ	0xFDF
  4760                           postinc2	equ	0xFDE
  4761                           postdec2	equ	0xFDD
  4762                           fsr2h	equ	0xFDA
  4763                           fsr2l	equ	0xFD9
  4764                           status	equ	0xFD8
  4765                           
  4766 ;; *************** function _menu_home *****************
  4767 ;; Defined at:
  4768 ;;		line 89 in file "main.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;		None               void
  4775 ;; Registers used:
  4776 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4786 ;;Total ram usage:        0 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    6
  4789 ;; This function calls:
  4790 ;;		_lcd_init
  4791 ;;		_lcd_write
  4792 ;; This function is called by:
  4793 ;;		_button_A
  4794 ;;		_button_C
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text27
  4799  001BE8                     __ptext27:
  4800                           	opt stack 0
  4801  001BE8                     _menu_home:
  4802                           	opt stack 22
  4803                           
  4804                           ;main.c: 90: lcd_init();
  4805                           
  4806                           ;incstack = 0
  4807  001BE8  ECB4  F00D         	call	_lcd_init	;wreg free
  4808                           
  4809                           ;main.c: 91: lcd_write(2,1,"Activar");
  4810  001BEC  0E00               	movlw	0
  4811  001BEE  6E0C               	movwf	lcd_write@column+1,c
  4812  001BF0  0E02               	movlw	2
  4813  001BF2  6E0B               	movwf	lcd_write@column,c
  4814  001BF4  0E00               	movlw	0
  4815  001BF6  6E0E               	movwf	lcd_write@row+1,c
  4816  001BF8  0E01               	movlw	1
  4817  001BFA  6E0D               	movwf	lcd_write@row,c
  4818  001BFC  0E38               	movlw	low STR_4
  4819  001BFE  6E0F               	movwf	lcd_write@string,c
  4820  001C00  0E0F               	movlw	high STR_4
  4821  001C02  6E10               	movwf	lcd_write@string+1,c
  4822  001C04  ECBA  F010         	call	_lcd_write	;wreg free
  4823                           
  4824                           ;main.c: 92: lcd_write(2,2,"Reloj");
  4825  001C08  0E00               	movlw	0
  4826  001C0A  6E0C               	movwf	lcd_write@column+1,c
  4827  001C0C  0E02               	movlw	2
  4828  001C0E  6E0B               	movwf	lcd_write@column,c
  4829  001C10  0E00               	movlw	0
  4830  001C12  6E0E               	movwf	lcd_write@row+1,c
  4831  001C14  0E02               	movlw	2
  4832  001C16  6E0D               	movwf	lcd_write@row,c
  4833  001C18  0E4D               	movlw	low STR_5
  4834  001C1A  6E0F               	movwf	lcd_write@string,c
  4835  001C1C  0E0F               	movlw	high STR_5
  4836  001C1E  6E10               	movwf	lcd_write@string+1,c
  4837  001C20  ECBA  F010         	call	_lcd_write	;wreg free
  4838                           
  4839                           ;main.c: 93: lcd_write(10,1,"Pin");
  4840  001C24  0E00               	movlw	0
  4841  001C26  6E0C               	movwf	lcd_write@column+1,c
  4842  001C28  0E0A               	movlw	10
  4843  001C2A  6E0B               	movwf	lcd_write@column,c
  4844  001C2C  0E00               	movlw	0
  4845  001C2E  6E0E               	movwf	lcd_write@row+1,c
  4846  001C30  0E01               	movlw	1
  4847  001C32  6E0D               	movwf	lcd_write@row,c
  4848  001C34  0E6C               	movlw	low STR_6
  4849  001C36  6E0F               	movwf	lcd_write@string,c
  4850  001C38  0E0F               	movlw	high STR_6
  4851  001C3A  6E10               	movwf	lcd_write@string+1,c
  4852  001C3C  ECBA  F010         	call	_lcd_write	;wreg free
  4853                           
  4854                           ;main.c: 94: lcd_write(10,2,"Alarma");
  4855  001C40  0E00               	movlw	0
  4856  001C42  6E0C               	movwf	lcd_write@column+1,c
  4857  001C44  0E0A               	movlw	10
  4858  001C46  6E0B               	movwf	lcd_write@column,c
  4859  001C48  0E00               	movlw	0
  4860  001C4A  6E0E               	movwf	lcd_write@row+1,c
  4861  001C4C  0E02               	movlw	2
  4862  001C4E  6E0D               	movwf	lcd_write@row,c
  4863  001C50  0E40               	movlw	low STR_7
  4864  001C52  6E0F               	movwf	lcd_write@string,c
  4865  001C54  0E0F               	movlw	high STR_7
  4866  001C56  6E10               	movwf	lcd_write@string+1,c
  4867  001C58  ECBA  F010         	call	_lcd_write	;wreg free
  4868  001C5C  0012               	return		;funcret
  4869  001C5E                     __end_of_menu_home:
  4870                           	opt stack 0
  4871                           tblptru	equ	0xFF8
  4872                           tblptrh	equ	0xFF7
  4873                           tblptrl	equ	0xFF6
  4874                           tablat	equ	0xFF5
  4875                           prodh	equ	0xFF4
  4876                           prodl	equ	0xFF3
  4877                           intcon	equ	0xFF2
  4878                           postinc0	equ	0xFEE
  4879                           wreg	equ	0xFE8
  4880                           postdec1	equ	0xFE5
  4881                           fsr1l	equ	0xFE1
  4882                           indf2	equ	0xFDF
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           fsr2h	equ	0xFDA
  4886                           fsr2l	equ	0xFD9
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _lcd_write *****************
  4890 ;; Defined at:
  4891 ;;		line 37 in file "main.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  column          2   10[COMRAM] int 
  4894 ;;  row             2   12[COMRAM] int 
  4895 ;;  string          2   14[COMRAM] PTR unsigned char 
  4896 ;;		 -> STR_31(5), STR_30(8), STR_29(7), STR_28(6), 
  4897 ;;		 -> STR_27(8), STR_26(4), STR_25(5), STR_24(6), 
  4898 ;;		 -> STR_23(6), STR_22(3), STR_21(3), STR_20(8), 
  4899 ;;		 -> STR_19(2), STR_18(2), STR_17(2), STR_16(2), 
  4900 ;;		 -> STR_15(2), STR_14(2), STR_13(2), STR_12(2), 
  4901 ;;		 -> STR_11(2), STR_10(2), STR_9(2), STR_8(2), 
  4902 ;;		 -> STR_7(7), STR_6(4), STR_5(6), STR_4(8), 
  4903 ;;		 -> buffer1(20), STR_1(4), 
  4904 ;; Auto vars:     Size  Location     Type
  4905 ;;		None
  4906 ;; Return value:  Size  Location     Type
  4907 ;;		None               void
  4908 ;; Registers used:
  4909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4910 ;; Tracked objects:
  4911 ;;		On entry : 0/0
  4912 ;;		On exit  : 0/0
  4913 ;;		Unchanged: 0/0
  4914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4915 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4918 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4919 ;;Total ram usage:        6 bytes
  4920 ;; Hardware stack levels used:    1
  4921 ;; Hardware stack levels required when called:    5
  4922 ;; This function calls:
  4923 ;;		_lcd_gotoxy
  4924 ;;		_lcd_putrs
  4925 ;; This function is called by:
  4926 ;;		_home
  4927 ;;		_menu_home
  4928 ;;		_menu_iterator
  4929 ;;		_menu_submenu_iterator
  4930 ;;		_menu_submenu_activate
  4931 ;;		_menu_submenu_clock
  4932 ;;		_menu_submenu_pin
  4933 ;;		_menu_submenu_alarm
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	text28
  4938  002174                     __ptext28:
  4939                           	opt stack 0
  4940  002174                     _lcd_write:
  4941                           	opt stack 22
  4942                           
  4943                           ;main.c: 38: lcd_gotoxy(column, row);
  4944                           
  4945                           ;incstack = 0
  4946  002174  C00D  F005         	movff	lcd_write@row,lcd_gotoxy@y
  4947  002178  500B               	movf	lcd_write@column,w,c
  4948  00217A  EC97  F010         	call	_lcd_gotoxy
  4949                           
  4950                           ;main.c: 39: lcd_putrs(string);
  4951  00217E  C00F  F009         	movff	lcd_write@string,lcd_putrs@ptr
  4952  002182  C010  F00A         	movff	lcd_write@string+1,lcd_putrs@ptr+1
  4953  002186  ECB8  F00F         	call	_lcd_putrs	;wreg free
  4954  00218A  0012               	return		;funcret
  4955  00218C                     __end_of_lcd_write:
  4956                           	opt stack 0
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           postdec1	equ	0xFE5
  4967                           fsr1l	equ	0xFE1
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _lcd_putrs *****************
  4976 ;; Defined at:
  4977 ;;		line 221 in file "Unimic/unmc_01/sources/unmc_lcd_216.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  ptr             2    8[COMRAM] PTR const unsigned char 
  4980 ;;		 -> STR_33(2), STR_32(2), STR_31(5), STR_30(8), 
  4981 ;;		 -> STR_29(7), STR_28(6), STR_27(8), STR_26(4), 
  4982 ;;		 -> STR_25(5), STR_24(6), STR_23(6), STR_22(3), 
  4983 ;;		 -> STR_21(3), STR_20(8), STR_19(2), STR_18(2), 
  4984 ;;		 -> STR_17(2), STR_16(2), STR_15(2), STR_14(2), 
  4985 ;;		 -> STR_13(2), STR_12(2), STR_11(2), STR_10(2), 
  4986 ;;		 -> STR_9(2), STR_8(2), STR_7(7), STR_6(4), 
  4987 ;;		 -> STR_5(6), STR_4(8), buffer1(20), STR_1(4), 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;		None
  4990 ;; Return value:  Size  Location     Type
  4991 ;;		None               void
  4992 ;; Registers used:
  4993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4999 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5002 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5003 ;;Total ram usage:        2 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    4
  5006 ;; This function calls:
  5007 ;;		_lcd_putc
  5008 ;; This function is called by:
  5009 ;;		_lcd_write
  5010 ;;		_button_asterisk
  5011 ;;		_button_hash
  5012 ;;		_keyboard_control
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text29
  5017  001F70                     __ptext29:
  5018                           	opt stack 0
  5019  001F70                     _lcd_putrs:
  5020                           	opt stack 25
  5021                           
  5022                           ;unmc_lcd_216.c: 223: while(*ptr){
  5023                           
  5024                           ;incstack = 0
  5025  001F70  D015               	goto	l2077
  5026  001F72                     l2073:
  5027                           
  5028                           ;unmc_lcd_216.c: 224: lcd_putc(*ptr++);
  5029  001F72  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  5030  001F76  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  5031  001F7A  6AF8               	clrf	tblptru,c
  5032  001F7C  0E0E               	movlw	(high __ramtop+-1)
  5033  001F7E  64F7               	cpfsgt	tblptrh,c
  5034  001F80  D003               	bra	u1167
  5035  001F82  0008               	tblrd		*
  5036  001F84  50F5               	movf	tablat,w,c
  5037  001F86  D005               	bra	u1160
  5038  001F88                     u1167:
  5039  001F88  CFF6 FFE9          	movff	tblptrl,fsr0l
  5040  001F8C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5041  001F90  50EF               	movf	indf0,w,c
  5042  001F92                     u1160:
  5043  001F92  EC08  F010         	call	_lcd_putc
  5044  001F96  4A09               	infsnz	lcd_putrs@ptr,f,c
  5045  001F98  2A0A               	incf	lcd_putrs@ptr+1,f,c
  5046  001F9A  D000               	goto	l2077
  5047  001F9C                     l2077:
  5048  001F9C  C009  FFF6         	movff	lcd_putrs@ptr,tblptrl
  5049  001FA0  C00A  FFF7         	movff	lcd_putrs@ptr+1,tblptrh
  5050  001FA4  6AF8               	clrf	tblptru,c
  5051  001FA6  0E0E               	movlw	(high __ramtop+-1)
  5052  001FA8  64F7               	cpfsgt	tblptrh,c
  5053  001FAA  D003               	bra	u1177
  5054  001FAC  0008               	tblrd		*
  5055  001FAE  50F5               	movf	tablat,w,c
  5056  001FB0  D005               	bra	u1170
  5057  001FB2                     u1177:
  5058  001FB2  CFF6 FFE9          	movff	tblptrl,fsr0l
  5059  001FB6  CFF7 FFEA          	movff	tblptrh,fsr0h
  5060  001FBA  50EF               	movf	indf0,w,c
  5061  001FBC                     u1170:
  5062  001FBC  0900               	iorlw	0
  5063  001FBE  A4D8               	btfss	status,2,c
  5064  001FC0  D7D8               	goto	l2073
  5065  001FC2  0012               	return		;funcret
  5066  001FC4                     __end_of_lcd_putrs:
  5067                           	opt stack 0
  5068                           tblptru	equ	0xFF8
  5069                           tblptrh	equ	0xFF7
  5070                           tblptrl	equ	0xFF6
  5071                           tablat	equ	0xFF5
  5072                           prodh	equ	0xFF4
  5073                           prodl	equ	0xFF3
  5074                           intcon	equ	0xFF2
  5075                           indf0	equ	0xFEF
  5076                           postinc0	equ	0xFEE
  5077                           fsr0h	equ	0xFEA
  5078                           fsr0l	equ	0xFE9
  5079                           wreg	equ	0xFE8
  5080                           postdec1	equ	0xFE5
  5081                           fsr1l	equ	0xFE1
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _lcd_putc *****************
  5090 ;; Defined at:
  5091 ;;		line 172 in file "Unimic/unmc_01/sources/unmc_lcd_216.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;  c               1    wreg     unsigned char 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  c               1    7[COMRAM] unsigned char 
  5096 ;; Return value:  Size  Location     Type
  5097 ;;		None               void
  5098 ;; Registers used:
  5099 ;;		wreg, status,2, status,0, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5109 ;;Total ram usage:        1 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:    3
  5112 ;; This function calls:
  5113 ;;		_lcd_gotoxy
  5114 ;;		_lcd_send_byte
  5115 ;; This function is called by:
  5116 ;;		_lcd_putrs
  5117 ;;		_lcd_puts
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text30
  5122  002010                     __ptext30:
  5123                           	opt stack 0
  5124  002010                     _lcd_putc:
  5125                           	opt stack 25
  5126                           
  5127                           ;incstack = 0
  5128                           ;lcd_putc@c stored from wreg
  5129  002010  6E08               	movwf	lcd_putc@c,c
  5130                           
  5131                           ;unmc_lcd_216.c: 173: switch(c){
  5132  002012  D018               	goto	l2065
  5133  002014                     l2055:
  5134                           
  5135                           ;unmc_lcd_216.c: 175: lcd_send_byte(0,1);
  5136  002014  0E01               	movlw	1
  5137  002016  6E03               	movwf	lcd_send_byte@n,c
  5138  002018  0E00               	movlw	0
  5139  00201A  EC6A  F010         	call	_lcd_send_byte
  5140                           
  5141                           ;unmc_lcd_216.c: 176: break;
  5142  00201E  0012               	return	
  5143  002020                     l2057:
  5144                           
  5145                           ;unmc_lcd_216.c: 178: lcd_gotoxy(1,2);
  5146  002020  0E02               	movlw	2
  5147  002022  6E05               	movwf	lcd_gotoxy@y,c
  5148  002024  0E01               	movlw	1
  5149  002026  EC97  F010         	call	_lcd_gotoxy
  5150                           
  5151                           ;unmc_lcd_216.c: 179: break;
  5152  00202A  0012               	return	
  5153  00202C                     l2059:
  5154                           
  5155                           ;unmc_lcd_216.c: 181: lcd_send_byte(0,0x10);
  5156  00202C  0E10               	movlw	16
  5157  00202E  6E03               	movwf	lcd_send_byte@n,c
  5158  002030  0E00               	movlw	0
  5159  002032  EC6A  F010         	call	_lcd_send_byte
  5160                           
  5161                           ;unmc_lcd_216.c: 182: break;
  5162  002036  0012               	return	
  5163  002038                     l2061:
  5164                           
  5165                           ;unmc_lcd_216.c: 184: lcd_send_byte(1,c);
  5166  002038  C008  F003         	movff	lcd_putc@c,lcd_send_byte@n
  5167  00203C  0E01               	movlw	1
  5168  00203E  EC6A  F010         	call	_lcd_send_byte
  5169                           
  5170                           ;unmc_lcd_216.c: 186: }
  5171                           
  5172                           ;unmc_lcd_216.c: 185: break;
  5173  002042  0012               	return	
  5174  002044                     l2065:
  5175  002044  5008               	movf	lcd_putc@c,w,c
  5176                           
  5177                           ; Switch size 1, requested type "space"
  5178                           ; Number of cases is 3, Range of values is 8 to 12
  5179                           ; switch strategies available:
  5180                           ; Name         Instructions Cycles
  5181                           ; simple_byte           10     6 (average)
  5182                           ;	Chosen strategy is simple_byte
  5183  002046  0A08               	xorlw	8	; case 8
  5184  002048  B4D8               	btfsc	status,2,c
  5185  00204A  D7F0               	goto	l2059
  5186  00204C  0A02               	xorlw	2	; case 10
  5187  00204E  B4D8               	btfsc	status,2,c
  5188  002050  D7E7               	goto	l2057
  5189  002052  0A06               	xorlw	6	; case 12
  5190  002054  B4D8               	btfsc	status,2,c
  5191  002056  D7DE               	goto	l2055
  5192  002058  D7EF               	goto	l2061
  5193  00205A  0012               	return		;funcret
  5194  00205C                     __end_of_lcd_putc:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           indf0	equ	0xFEF
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           postdec1	equ	0xFE5
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function _lcd_gotoxy *****************
  5218 ;; Defined at:
  5219 ;;		line 158 in file "Unimic/unmc_01/sources/unmc_lcd_216.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;  x               1    wreg     unsigned char 
  5222 ;;  y               1    4[COMRAM] unsigned char 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  x               1    5[COMRAM] unsigned char 
  5225 ;;  address         1    6[COMRAM] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;		None               void
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0, cstack
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5235 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5236 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5238 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5239 ;;Total ram usage:        3 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    2
  5242 ;; This function calls:
  5243 ;;		_lcd_send_byte
  5244 ;; This function is called by:
  5245 ;;		_lcd_write
  5246 ;;		_lcd_putc
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text31
  5251  00212E                     __ptext31:
  5252                           	opt stack 0
  5253  00212E                     _lcd_gotoxy:
  5254                           	opt stack 25
  5255                           
  5256                           ;incstack = 0
  5257                           ;lcd_gotoxy@x stored from wreg
  5258  00212E  6E06               	movwf	lcd_gotoxy@x,c
  5259                           
  5260                           ;unmc_lcd_216.c: 159: int8 address;
  5261                           ;unmc_lcd_216.c: 161: if(y != 1)
  5262  002130  0405               	decf	lcd_gotoxy@y,w,c
  5263  002132  B4D8               	btfsc	status,2,c
  5264  002134  D002               	goto	l2047
  5265                           
  5266                           ;unmc_lcd_216.c: 162: address = 0x40;
  5267  002136  0E40               	movlw	64
  5268  002138  D001               	goto	L1
  5269  00213A                     l2047:
  5270                           
  5271                           ;unmc_lcd_216.c: 163: else
  5272                           ;unmc_lcd_216.c: 164: address=0;
  5273  00213A  0E00               	movlw	0
  5274  00213C                     L1:
  5275  00213C  6E07               	movwf	lcd_gotoxy@address,c
  5276  00213E  D000               	goto	l2049
  5277  002140                     l2049:
  5278                           
  5279                           ;unmc_lcd_216.c: 166: address += x-1;
  5280  002140  0406               	decf	lcd_gotoxy@x,w,c
  5281  002142  2607               	addwf	lcd_gotoxy@address,f,c
  5282                           
  5283                           ;unmc_lcd_216.c: 167: lcd_send_byte(0, 0x80 | address);
  5284  002144  5007               	movf	lcd_gotoxy@address,w,c
  5285  002146  0980               	iorlw	128
  5286  002148  6E03               	movwf	lcd_send_byte@n,c
  5287  00214A  0E00               	movlw	0
  5288  00214C  EC6A  F010         	call	_lcd_send_byte
  5289  002150  0012               	return		;funcret
  5290  002152                     __end_of_lcd_gotoxy:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodh	equ	0xFF4
  5297                           prodl	equ	0xFF3
  5298                           intcon	equ	0xFF2
  5299                           indf0	equ	0xFEF
  5300                           postinc0	equ	0xFEE
  5301                           fsr0h	equ	0xFEA
  5302                           fsr0l	equ	0xFE9
  5303                           wreg	equ	0xFE8
  5304                           postdec1	equ	0xFE5
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _lcd_init *****************
  5314 ;; Defined at:
  5315 ;;		line 119 in file "Unimic/unmc_01/sources/unmc_lcd_216.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  i               1    4[COMRAM] unsigned char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;		None               void
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5333 ;;Total ram usage:        1 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    2
  5336 ;; This function calls:
  5337 ;;		_Delay1KTCYx
  5338 ;;		_lcd_send_byte
  5339 ;;		_lcd_send_nibble
  5340 ;; This function is called by:
  5341 ;;		_setup
  5342 ;;		_home
  5343 ;;		_menu_home
  5344 ;;		_menu_submenu_activate
  5345 ;;		_menu_submenu_clock
  5346 ;;		_menu_submenu_pin
  5347 ;;		_menu_submenu_alarm
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text32
  5352  001B68                     __ptext32:
  5353                           	opt stack 0
  5354  001B68                     _lcd_init:
  5355                           	opt stack 27
  5356                           
  5357                           ;unmc_lcd_216.c: 120: int8 i;
  5358                           ;unmc_lcd_216.c: 122: TRISBbits.TRISB3=0;
  5359                           
  5360                           ;incstack = 0
  5361  001B68  9693               	bcf	3987,3,c	;volatile
  5362                           
  5363                           ;unmc_lcd_216.c: 123: TRISBbits.TRISB2=0;
  5364  001B6A  9493               	bcf	3987,2,c	;volatile
  5365                           
  5366                           ;unmc_lcd_216.c: 128: LATBbits.LATB3=0;
  5367  001B6C  968A               	bcf	3978,3,c	;volatile
  5368                           
  5369                           ;unmc_lcd_216.c: 129: LATBbits.LATB2=0;
  5370  001B6E  948A               	bcf	3978,2,c	;volatile
  5371                           
  5372                           ;unmc_lcd_216.c: 134: TRISBbits.TRISB4=0;
  5373  001B70  9893               	bcf	3987,4,c	;volatile
  5374                           
  5375                           ;unmc_lcd_216.c: 135: TRISBbits.TRISB5=0;
  5376  001B72  9A93               	bcf	3987,5,c	;volatile
  5377                           
  5378                           ;unmc_lcd_216.c: 136: TRISBbits.TRISB6=0;
  5379  001B74  9C93               	bcf	3987,6,c	;volatile
  5380                           
  5381                           ;unmc_lcd_216.c: 137: TRISBbits.TRISB7=0;
  5382  001B76  9E93               	bcf	3987,7,c	;volatile
  5383                           
  5384                           ;unmc_lcd_216.c: 139: Delay1KTCYx(8000000UL/800000UL);
  5385  001B78  0E0A               	movlw	10
  5386  001B7A  ECED  F010         	call	_Delay1KTCYx
  5387                           
  5388                           ;unmc_lcd_216.c: 140: Delay1KTCYx(8000000UL/800000UL);
  5389  001B7E  0E0A               	movlw	10
  5390  001B80  ECED  F010         	call	_Delay1KTCYx
  5391                           
  5392                           ;unmc_lcd_216.c: 141: Delay1KTCYx(8000000UL/800000UL);
  5393  001B84  0E0A               	movlw	10
  5394  001B86  ECED  F010         	call	_Delay1KTCYx
  5395                           
  5396                           ;unmc_lcd_216.c: 143: for(i=0 ;i < 3; i++){
  5397  001B8A  0E00               	movlw	0
  5398  001B8C  6E05               	movwf	lcd_init@i,c
  5399  001B8E                     l2145:
  5400  001B8E  0E02               	movlw	2
  5401  001B90  6405               	cpfsgt	lcd_init@i,c
  5402  001B92  D001               	goto	l2149
  5403  001B94  D008               	goto	l2155
  5404  001B96                     l2149:
  5405                           
  5406                           ;unmc_lcd_216.c: 144: lcd_send_nibble(0x03);
  5407  001B96  0E03               	movlw	3
  5408  001B98  EC2F  F00E         	call	_lcd_send_nibble
  5409                           
  5410                           ;unmc_lcd_216.c: 145: Delay1KTCYx(8000000UL/800000UL);
  5411  001B9C  0E0A               	movlw	10
  5412  001B9E  ECED  F010         	call	_Delay1KTCYx
  5413  001BA2  2A05               	incf	lcd_init@i,f,c
  5414  001BA4  D7F4               	goto	l2145
  5415  001BA6                     l2155:
  5416                           
  5417                           ;unmc_lcd_216.c: 146: }
  5418                           ;unmc_lcd_216.c: 148: lcd_send_nibble(0x02);
  5419  001BA6  0E02               	movlw	2
  5420  001BA8  EC2F  F00E         	call	_lcd_send_nibble
  5421                           
  5422                           ;unmc_lcd_216.c: 150: for(i=0; i < sizeof(LCD_INIT_STRING); i++){
  5423  001BAC  0E00               	movlw	0
  5424  001BAE  6E05               	movwf	lcd_init@i,c
  5425  001BB0  0E03               	movlw	3
  5426  001BB2  6405               	cpfsgt	lcd_init@i,c
  5427  001BB4  D002               	goto	l2163
  5428  001BB6  0012               	return	
  5429  001BB8  0012               	return	
  5430  001BBA                     l2163:
  5431                           
  5432                           ;unmc_lcd_216.c: 151: lcd_send_byte(0, LCD_INIT_STRING[i]);
  5433  001BBA  5005               	movf	lcd_init@i,w,c
  5434  001BBC  0D01               	mullw	1
  5435  001BBE  0E0B               	movlw	low _LCD_INIT_STRING
  5436  001BC0  24F3               	addwf	prodl,w,c
  5437  001BC2  6EF6               	movwf	tblptrl,c
  5438  001BC4  0E0F               	movlw	high _LCD_INIT_STRING
  5439  001BC6  20F4               	addwfc	prodh,w,c
  5440  001BC8  6EF7               	movwf	tblptrh,c
  5441  001BCA                     	if	0	;There are less than 3 active tblptr bytes
  5442  001BCA                     	endif
  5443  001BCA  0008               	tblrd		*
  5444  001BCC  CFF5 F003          	movff	tablat,lcd_send_byte@n
  5445  001BD0  0E00               	movlw	0
  5446  001BD2  EC6A  F010         	call	_lcd_send_byte
  5447                           
  5448                           ;unmc_lcd_216.c: 153: Delay1KTCYx(8000000UL/800000UL);
  5449  001BD6  0E0A               	movlw	10
  5450  001BD8  ECED  F010         	call	_Delay1KTCYx
  5451  001BDC  2A05               	incf	lcd_init@i,f,c
  5452  001BDE  0E03               	movlw	3
  5453  001BE0  6405               	cpfsgt	lcd_init@i,c
  5454  001BE2  D7EB               	goto	l2163
  5455  001BE4  0012               	return	
  5456  001BE6  0012               	return		;funcret
  5457  001BE8                     __end_of_lcd_init:
  5458                           	opt stack 0
  5459                           tblptru	equ	0xFF8
  5460                           tblptrh	equ	0xFF7
  5461                           tblptrl	equ	0xFF6
  5462                           tablat	equ	0xFF5
  5463                           prodh	equ	0xFF4
  5464                           prodl	equ	0xFF3
  5465                           intcon	equ	0xFF2
  5466                           indf0	equ	0xFEF
  5467                           postinc0	equ	0xFEE
  5468                           fsr0h	equ	0xFEA
  5469                           fsr0l	equ	0xFE9
  5470                           wreg	equ	0xFE8
  5471                           postdec1	equ	0xFE5
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _lcd_send_byte *****************
  5481 ;; Defined at:
  5482 ;;		line 86 in file "Unimic/unmc_01/sources/unmc_lcd_216.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  address         1    wreg     unsigned char 
  5485 ;;  n               1    2[COMRAM] unsigned char 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  address         1    3[COMRAM] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;		None               void
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 0/0
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5497 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5500 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5501 ;;Total ram usage:        2 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:    1
  5504 ;; This function calls:
  5505 ;;		_Delay100TCYx
  5506 ;;		_lcd_send_nibble
  5507 ;; This function is called by:
  5508 ;;		_lcd_init
  5509 ;;		_lcd_gotoxy
  5510 ;;		_lcd_putc
  5511 ;;		_lcd_comand
  5512 ;;		_lcd_setcursor_vb
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text33
  5517  0020D4                     __ptext33:
  5518                           	opt stack 0
  5519  0020D4                     _lcd_send_byte:
  5520                           	opt stack 27
  5521                           
  5522                           ;incstack = 0
  5523                           ;lcd_send_byte@address stored from wreg
  5524  0020D4  6E04               	movwf	lcd_send_byte@address,c
  5525                           
  5526                           ;unmc_lcd_216.c: 88: LATBbits.LATB3=0;
  5527  0020D6  968A               	bcf	3978,3,c	;volatile
  5528                           
  5529                           ;unmc_lcd_216.c: 93: Delay100TCYx(8000000UL/4000000UL);
  5530  0020D8  0E02               	movlw	2
  5531  0020DA  ECE4  F010         	call	_Delay100TCYx
  5532                           
  5533                           ;unmc_lcd_216.c: 96: TRISBbits.TRISB4=0;
  5534  0020DE  9893               	bcf	3987,4,c	;volatile
  5535                           
  5536                           ;unmc_lcd_216.c: 97: TRISBbits.TRISB5=0;
  5537  0020E0  9A93               	bcf	3987,5,c	;volatile
  5538                           
  5539                           ;unmc_lcd_216.c: 98: TRISBbits.TRISB6=0;
  5540  0020E2  9C93               	bcf	3987,6,c	;volatile
  5541                           
  5542                           ;unmc_lcd_216.c: 99: TRISBbits.TRISB7=0;
  5543  0020E4  9E93               	bcf	3987,7,c	;volatile
  5544                           
  5545                           ;unmc_lcd_216.c: 101: if(address)
  5546  0020E6  5004               	movf	lcd_send_byte@address,w,c
  5547  0020E8  B4D8               	btfsc	status,2,c
  5548  0020EA  D002               	goto	l309
  5549                           
  5550                           ;unmc_lcd_216.c: 102: LATBbits.LATB3=1;
  5551  0020EC  868A               	bsf	3978,3,c	;volatile
  5552  0020EE  D001               	goto	l310
  5553  0020F0                     l309:
  5554                           
  5555                           ;unmc_lcd_216.c: 103: else
  5556                           ;unmc_lcd_216.c: 104: LATBbits.LATB3=0;
  5557  0020F0  968A               	bcf	3978,3,c	;volatile
  5558  0020F2                     l310:
  5559                           
  5560                           ;unmc_lcd_216.c: 106: __nop();
  5561  0020F2  F000               	nop	
  5562                           
  5563                           ;unmc_lcd_216.c: 113: lcd_send_nibble(n >> 4);
  5564  0020F4  3803               	swapf	lcd_send_byte@n,w,c
  5565  0020F6  0B0F               	andlw	15
  5566  0020F8  EC2F  F00E         	call	_lcd_send_nibble
  5567                           
  5568                           ;unmc_lcd_216.c: 114: lcd_send_nibble(n & 0xf);
  5569  0020FC  5003               	movf	lcd_send_byte@n,w,c
  5570  0020FE  0B0F               	andlw	15
  5571  002100  EC2F  F00E         	call	_lcd_send_nibble
  5572  002104  0012               	return		;funcret
  5573  002106                     __end_of_lcd_send_byte:
  5574                           	opt stack 0
  5575                           tblptru	equ	0xFF8
  5576                           tblptrh	equ	0xFF7
  5577                           tblptrl	equ	0xFF6
  5578                           tablat	equ	0xFF5
  5579                           prodh	equ	0xFF4
  5580                           prodl	equ	0xFF3
  5581                           intcon	equ	0xFF2
  5582                           indf0	equ	0xFEF
  5583                           postinc0	equ	0xFEE
  5584                           fsr0h	equ	0xFEA
  5585                           fsr0l	equ	0xFE9
  5586                           wreg	equ	0xFE8
  5587                           postdec1	equ	0xFE5
  5588                           fsr1l	equ	0xFE1
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           fsr2h	equ	0xFDA
  5593                           fsr2l	equ	0xFD9
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _lcd_send_nibble *****************
  5597 ;; Defined at:
  5598 ;;		line 25 in file "Unimic/unmc_01/sources/unmc_lcd_216.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  nibble          1    wreg     unsigned char 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  nibble          1    1[COMRAM] unsigned char 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;		None               void
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5614 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5616 ;;Total ram usage:        2 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; This function calls:
  5619 ;;		Nothing
  5620 ;; This function is called by:
  5621 ;;		_lcd_send_byte
  5622 ;;		_lcd_init
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           	psect	text34
  5627  001C5E                     __ptext34:
  5628                           	opt stack 0
  5629  001C5E                     _lcd_send_nibble:
  5630                           	opt stack 28
  5631                           
  5632                           ;incstack = 0
  5633                           ;lcd_send_nibble@nibble stored from wreg
  5634  001C5E  6E02               	movwf	lcd_send_nibble@nibble,c
  5635                           
  5636                           ;unmc_lcd_216.c: 27: LATBbits.LATB4=!!(nibble & 0x01);
  5637  001C60  A002               	btfss	lcd_send_nibble@nibble,0,c
  5638  001C62  D003               	goto	u1060
  5639  001C64  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5640  001C66  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5641  001C68  D001               	goto	u1078
  5642  001C6A                     u1060:
  5643  001C6A  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5644  001C6C                     u1078:
  5645  001C6C  3A01               	swapf	??_lcd_send_nibble,f,c
  5646  001C6E  508A               	movf	3978,w,c	;volatile
  5647  001C70  1801               	xorwf	??_lcd_send_nibble,w,c
  5648  001C72  0BEF               	andlw	-17
  5649  001C74  1801               	xorwf	??_lcd_send_nibble,w,c
  5650  001C76  6E8A               	movwf	3978,c	;volatile
  5651                           
  5652                           ;unmc_lcd_216.c: 28: LATBbits.LATB5=!!(nibble & 0x02);
  5653  001C78  A202               	btfss	lcd_send_nibble@nibble,1,c
  5654  001C7A  D003               	goto	u1080
  5655  001C7C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5656  001C7E  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5657  001C80  D001               	goto	u1098
  5658  001C82                     u1080:
  5659  001C82  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5660  001C84                     u1098:
  5661  001C84  3A01               	swapf	??_lcd_send_nibble,f,c
  5662  001C86  4601               	rlncf	??_lcd_send_nibble,f,c
  5663  001C88  508A               	movf	3978,w,c	;volatile
  5664  001C8A  1801               	xorwf	??_lcd_send_nibble,w,c
  5665  001C8C  0BDF               	andlw	-33
  5666  001C8E  1801               	xorwf	??_lcd_send_nibble,w,c
  5667  001C90  6E8A               	movwf	3978,c	;volatile
  5668                           
  5669                           ;unmc_lcd_216.c: 29: LATBbits.LATB6=!!(nibble & 0x04);
  5670  001C92  A402               	btfss	lcd_send_nibble@nibble,2,c
  5671  001C94  D003               	goto	u1100
  5672  001C96  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5673  001C98  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5674  001C9A  D001               	goto	u1118
  5675  001C9C                     u1100:
  5676  001C9C  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5677  001C9E                     u1118:
  5678  001C9E  3A01               	swapf	??_lcd_send_nibble,f,c
  5679  001CA0  4601               	rlncf	??_lcd_send_nibble,f,c
  5680  001CA2  4601               	rlncf	??_lcd_send_nibble,f,c
  5681  001CA4  508A               	movf	3978,w,c	;volatile
  5682  001CA6  1801               	xorwf	??_lcd_send_nibble,w,c
  5683  001CA8  0BBF               	andlw	-65
  5684  001CAA  1801               	xorwf	??_lcd_send_nibble,w,c
  5685  001CAC  6E8A               	movwf	3978,c	;volatile
  5686                           
  5687                           ;unmc_lcd_216.c: 30: LATBbits.LATB7=!!(nibble & 0x08);
  5688  001CAE  A602               	btfss	lcd_send_nibble@nibble,3,c
  5689  001CB0  D003               	goto	u1120
  5690  001CB2  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5691  001CB4  2A01               	incf	??_lcd_send_nibble& (0+255),f,c
  5692  001CB6  D001               	goto	u1138
  5693  001CB8                     u1120:
  5694  001CB8  6A01               	clrf	??_lcd_send_nibble& (0+255),c
  5695  001CBA                     u1138:
  5696  001CBA  3201               	rrcf	??_lcd_send_nibble,f,c
  5697  001CBC  3201               	rrcf	??_lcd_send_nibble,f,c
  5698  001CBE  508A               	movf	3978,w,c	;volatile
  5699  001CC0  1801               	xorwf	??_lcd_send_nibble,w,c
  5700  001CC2  0B7F               	andlw	-129
  5701  001CC4  1801               	xorwf	??_lcd_send_nibble,w,c
  5702  001CC6  6E8A               	movwf	3978,c	;volatile
  5703                           
  5704                           ;unmc_lcd_216.c: 32: __nop();
  5705  001CC8  F000               	nop	
  5706                           
  5707                           ;unmc_lcd_216.c: 33: LATBbits.LATB2=1;
  5708  001CCA  848A               	bsf	3978,2,c	;volatile
  5709                           
  5710                           ;unmc_lcd_216.c: 34: __nop();__nop();
  5711  001CCC  F000               	nop	
  5712  001CCE  F000               	nop	
  5713                           
  5714                           ;unmc_lcd_216.c: 35: LATBbits.LATB2=0;
  5715  001CD0  948A               	bcf	3978,2,c	;volatile
  5716  001CD2  0012               	return		;funcret
  5717  001CD4                     __end_of_lcd_send_nibble:
  5718                           	opt stack 0
  5719                           tblptru	equ	0xFF8
  5720                           tblptrh	equ	0xFF7
  5721                           tblptrl	equ	0xFF6
  5722                           tablat	equ	0xFF5
  5723                           prodh	equ	0xFF4
  5724                           prodl	equ	0xFF3
  5725                           intcon	equ	0xFF2
  5726                           indf0	equ	0xFEF
  5727                           postinc0	equ	0xFEE
  5728                           fsr0h	equ	0xFEA
  5729                           fsr0l	equ	0xFE9
  5730                           wreg	equ	0xFE8
  5731                           postdec1	equ	0xFE5
  5732                           fsr1l	equ	0xFE1
  5733                           indf2	equ	0xFDF
  5734                           postinc2	equ	0xFDE
  5735                           postdec2	equ	0xFDD
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function _Delay100TCYx *****************
  5741 ;; Defined at:
  5742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d100tcyx.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  unit            1    wreg     unsigned char 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  unit            1    0[COMRAM] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;		None               void
  5749 ;; Registers used:
  5750 ;;		wreg
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5759 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5760 ;;Total ram usage:        1 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_lcd_send_byte
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text35
  5770  0021C8                     __ptext35:
  5771                           	opt stack 0
  5772  0021C8                     _Delay100TCYx:
  5773                           	opt stack 27
  5774                           
  5775                           ;incstack = 0
  5776                           ;Delay100TCYx@unit stored from wreg
  5777  0021C8  6E01               	movwf	Delay100TCYx@unit,c
  5778  0021CA  0E21               	movlw	33
  5779  0021CC                     u2127:
  5780  0021CC  2EE8               	decfsz	wreg,f,c
  5781  0021CE  D7FE               	goto	u2127
  5782  0021D0  F000               	nop	
  5783  0021D2  2E01               	decfsz	Delay100TCYx@unit,f,c
  5784  0021D4  D7FA               	goto	l2021
  5785  0021D6  0012               	return	
  5786  0021D8  0012               	return		;funcret
  5787  0021DA                     __end_of_Delay100TCYx:
  5788                           	opt stack 0
  5789                           tblptru	equ	0xFF8
  5790                           tblptrh	equ	0xFF7
  5791                           tblptrl	equ	0xFF6
  5792                           tablat	equ	0xFF5
  5793                           prodh	equ	0xFF4
  5794                           prodl	equ	0xFF3
  5795                           intcon	equ	0xFF2
  5796                           indf0	equ	0xFEF
  5797                           postinc0	equ	0xFEE
  5798                           fsr0h	equ	0xFEA
  5799                           fsr0l	equ	0xFE9
  5800                           wreg	equ	0xFE8
  5801                           postdec1	equ	0xFE5
  5802                           fsr1l	equ	0xFE1
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           fsr2h	equ	0xFDA
  5807                           fsr2l	equ	0xFD9
  5808                           status	equ	0xFD8
  5809                           
  5810 ;; *************** function _Delay1KTCYx *****************
  5811 ;; Defined at:
  5812 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\d1ktcyx.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  unit            1    wreg     unsigned char 
  5815 ;; Auto vars:     Size  Location     Type
  5816 ;;  unit            1    0[COMRAM] unsigned char 
  5817 ;; Return value:  Size  Location     Type
  5818 ;;		None               void
  5819 ;; Registers used:
  5820 ;;		wreg
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5827 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5829 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5830 ;;Total ram usage:        1 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; This function calls:
  5833 ;;		Nothing
  5834 ;; This function is called by:
  5835 ;;		_lcd_init
  5836 ;;		_DelayPORXLCD
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text36
  5841  0021DA                     __ptext36:
  5842                           	opt stack 0
  5843  0021DA                     _Delay1KTCYx:
  5844                           	opt stack 28
  5845                           
  5846                           ;incstack = 0
  5847                           ;Delay1KTCYx@unit stored from wreg
  5848  0021DA  6E01               	movwf	Delay1KTCYx@unit,c
  5849  0021DC  0EFA               	movlw	250
  5850  0021DE                     u2137:
  5851  0021DE  F000               	nop	
  5852  0021E0  2EE8               	decfsz	wreg,f,c
  5853  0021E2  D7FD               	goto	u2137
  5854  0021E4  2E01               	decfsz	Delay1KTCYx@unit,f,c
  5855  0021E6  D7FA               	goto	l2067
  5856  0021E8  0012               	return	
  5857  0021EA  0012               	return		;funcret
  5858  0021EC                     __end_of_Delay1KTCYx:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           intcon	equ	0xFF2
  5867                           indf0	equ	0xFEF
  5868                           postinc0	equ	0xFEE
  5869                           fsr0h	equ	0xFEA
  5870                           fsr0l	equ	0xFE9
  5871                           wreg	equ	0xFE8
  5872                           postdec1	equ	0xFE5
  5873                           fsr1l	equ	0xFE1
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           fsr2h	equ	0xFDA
  5878                           fsr2l	equ	0xFD9
  5879                           status	equ	0xFD8
  5880                           tblptru	equ	0xFF8
  5881                           tblptrh	equ	0xFF7
  5882                           tblptrl	equ	0xFF6
  5883                           tablat	equ	0xFF5
  5884                           prodh	equ	0xFF4
  5885                           prodl	equ	0xFF3
  5886                           intcon	equ	0xFF2
  5887                           indf0	equ	0xFEF
  5888                           postinc0	equ	0xFEE
  5889                           fsr0h	equ	0xFEA
  5890                           fsr0l	equ	0xFE9
  5891                           wreg	equ	0xFE8
  5892                           postdec1	equ	0xFE5
  5893                           fsr1l	equ	0xFE1
  5894                           indf2	equ	0xFDF
  5895                           postinc2	equ	0xFDE
  5896                           postdec2	equ	0xFDD
  5897                           fsr2h	equ	0xFDA
  5898                           fsr2l	equ	0xFD9
  5899                           status	equ	0xFD8
  5900                           
  5901                           	psect	rparam
  5902  0000                     tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           prodh	equ	0xFF4
  5907                           prodl	equ	0xFF3
  5908                           intcon	equ	0xFF2
  5909                           indf0	equ	0xFEF
  5910                           postinc0	equ	0xFEE
  5911                           fsr0h	equ	0xFEA
  5912                           fsr0l	equ	0xFE9
  5913                           wreg	equ	0xFE8
  5914                           postdec1	equ	0xFE5
  5915                           fsr1l	equ	0xFE1
  5916                           indf2	equ	0xFDF
  5917                           postinc2	equ	0xFDE
  5918                           postdec2	equ	0xFDD
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8


Data Sizes:
    Strings     111
    Constant    14
    Data        10
    BSS         83
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     36      95
    BANK0           160      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_43(CODE[5]), STR_42(CODE[5]), STR_41(CODE[5]), STR_40(CODE[5]), 
		 -> STR_39(CODE[5]), STR_38(CODE[5]), STR_37(CODE[5]), STR_36(CODE[5]), 
		 -> STR_35(CODE[5]), STR_34(CODE[5]), STR_3(CODE[10]), STR_2(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    lcd_putrs@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[5]), STR_30(CODE[8]), 
		 -> STR_29(CODE[7]), STR_28(CODE[6]), STR_27(CODE[8]), STR_26(CODE[4]), 
		 -> STR_25(CODE[5]), STR_24(CODE[6]), STR_23(CODE[6]), STR_22(CODE[3]), 
		 -> STR_21(CODE[3]), STR_20(CODE[8]), STR_19(CODE[2]), STR_18(CODE[2]), 
		 -> STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), 
		 -> STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[7]), STR_6(CODE[4]), 
		 -> STR_5(CODE[6]), STR_4(CODE[8]), buffer1(BANK0[20]), STR_1(CODE[4]), 

    lcd_write@string	PTR unsigned char  size(2) Largest target is 20
		 -> STR_31(CODE[5]), STR_30(CODE[8]), STR_29(CODE[7]), STR_28(CODE[6]), 
		 -> STR_27(CODE[8]), STR_26(CODE[4]), STR_25(CODE[5]), STR_24(CODE[6]), 
		 -> STR_23(CODE[6]), STR_22(CODE[3]), STR_21(CODE[3]), STR_20(CODE[8]), 
		 -> STR_19(CODE[2]), STR_18(CODE[2]), STR_17(CODE[2]), STR_16(CODE[2]), 
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), 
		 -> STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), 
		 -> STR_7(CODE[7]), STR_6(CODE[4]), STR_5(CODE[6]), STR_4(CODE[8]), 
		 -> buffer1(BANK0[20]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_keyboard_control
    _lcd_comand->_lcd_send_byte
    _Write_RTC->_RtccWriteDate
    _keyboard_control->_sprintf
    _button_hash->_lcd_putrs
    _button_asterisk->_lcd_putrs
    _home->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _menu_submenu_pin->_lcd_write
    _menu_submenu_clock->_lcd_write
    _menu_submenu_alarm->_lcd_write
    _menu_submenu_activate->_lcd_write
    _button_A->_menu_iterator
    _button_A->_menu_submenu_iterator
    _menu_submenu_iterator->_lcd_write
    _menu_iterator->_lcd_write
    _menu_home->_lcd_write
    _lcd_write->_lcd_putrs
    _lcd_putrs->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  119291
                               _home
                   _keyboard_control
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    3771
                          _Write_RTC
                         _lcd_comand
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_comand                                           1     1      0     646
                                              4 COMRAM     1     1      0
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (4) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _keyboard_control                                     1     1      0  102271
                                             35 COMRAM     1     1      0
                           _button_A
                           _button_B
                           _button_C
                           _button_D
                    _button_asterisk
                        _button_hash
                          _lcd_putrs
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _button_hash                                          0     0      0    2366
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _button_asterisk                                      0     0      0    2366
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _button_D                                             0     0      0   13249
                               _home
 ---------------------------------------------------------------------------------
 (3) _home                                                 0     0      0   13249
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    22     10    3196
                                             12 COMRAM    23    13     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _button_C                                             0     0      0   10053
                          _menu_home
 ---------------------------------------------------------------------------------
 (2) _button_B                                             2     2      0   40212
                                             16 COMRAM     2     2      0
              _menu_submenu_activate
                 _menu_submenu_alarm
                 _menu_submenu_clock
                   _menu_submenu_pin
 ---------------------------------------------------------------------------------
 (3) _menu_submenu_pin                                     0     0      0   10053
                           _lcd_init
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _menu_submenu_clock                                   0     0      0   10053
                           _lcd_init
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _menu_submenu_alarm                                   0     0      0   10053
                           _lcd_init
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _menu_submenu_activate                                0     0      0   10053
                           _lcd_init
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _button_A                                             0     0      0   28463
                          _menu_home
                      _menu_iterator
              _menu_submenu_iterator
 ---------------------------------------------------------------------------------
 (3) _menu_submenu_iterator                                2     2      0    9205
                                             16 COMRAM     2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _menu_iterator                                        2     2      0    9205
                                             16 COMRAM     2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (3) _menu_home                                            0     0      0   10053
                           _lcd_init
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_write                                            6     0      6    9205
                                             10 COMRAM     6     0      6
                         _lcd_gotoxy
                          _lcd_putrs
 ---------------------------------------------------------------------------------
 (2) _lcd_putrs                                            2     0      2    2366
                                              8 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (3) _lcd_putc                                             1     1      0    1489
                                              7 COMRAM     1     1      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (4) _lcd_gotoxy                                           3     2      1     821
                                              4 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0     848
                                              4 COMRAM     1     1      0
                        _Delay1KTCYx
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1     624
                                              2 COMRAM     2     1      1
                       _Delay100TCYx
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _home
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble
     _lcd_write
       _lcd_gotoxy
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _keyboard_control
     _button_A
       _menu_home
         _lcd_init
           _Delay1KTCYx
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
           _lcd_send_nibble
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
       _menu_iterator
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
       _menu_submenu_iterator
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
     _button_B
       _menu_submenu_activate
         _lcd_init
           _Delay1KTCYx
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
           _lcd_send_nibble
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
       _menu_submenu_alarm
         _lcd_init
           _Delay1KTCYx
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
           _lcd_send_nibble
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
       _menu_submenu_clock
         _lcd_init
           _Delay1KTCYx
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
           _lcd_send_nibble
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
       _menu_submenu_pin
         _lcd_init
           _Delay1KTCYx
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
           _lcd_send_nibble
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
     _button_C
       _menu_home
         _lcd_init
           _Delay1KTCYx
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
           _lcd_send_nibble
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
     _button_D
       _home
         _lcd_init
           _Delay1KTCYx
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
           _lcd_send_nibble
         _lcd_write
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_putrs
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _Delay100TCYx
                   _lcd_send_nibble
               _lcd_send_byte
                 _Delay100TCYx
                 _lcd_send_nibble
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
     _button_asterisk
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _button_hash
       _lcd_putrs
         _lcd_putc
           _lcd_gotoxy
             _lcd_send_byte
               _Delay100TCYx
               _lcd_send_nibble
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
     _lcd_putrs
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _Delay100TCYx
             _lcd_send_nibble
         _lcd_send_byte
           _Delay100TCYx
           _lcd_send_nibble
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _setup
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _lcd_comand
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
     _lcd_init
       _Delay1KTCYx
       _lcd_send_byte
         _Delay100TCYx
         _lcd_send_nibble
       _lcd_send_nibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      30       5       30.0%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     24      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8F       6        0.0%
DATA                 0      0      8F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 06 19:13:37 2016

                             _a 0025                               _b 0027                               _c 0029  
                             _i 002B                               _j 002D                               _k 002F  
   __size_of_menu_submenu_alarm 005A     __size_of_menu_submenu_clock 005A                  ?_lcd_send_byte 0003  
                  ___awdiv@sign 0006             ___wmul@multiplicand 0003                     lcd_comand@d 0005  
                  __CFG_CP0$OFF 000000                 lcd_write@column 000B           _menu_submenu_activate 1F16  
                           l221 0FBC                             l310 20F2                             l230 1020  
                           l222 0FB8                             l241 10A6                             l233 1036  
                           l225 0FF0                             l250 10E8                             l242 10A2  
                           l234 1032                             l226 0FEC                             l309 20F0  
                           l261 1190                             l253 1128                             l245 10DA  
                           l237 1072                             l229 1024                             l270 11B8  
                           l262 118C                             l254 1124                             l246 10D6  
                           l238 106E                             l273 11F0                             l265 11A2  
                           l257 115C                             l249 10EC                             l282 1210  
                           l274 11EC                             l266 119E                             l258 1158  
                           l277 1202                             l269 11BC                             l278 11FE  
                           l388 13FC                             _dia 0057                             _key 003F  
                           _mes 005D                 lcd_write@string 000F                             wreg 000FE8  
                   lcd_gotoxy@x 0006                     lcd_gotoxy@y 0005               ??_button_asterisk 000B  
                          l1032 1DFE                            l1042 2006                            l2021 21CA  
                          l2103 1DC2                            l2105 1DCC                            l2115 1DF2  
                          l2107 1DD4                            l2131 1FFA                            l2123 1FD2  
                          l2211 1342                            l2203 1304                            l2061 2038  
                          l2125 1FDC                            l2205 1326                            l2047 213A  
                          l2055 2014                            l2127 1FE4                            l2223 1376  
                          l2215 134E                            l2145 1B8E                            l2049 2140  
                          l2057 2020                            l2065 2044                            l2073 1F72  
                          l2241 13DA                            l2233 13B0                            l2321 1974  
                          l2313 195C                            l2067 21DC                            l2163 1BBA  
                          l2155 1BA6                            l2059 202C                            l2227 139A  
                          l2219 1372                            l2149 1B96                            l2077 1F9C  
                          l2421 1490                            l2253 1456                            l2229 13A4  
                          l2181 125C                            l2173 1234                            l2317 1968  
                          l2087 216A                            l2247 1402                            l2239 13D2  
                          l2191 129A                            l2255 1462                            l2343 17CA  
                          l2433 1524                            l2257 147E                            l2185 1266  
                          l2353 17FA                            l2337 1790                            l2521 1AFA  
                          l2427 14DA                            l2187 127C                            l2179 124E  
                          l2347 17DE                            l2275 18DC                            l2531 1B22  
                          l2515 1AE8                            l2461 1A6E                            l2613 20C4  
                          l2285 190C                            l2269 18B2                            l2439 156E  
                          l2447 15B8                            l2455 1A2C                            l2631 1D70  
                          l2623 1D54                            l2199 12FE                            l2279 18F0  
                          l2527 1B10                            l2543 1B4C                            l2609 20B6  
                          l2393 1868                            l2385 1850                            l2529 1B1A  
                          l2627 1D62                            l2619 1D46                            l2547 1B5C  
                          l2539 1B40                            l2469 1AB0                            l2637 1D7E  
                          l2389 185C                            l2777 1218                            l2785 21AC  
                          STR_1 0F68                            STR_2 0F0F                            STR_3 0F1E  
                          STR_4 0F38                            STR_5 0F4D                            STR_6 0F6C  
                          STR_7 0F40                            STR_8 0F7C                            STR_9 0F76  
                          u1100 1C9C                            u1120 1CB8                            u1060 1C6A  
                          u1118 1C9E                            u1080 1C82                            u1160 1F92  
                          u1138 1CBA                            u1170 1FBC                            u2117 121E  
                          u1078 1C6C                            u2127 21CC                            u1167 1F88  
                          u2137 21DE                            u1177 1FB2                            u1098 1C84  
              ?_lcd_send_nibble 0001           _menu_submenu_iterator 1A2A                            _anio 0055  
                          _flag 02F8                            _main 21A2                            _home 1980  
                          _hora 005B                            _menu 0031                            fsr0h 000FEA  
                          indf0 000FEF                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                 __CFG_T1DIG$ON 000000                            prodh 000FF4                            prodl 000FF3  
                          start 0000                   __CFG_IESO$OFF 000000                    ___param_bank 000010  
                   _Delay1KTCYx 21DA                   __CFG_PLLDIV$1 000000                           ?_main 0001  
                         ?_home 0001                 __end_of___awdiv 1B68                           STR_10 0F7C  
                         STR_11 0F76                           STR_12 0F7C                           STR_20 0F38  
                         STR_13 0F76                           STR_21 0F70                           STR_14 0F7C  
                         STR_22 0F73                           STR_30 0F28                           STR_15 0F76  
                         STR_23 0F4D                           STR_31 0F5E                           STR_16 0F7C  
                         STR_40 0F63                           STR_32 0F7A                           STR_24 0F47  
                         STR_17 0F76                           STR_41 0F63                           STR_33 0F78  
                         STR_25 0F59                           STR_18 0F7C                           STR_26 0F6C  
                         STR_42 0F63                           STR_34 0F63                           STR_19 0F76  
                         STR_43 0F63                           STR_35 0F63                           STR_27 0F30  
                         STR_36 0F63                           STR_28 0F53                           STR_29 0F40  
                         STR_37 0F63                           STR_38 0F63                           STR_39 0F63  
         __size_of_Delay100TCYx 0012                 ___awdiv@divisor 0003                 __end_of___lwdiv 1E08  
               __end_of___lwmod 2010                 ___awdiv@counter 0005                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                    ?_button_hash 0001  
                __CFG_FCMEN$OFF 000000                 __end_of_dpowers 0F0B                           _mes_d 004F  
                         _mes_u 0050                 __end_of_isdigit 2174                           _setup 1CD4  
                __pbitbssCOMRAM 02F8                           tablat 000FF5                    lcd_putrs@ptr 0009  
                         status 000FD8                 __end_of_sprintf 148E                    lcd_write@row 000D  
       __CFG_DSWDTOSC$INTOSCREF 000000                 __initialization 205C                    _Delay100TCYx 21C8  
                  __end_of_main 21B6                 ??_lcd_send_byte 0004                    __end_of_home 1A2A  
        ?_menu_submenu_activate 0001                          ??_main 0025                          ??_home 0024  
                 __activetblptr 000002                _menu_submenu_pin 1E08                __end_of_RtccWrOn 21C8  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _EECON2 000FA7  
                        _ANCON0 000F48                          _ANCON1 000F49                ___awdiv@dividend 0001  
                        ?_setup 0001          ?_menu_submenu_iterator 0001                  __CFG_WDTEN$OFF 000000  
              RtccWriteDate@pDt 0001                          _RTCCFG 000F3F                  __CFG_WPCFG$OFF 000000  
                __CFG_WPDIS$OFF 000000                  __CFG_XINST$OFF 000000                __end_of_lcd_init 1BE8  
              __end_of_lcd_putc 205C                          ___wmul 2106                       ??___awdiv 0005  
                __CFG_STVREN$ON 000000                          _diasem 0059                          _anio_d 0048  
                        _anio_u 0049                       ??___lwdiv 0005                       ??___lwmod 000C  
                        _hora_d 004D                          _hora_u 004E                __end_of_button_A 20D4  
              __end_of_button_B 1DAC                __end_of_button_C 2224                __end_of_button_D 21A2  
                        clear_0 2062                          clear_1 2070                ___awdiv@quotient 0007  
                        _minuto 0033                          _select 0037           __end_of_RtccWriteDate 1874  
         __end_of_RtccWriteTime 1980                RtccWriteTime@pTm 0001                    __pdataCOMRAM 0055  
                     ??_isdigit 0001                    __mediumconst 0000                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8                       ??_sprintf 0017  
                    __accesstop 0060         __end_of__initialization 2096              __size_of_Write_RTC 0148  
                 ___rparam_used 000001       __size_of_keyboard_control 02AA                  __pcstackCOMRAM 0001  
        __size_of_menu_iterator 0158                   __end_of_setup 1D44                 __CFG_DSWDTPS$G2 000000  
               _button_asterisk 2208                 __CFG_OSC$INTOSC 000000               lcd_gotoxy@address 0007  
          __size_of_button_hash 000E              __size_of_lcd_putrs 0054              __size_of_lcd_write 0018  
                  sprintf@width 0021                         ??_setup 000E                      __pbssBANK0 0060  
                    _dia_semana 004A       RtccWriteTime@tempHourWDay 000A                      __pnvCOMRAM 0048  
            __size_of_menu_home 0076      __end_of_menu_submenu_alarm 1F16                       ?_RtccWrOn 0001  
                lcd_send_byte@n 0003      __end_of_menu_submenu_clock 1EBC                         ?___wmul 0001  
                  ?_Delay1KTCYx 0001               __end_of_Write_RTC 172E                      _lcd_comand 21EC  
                    _lcd_gotoxy 212E                         _RTCVALH 000F99                         _RTCVALL 000F98  
                     ?_lcd_init 0001                   _menu_iterator 148E                       ?_lcd_putc 0001  
                     ?_button_A 0001                       ?_button_B 0001                       ?_button_C 0001  
                     ?_button_D 0001        __end_of_menu_submenu_pin 1E62                         __Hparam 0000  
                       __Lparam 0000        __size_of_lcd_send_nibble 0076         __end_of_button_asterisk 2216  
                    ??_RtccWrOn 0001         ??_menu_submenu_activate 0011                         ___awdiv 1AD2  
             __end_of_lcd_putrs 1FC4               __end_of_lcd_write 218C                 __size_of___wmul 0028  
                       ___lwdiv 1DAC                         ___lwmod 1FC4                    __psmallconst 0F00  
                   _RtccTimeVal 0078                         __pcinit 205C                         _fecha_d 004B  
                       _fecha_u 004C                         __ramtop 0F00                         __ptext0 21A2  
                       __ptext1 1CD4                         __ptext2 21EC                         __ptext3 15E6  
                       __ptext4 1AD2                         __ptext5 1874                         __ptext6 172E  
                       __ptext7 21B6                         __ptext8 0F80                         __ptext9 21FA  
                       _buffer1 007C                       _T1CONbits 000FCD                         _dpowers 0F01  
                       _isdigit 2152               __end_of_menu_home 1C5E         ??_menu_submenu_iterator 0011  
                       _segundo 0035                  ?_menu_iterator 0001                         _submenu 003D  
                       _sprintf 122A                      ??_lcd_init 0005                      ??_lcd_putc 0008  
          end_of_initialization 2096            lcd_send_byte@address 0004                      ??_button_A 0013  
                 __Lmediumconst 0000                      ??_button_B 0011                      ??_button_C 0011  
                    ??_button_D 0024                _keyboard_control 0F80                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
         __end_of_lcd_send_byte 2106                       _PORTAbits 000F80                       _PORTCbits 000F82  
              __CFG_DSBOREN$OFF 000000                     ?_lcd_comand 0001                __CFG_CPUDIV$OSC1 000000  
                     _TRISBbits 000F93                     ?_lcd_gotoxy 0005                 _LCD_INIT_STRING 0F0B  
              __CFG_IOL1WAY$OFF 000000       RtccWriteDate@tempDayMonth 000A             __CFG_MSSP7B_EN$MSK7 000000  
              ?_button_asterisk 0001                Delay100TCYx@unit 0001                  __end_of___wmul 212E  
                 __pidataCOMRAM 2224       RtccWriteDate@tempHourWDay 000C               ??_lcd_send_nibble 0001  
          __size_of_Delay1KTCYx 0012                __CFG_DSWDTEN$OFF 000000             start_initialization 205C  
               ??_menu_iterator 0011            RtccWriteTime@wasAlrm 0006            RtccWriteTime@wasWrEn 0007  
        __size_of_RtccWriteDate 0146                 RtccWriteDate@di 0003          __size_of_RtccWriteTime 010C  
           __size_of_lcd_comand 000E             __size_of_lcd_gotoxy 0024                        ??___wmul 0005  
             __size_of_RtccWrOn 0012                 RtccWriteTime@di 0003                __CFG_LPT1OSC$OFF 000000  
                   _ALRMCFGbits 000F91         __end_of_LCD_INIT_STRING 0F0F                   ??_button_hash 000B  
            _menu_submenu_alarm 1EBC              _menu_submenu_clock 1E62                     __pbssCOMRAM 0025  
                     _Write_RTC 15E6                    _isdigit$2103 0002             ?_menu_submenu_alarm 0001  
           ?_menu_submenu_clock 0001                 Delay1KTCYx@unit 0001               __size_of_lcd_init 0080  
                   sprintf@flag 001D               __size_of_lcd_putc 004C                     sprintf@prec 0020  
             ?_menu_submenu_pin 0001               __size_of_button_A 0034               __size_of_button_B 0068  
             __size_of_button_C 000E               __size_of_button_D 0016                ___lwdiv@dividend 0001  
                 ?_Delay100TCYx 0001              ??_menu_submenu_pin 0011                        ?___awdiv 0001  
          ??_menu_submenu_alarm 0011                        ?___lwdiv 0001            ??_menu_submenu_clock 0011  
__size_of_menu_submenu_activate 005A                        ?___lwmod 0008   __end_of_menu_submenu_activate 1F70  
       RtccWriteTime@tempMinSec 0008                       _lcd_putrs 1F70                       _lcd_write 2174  
                 _RtccWriteDate 172E                     __smallconst 0F00                   _RtccWriteTime 1874  
                      ?_isdigit 0001            __CFG_RTCOSC$T1OSCREF 000000        __end_of_keyboard_control 122A  
                    ?_Write_RTC 0001  __size_of_menu_submenu_iterator 00A8                ___lwdiv@quotient 0005  
 __end_of_menu_submenu_iterator 1AD2                        ?_sprintf 000D                  __size_of_setup 0070  
                     _menu_home 1BE8             __end_of_button_hash 2208                _RtccAlrmTimeDate 0060  
                ___wmul@product 0005                        _LATAbits 000F89                        _LATBbits 000F8A  
                      _PIE3bits 000FA3                       _select_op 0039                       _selection 003B  
                     _segundo_d 0053                  ??_Delay100TCYx 0001                       _segundo_u 0054  
              __CFG_WDTPS$32768 000000              RtccWriteDate@wasOn 0005              _Rtcc_read_TimeDate 0070  
                ?_RtccWriteDate 0001                      ?_lcd_putrs 0009                      ?_lcd_write 000B  
             ___wmul@multiplier 0001                  ?_RtccWriteTime 0001                       lcd_init@i 0005  
                  ??_lcd_comand 0005                       lcd_putc@c 0008                    ??_lcd_gotoxy 0006  
                     copy_data0 208A                      ?_menu_home 0001                 _lcd_send_nibble 1C5E  
                      __Hrparam 0000                        _RtccDate 0040                        __Lrparam 0000  
                      _RtccTime 0044                        _RtccWrOn 21B6              __end_of_lcd_comand 21FA  
            __end_of_lcd_gotoxy 2152                __size_of___awdiv 0096                __size_of___lwdiv 005C  
              __size_of___lwmod 004C                    _RtccTimeDate 0068                      sprintf@val 001E  
                   _button_hash 21FA                __size_of_isdigit 0022                 ___lwdiv@divisor 0003  
                   ??_Write_RTC 000E                 ___lwdiv@counter 0007                        __ptext10 2208  
                      __ptext11 218C                        __ptext20 1E08                        __ptext12 1980  
                      __ptext21 1E62                        __ptext13 122A                        __ptext30 2010  
                      __ptext22 1EBC                        __ptext14 2152                        __ptext31 212E  
                      __ptext23 1F16                        __ptext15 2106                        __ptext32 1B68  
                      __ptext24 20A0                        __ptext16 1FC4                        __ptext33 20D4  
                      __ptext25 1A2A                        __ptext17 1DAC                        __ptext34 1C5E  
                      __ptext26 148E                        __ptext18 2216                        __ptext35 21C8  
                      __ptext27 1BE8                        __ptext19 1D44                        __ptext36 21DA  
                      __ptext28 2174                        __ptext29 1F70                        _lcd_init 1B68  
                      _lcd_putc 2010                __size_of_sprintf 0264          __size_of_lcd_send_byte 0032  
                      _button_A 20A0                        _button_B 1D44                        _button_C 2216  
                      _button_D 218C                   __size_of_main 0014                   __size_of_home 00AA  
                      _minuto_d 0051                        _minuto_u 0052                   ??_Delay1KTCYx 0001  
               ??_RtccWriteDate 0004                 ??_RtccWriteTime 0004                     ??_lcd_putrs 000B  
                   ??_lcd_write 0011        __size_of_button_asterisk 000E                     _OSCTUNEbits 000F9B  
                    _INTCONbits 000FF2              RtccWriteTime@wasOn 0005            __end_of_Delay100TCYx 21DA  
                      isdigit@c 0003           __end_of_menu_iterator 15E6                     ??_menu_home 0011  
                     sprintf@ap 001B         __end_of_lcd_send_nibble 1CD4                       sprintf@sp 000D  
              ___lwmod@dividend 0008                      _OSCCONbits 000FD3           RtccWriteDate@tempYear 0007  
                 _lcd_send_byte 20D4                      _RTCCFGbits 000F3F                        sprintf@c 0023  
                      sprintf@f 000F       __size_of_menu_submenu_pin 005A                 ___lwmod@divisor 000A  
           __end_of_Delay1KTCYx 21EC                 ___lwmod@counter 000C            RtccWriteDate@wasAlrm 0006  
          RtccWriteDate@wasWrEn 0009               ?_keyboard_control 0001              ??_keyboard_control 0024  
         lcd_send_nibble@nibble 0002  
